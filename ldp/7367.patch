From foo@baz Tue Apr  9 12:12:43 2002
Date: Wed, 09 Apr 2008 07:41:21 +0400
From: Manu Abraham <manu@linuxtv.org>
To: Greg KH <greg@kroah.com>
Subject:

Coding style fixes, #if 0 unused stuff

Cc: Christian Dolzer <c.dolzer@digital-everywhere.com>
Cc: Andreas Monitzer <andy@monitzer.com>
Cc: Fabio De Lorenzo <delorenzo.fabio@gmail.com>
Cc: Robert Berger <robert.berger@reliableembeddedsystems.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/media/dvb/firesat/firesat_1394.c |  172 +++++++++++++++++++------------
 1 file changed, 108 insertions(+), 64 deletions(-)

--- a/drivers/media/dvb/firesat/firesat_1394.c
+++ b/drivers/media/dvb/firesat/firesat_1394.c
@@ -80,8 +80,12 @@ spinlock_t firesat_list_lock = SPIN_LOCK
 static void firesat_add_host(struct hpsb_host *host);
 static void firesat_remove_host(struct hpsb_host *host);
 static void firesat_host_reset(struct hpsb_host *host);
+
+/*
 static void iso_receive(struct hpsb_host *host, int channel, quadlet_t *data,
 			size_t length);
+*/
+
 static void fcp_request(struct hpsb_host *host, int nodeid, int direction,
 			int cts, u8 *data, size_t length);
 
@@ -125,6 +129,7 @@ static int firesat_get_frontend(struct d
 /* And the definition itself...*/
 
 static struct dvb_frontend_ops firesat_ops = {
+
 	.init				= firesat_dvb_init,
 	.sleep				= firesat_sleep,
 
@@ -200,19 +205,20 @@ static struct dvb_frontend_info firesat_
 
 	.caps 			= FE_CAN_INVERSION_AUTO		|
 				  FE_CAN_FEC_2_3		|
-				  FE_CAN_TRANSMISSION_MODE_AUTO | FE_CAN_GUARD_INTERVAL_AUTO	|
+				  FE_CAN_TRANSMISSION_MODE_AUTO |
+				  FE_CAN_GUARD_INTERVAL_AUTO	|
 				  FE_CAN_HIERARCHY_AUTO,
 };
 
-static void firesat_add_host (struct hpsb_host *host) {
-	struct ti_ohci *ohci;
-//    printk(KERN_INFO "FireSAT add_host (nodeid = 0x%x)\n",host->node_id);
+static void firesat_add_host (struct hpsb_host *host)
+{
+	struct ti_ohci *ohci = (struct ti_ohci *)host->hostdata;
 
 	/* We only work with the OHCI-1394 driver */
 	if (strcmp(host->driver->name, OHCI1394_DRIVER_NAME))
 		return;
 
-	ohci = (struct ti_ohci *)host->hostdata;
+//	ohci = (struct ti_ohci *)host->hostdata;
 
 	if (!hpsb_create_hostinfo(&firesat_highlevel, host, 0)) {
 		printk(KERN_ERR "Cannot allocate hostinfo\n");
@@ -223,11 +229,13 @@ static void firesat_add_host (struct hps
 	hpsb_set_hostinfo_key(&firesat_highlevel, host, ohci->host->id);
 }
 
-static void firesat_remove_host (struct hpsb_host *host) {
+static void firesat_remove_host (struct hpsb_host *host)
+{
 //    printk(KERN_INFO "FireSAT remove_host (nodeid = 0x%x)\n",host->node_id);
 }
 
-static void firesat_host_reset(struct hpsb_host *host) {
+static void firesat_host_reset(struct hpsb_host *host)
+{
     printk(KERN_INFO "FireSAT host_reset (nodeid = 0x%x, hosts active = %d)\n",host->node_id,host->nodes_active);
 }
 
@@ -281,16 +289,21 @@ struct MPEG2Header {
     };
 };
 
-static void iso_receive(struct hpsb_host *host, int channel, quadlet_t *data,
-			size_t length) {
+#if 0
+static void iso_receive(struct hpsb_host *host,
+			int channel,
+			quadlet_t *data,
+			size_t length)
+{
+	struct firesat *firesat = NULL;
+	struct firesat *firesat_entry;
+	unsigned long flags;
+
 //    printk(KERN_INFO "FireSAT iso_receive: channel %d, length = %d\n", channel, length);
 
-	if(length <= 12)
+	if (length <= 12)
 		return; // ignore empty packets
 	else {
-		struct firesat *firesat=NULL;
-		struct firesat *firesat_entry;
-		unsigned long flags;
 
 		spin_lock_irqsave(&firesat_list_lock, flags);
 		list_for_each_entry(firesat_entry,&firesat_list,list) {
@@ -301,26 +314,31 @@ static void iso_receive(struct hpsb_host
 		}
 		spin_unlock_irqrestore(&firesat_list_lock, flags);
 
-		if(firesat) {
-			char *buf=((char*)data) + sizeof(struct firewireheader)+sizeof(struct CIPHeader);
+		if (firesat) {
+			char *buf= ((char*)data) + sizeof(struct firewireheader)+sizeof(struct CIPHeader);
 			int count = (length-sizeof(struct CIPHeader)) / 192;
 
 //			printk(KERN_INFO "%s: length = %u\n data[0] = %08x\n data[1] = %08x\n data[2] = %08x\n data[3] = %08x\n data[4] = %08x\n",__func__, length, data[0],data[1],data[2],data[3],data[4]);
 
 			while (count--) {
 
-				if(buf[sizeof(quadlet_t) /*timestamp*/] == 0x47)
+				if (buf[sizeof(quadlet_t) /*timestamp*/] == 0x47)
 					dvb_dmx_swfilter_packets(&firesat->demux, &buf[sizeof(quadlet_t)], 1);
 				else
 					printk("%s: invalid packet, skipping\n", __func__);
-				buf += 188 + sizeof(quadlet_t) /* timestamp */;
+				buf += 188 + sizeof (quadlet_t) /* timestamp */;
 			}
 		}
 	}
 }
+#endif
 
-static void fcp_request(struct hpsb_host *host, int nodeid, int direction,
-			int cts, u8 *data, size_t length)
+static void fcp_request(struct hpsb_host *host,
+			int nodeid,
+			int direction,
+			int cts,
+			u8 *data,
+			size_t length)
 {
 //	printk(KERN_INFO "FireSAT fcp_request length=%d\n",length);
 	if (length > 0 && ((data[0] & 0xF0) >> 4) == 0) {
@@ -418,11 +436,13 @@ static int firesat_set_voltage(struct dv
 	return 0;
 }
 
-static int firesat_enable_high_lnb_voltage (struct dvb_frontend* fe, long arg) {
+static int firesat_enable_high_lnb_voltage (struct dvb_frontend* fe, long arg)
+{
 	return -EOPNOTSUPP;
 }
 
-static int firesat_read_status (struct dvb_frontend* fe, fe_status_t* status) {
+static int firesat_read_status (struct dvb_frontend* fe, fe_status_t* status)
+{
 	struct firesat *firesat=fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
 //			printk(KERN_INFO "%s: FE_READ_STATUS\n", __func__);
@@ -438,7 +458,8 @@ static int firesat_read_status (struct d
 	return 0;
 }
 
-static int firesat_read_ber (struct dvb_frontend* fe, u32* ber) {
+static int firesat_read_ber (struct dvb_frontend* fe, u32* ber)
+{
 	struct firesat *firesat=fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
 //			printk(KERN_INFO "%s: FE_READ_BER\n", __func__);
@@ -452,7 +473,8 @@ static int firesat_read_ber (struct dvb_
 	return 0;
 }
 
-static int firesat_read_signal_strength (struct dvb_frontend* fe, u16* strength) {
+static int firesat_read_signal_strength (struct dvb_frontend* fe, u16* strength)
+{
 	struct firesat *firesat=fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
 	u16 *signal = strength;
@@ -466,15 +488,19 @@ static int firesat_read_signal_strength 
 	return 0;
 }
 
-static int firesat_read_snr(struct dvb_frontend* fe, u16* snr) {
+static int firesat_read_snr(struct dvb_frontend* fe, u16* snr)
+{
 	return -EOPNOTSUPP;
 }
 
-static int firesat_read_uncorrected_blocks(struct dvb_frontend* fe, u32* ucblocks) {
+static int firesat_read_uncorrected_blocks(struct dvb_frontend* fe, u32* ucblocks)
+{
 	return -EOPNOTSUPP;
 }
 
-static int firesat_set_frontend(struct dvb_frontend* fe, struct dvb_frontend_parameters* params) {
+static int firesat_set_frontend(struct dvb_frontend* fe,
+				struct dvb_frontend_parameters* params)
+{
 	struct firesat *firesat=fe->sec_priv;
 
 //	printk(KERN_INFO "%s: FE_SET_FRONTEND\n", __func__);
@@ -489,7 +515,9 @@ static int firesat_set_frontend(struct d
 	else return 0; //not sure of this...
 }
 
-static int firesat_get_frontend(struct dvb_frontend* fe, struct dvb_frontend_parameters* params) {
+static int firesat_get_frontend(struct dvb_frontend* fe,
+				struct dvb_frontend_parameters* params)
+{
 	return -EOPNOTSUPP;
 }
 
@@ -497,7 +525,8 @@ static int firesat_get_frontend(struct d
  *  End of dvb_frontend_ops functions *
  * ************************************/
 
-static struct firesat_channel *firesat_channel_allocate(struct firesat *firesat) {
+static struct firesat_channel *firesat_channel_allocate(struct firesat *firesat)
+{
 	int k;
 
 	printk(KERN_INFO "%s\n", __func__);
@@ -518,7 +547,8 @@ static struct firesat_channel *firesat_c
 	return NULL; // no more channels available
 }
 
-static int firesat_channel_collect(struct firesat *firesat, int *pidc, u16 pid[]) {
+static int firesat_channel_collect(struct firesat *firesat, int *pidc, u16 pid[])
+{
 	int k, l=0;
 
 	if(down_interruptible(&firesat->demux_sem))
@@ -535,7 +565,9 @@ static int firesat_channel_collect(struc
 	return 0;
 }
 
-static int firesat_channel_release(struct firesat *firesat, struct firesat_channel *channel) {
+static int firesat_channel_release(struct firesat *firesat,
+				   struct firesat_channel *channel)
+{
 	if(down_interruptible(&firesat->demux_sem))
 		return -EINTR;
 
@@ -545,7 +577,8 @@ static int firesat_channel_release(struc
 	return 0;
 }
 
-static int firesat_start_feed(struct dvb_demux_feed *dvbdmxfeed) {
+static int firesat_start_feed(struct dvb_demux_feed *dvbdmxfeed)
+{
 	struct firesat *firesat=(struct firesat*)dvbdmxfeed->demux->priv;
 	struct firesat_channel *channel;
 	int pidc,k;
@@ -605,7 +638,8 @@ static int firesat_start_feed(struct dvb
 	return 0;
 }
 
-static int firesat_stop_feed(struct dvb_demux_feed *dvbdmxfeed) {
+static int firesat_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
+{
 	struct dvb_demux *demux = dvbdmxfeed->demux;
 	struct firesat *firesat=(struct firesat*)demux->priv;
 	int k, l=0;
@@ -648,12 +682,13 @@ static int firesat_stop_feed(struct dvb_
 	return 0;
 }
 
-static int firesat_probe(struct device *dev) {
-    struct unit_directory *ud=container_of(dev, struct unit_directory, device);
-    struct firesat *firesat;
-    struct dvb_frontend *fe;
-    unsigned long flags;
-    int result;
+static int firesat_probe(struct device *dev)
+{
+	struct unit_directory *ud=container_of(dev, struct unit_directory, device);
+	struct firesat *firesat;
+	struct dvb_frontend *fe;
+	unsigned long flags;
+	int result;
 	unsigned char subunitcount=0xff,subunit;
 	struct firesat **firesats=kmalloc(sizeof(void*)*2,GFP_KERNEL);
 
@@ -670,14 +705,17 @@ static int firesat_probe(struct device *
 
 	ud->device.driver_data = firesats;
 
-    for(subunit=0;subunit<subunitcount;subunit++) {
-		if (!(firesat = kmalloc(sizeof(struct firesat), GFP_KERNEL)) || !(fe = kmalloc(sizeof(struct dvb_frontend), GFP_KERNEL))) {
+	for (subunit = 0; subunit < subunitcount; subunit++) {
+
+		if (!(firesat = kmalloc(sizeof (struct firesat), GFP_KERNEL)) ||
+		    !(fe = kmalloc(sizeof (struct dvb_frontend), GFP_KERNEL))) {
+
 			printk("%s: couldn't allocate memory.\n", __func__);
 			kfree(firesats);
 			return -ENOMEM;
 		}
 
-		memset(firesat, 0, sizeof(struct firesat));
+		memset(firesat, 0, sizeof (struct firesat));
 		firesat->host=ud->ne->host;
 		firesat->guid=ud->ne->guid;
 		firesat->guid_vendor_id=ud->ne->guid_vendor_id;
@@ -685,7 +723,7 @@ static int firesat_probe(struct device *
 		firesat->isochannel=-1;
 		firesat->tone = 0xff;
 		firesat->voltage = 0xff;
-		if(!(firesat->respfrm = kmalloc(sizeof(AVCRspFrm), GFP_KERNEL))) {
+		if (!(firesat->respfrm = kmalloc(sizeof (AVCRspFrm), GFP_KERNEL))) {
 			printk("%s: couldn't allocate memory.\n", __func__);
 			kfree(firesat);
 			return -ENOMEM;
@@ -701,9 +739,9 @@ static int firesat_probe(struct device *
 		list_add_tail(&firesat->list, &firesat_list);
 		spin_unlock_irqrestore(&firesat_list_lock, flags);
 
-		if(subunit == 0) {
+		if (subunit == 0) {
 			firesat->subunit = 0x7; // 0x7 = don't care
-			if(AVCSubUnitInfo(firesat, &subunitcount)) {
+			if (AVCSubUnitInfo(firesat, &subunitcount)) {
 				printk("%s: AVC subunit info command failed.\n",__func__);
 				spin_lock_irqsave(&firesat_list_lock, flags);
 				list_del(&firesat->list);
@@ -717,7 +755,7 @@ static int firesat_probe(struct device *
 
 		firesat->subunit=subunit;
 
-		if(AVCIdentifySubunit(firesat,NULL,(int*)&firesat->type,&firesat->has_ci)) {
+		if (AVCIdentifySubunit(firesat,NULL,(int*)&firesat->type,&firesat->has_ci)) {
 			printk("%s: cannot identify subunit %d\n", __func__, subunit);
 			spin_lock_irqsave(&firesat_list_lock, flags);
 			list_del(&firesat->list);
@@ -748,7 +786,7 @@ static int firesat_probe(struct device *
 			firesat->frontend_info=NULL;
 		}
 
-		if(!firesat->frontend_info) {
+		if (!firesat->frontend_info) {
 			spin_lock_irqsave(&firesat_list_lock, flags);
 			list_del(&firesat->list);
 			spin_unlock_irqrestore(&firesat_list_lock, flags);
@@ -757,7 +795,7 @@ static int firesat_probe(struct device *
 		}
 
 		//initialising firesat->adapter before calling dvb_register_adapter
-		if(!(firesat->adapter = kmalloc(sizeof(struct dvb_adapter), GFP_KERNEL))) {
+		if (!(firesat->adapter = kmalloc(sizeof (struct dvb_adapter), GFP_KERNEL))) {
 			printk("%s: couldn't allocate memory.\n", __func__);
 			kfree(firesat->adapter);
 			kfree(firesat);
@@ -765,7 +803,10 @@ static int firesat_probe(struct device *
 		}
 
 		if ((result = dvb_register_adapter(firesat->adapter,
-										   firesat->model_name, THIS_MODULE, dev)) < 0) {
+						   firesat->model_name,
+						   THIS_MODULE,
+						   dev)) < 0) {
+
 			printk("%s: dvb_register_adapter failed: error %d\n", __func__, result);
 
 			/* ### cleanup */
@@ -861,15 +902,16 @@ static int firesat_probe(struct device *
     return 0;
 }
 
-static int firesat_remove(struct device *dev) {
-    struct unit_directory *ud=container_of(dev, struct unit_directory, device);
-    struct dvb_frontend* fe;
-    struct firesat **firesats=ud->device.driver_data;
+static int firesat_remove(struct device *dev)
+{
+	struct unit_directory *ud=container_of(dev, struct unit_directory, device);
+	struct dvb_frontend* fe;
+	struct firesat **firesats=ud->device.driver_data;
 
-    if(firesats) {
+	if(firesats) {
 		int k;
-		for(k=0;k<2;k++)
-			if(firesats[k]) {
+		for (k = 0; k < 2; k++)
+			if (firesats[k]) {
 				unsigned long flags;
 				if(firesats[k]->has_ci)
 					firesat_ca_release(firesats[k]);
@@ -900,31 +942,33 @@ static int firesat_remove(struct device 
 	} else
 		printk("%s: can't get firesat handle\n", __func__);
 
-    printk(KERN_INFO "FireSAT: Removing device with vendor id 0x%x, model id 0x%x.\n",ud->vendor_id,ud->model_id);
-    return 0;
+	printk(KERN_INFO "FireSAT: Removing device with vendor id 0x%x, model id 0x%x.\n",ud->vendor_id,ud->model_id);
+
+	return 0;
 }
 
-static int firesat_update(struct unit_directory *ud) {
+static int firesat_update(struct unit_directory *ud)
+{
 //  printk(KERN_INFO "FireSAT: Found device with vendor id 0x%x, model id 0x%x\n", ud->vendor_id,ud->model_id);
-    struct firesat **firesats=ud->device.driver_data;
-    int k;
+	struct firesat **firesats=ud->device.driver_data;
+	int k;
     // loop over subunits
 
-	for(k=0;k<2;k++)
-		if(firesats[k]) {
+	for (k = 0; k < 2; k++)
+		if (firesats[k]) {
 			firesats[k]->nodeentry=ud->ne;
 
 			if(firesats[k]->isochannel >= 0)
 				try_CMPEstablishPPconnection(firesats[k], firesats[k]->subunit, firesats[k]->isochannel);
 		}
 
-    return 0;
+	return 0;
 }
 
 static struct hpsb_protocol_driver firesat_driver = {
 	.name		= "FireSAT",
 	.id_table	= firesat_id_table,
-    .update     = firesat_update,
+	.update		= firesat_update,
 	.driver         = {
 		//.name and .bus are filled in for us in more recent linux versions
 		//.name	= "FireSAT",
