From foo@baz Tue Apr  9 12:12:43 2002
Date: Wed, 09 Apr 2008 07:41:21 +0400
From: Manu Abraham <manu@linuxtv.org>
To: Greg KH <greg@kroah.com>
Subject:

More cleanups, removed unnecessary comments, coding style

Cc: Christian Dolzer <c.dolzer@digital-everywhere.com>
Cc: Andreas Monitzer <andy@monitzer.com>
Cc: Fabio De Lorenzo <delorenzo.fabio@gmail.com>
Cc: Robert Berger <robert.berger@reliableembeddedsystems.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/media/dvb/firesat/firesat_1394.c |  116 ++++++++++++++-----------------
 1 file changed, 55 insertions(+), 61 deletions(-)

--- a/drivers/media/dvb/firesat/firesat_1394.c
+++ b/drivers/media/dvb/firesat/firesat_1394.c
@@ -141,8 +141,6 @@ static struct dvb_frontend_ops firesat_o
 	.set_voltage			= firesat_set_voltage,
 };
 
-/* End of dvb_frontend_ops */
-
 static struct dvb_frontend_info firesat_S_frontend_info = {
 
 	.name			= "FireSAT DVB-S Frontend",
@@ -328,11 +326,11 @@ static void fcp_request(struct hpsb_host
 			u8 *data,
 			size_t length)
 {
-//	printk(KERN_INFO "FireSAT fcp_request length=%d\n",length);
-	if (length > 0 && ((data[0] & 0xF0) >> 4) == 0) {
-		struct firesat *firesat = NULL;
-		struct firesat *firesat_entry;
-		unsigned long flags;
+	struct firesat *firesat = NULL;
+	struct firesat *firesat_entry;
+	unsigned long flags;
+
+	if (length > 0 && ((data[0] & 0xf0) >> 4) == 0) {
 
 		spin_lock_irqsave(&firesat_list_lock, flags);
 		list_for_each_entry(firesat_entry,&firesat_list,list) {
@@ -354,10 +352,6 @@ static void fcp_request(struct hpsb_host
 	} // else ignore
 }
 
-/********************************************
- *  Beginning of dvb_frontend_ops functions *
- ********************************************/
-
 static int firesat_dvb_init(struct dvb_frontend *fe)
 {
 	struct firesat *firesat = fe->sec_priv;
@@ -413,65 +407,68 @@ static int firesat_set_voltage(struct dv
 	return 0;
 }
 
-static int firesat_read_status (struct dvb_frontend* fe, fe_status_t* status)
+static int firesat_read_status (struct dvb_frontend *fe, fe_status_t *status)
 {
 	struct firesat *firesat = fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
-//			printk(KERN_INFO "%s: FE_READ_STATUS\n", __func__);
 
-	if(AVCTunerStatus(firesat,&info)) {
+	if (AVCTunerStatus(firesat, &info))
 		return -EINVAL;
-	}
-//			printk(KERN_INFO "%s: NoRF=%c\n",__func__,info.NoRF?'y':'n');
-	if(info.NoRF)
+
+	if (info.NoRF)
 		*status = 0;
 	else
-		*status = *status = FE_HAS_SIGNAL | FE_HAS_VITERBI | FE_HAS_SYNC | FE_HAS_CARRIER | FE_HAS_LOCK;
+		*status = *status = FE_HAS_SIGNAL	|
+				    FE_HAS_VITERBI	|
+				    FE_HAS_SYNC		|
+				    FE_HAS_CARRIER	|
+				    FE_HAS_LOCK;
+
 	return 0;
 }
 
-static int firesat_read_ber (struct dvb_frontend* fe, u32* ber)
+static int firesat_read_ber (struct dvb_frontend *fe, u32 *ber)
 {
 	struct firesat *firesat = fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
-//			printk(KERN_INFO "%s: FE_READ_BER\n", __func__);
 
-	if (AVCTunerStatus(firesat,&info)) {
+	if (AVCTunerStatus(firesat, &info))
 		return -EINVAL;
-	}
 
-//			*ber = *(u32*)info.BER; /* might need some byte ordering correction */
-	*ber = ((info.BER[0] << 24) & 0xFF) | ((info.BER[1] << 16) & 0xFF) | ((info.BER[2] << 8) & 0xFF) | (info.BER[3] & 0xFF);
+	*ber = ((info.BER[0] << 24) & 0xff)	|
+	       ((info.BER[1] << 16) & 0xff)	|
+	       ((info.BER[2] << 8) & 0xff)	|
+		(info.BER[3] & 0xff);
+
 	return 0;
 }
 
-static int firesat_read_signal_strength (struct dvb_frontend* fe, u16* strength)
+static int firesat_read_signal_strength (struct dvb_frontend *fe, u16 *strength)
 {
 	struct firesat *firesat = fe->sec_priv;
 	ANTENNA_INPUT_INFO info;
 	u16 *signal = strength;
-//	printk(KERN_INFO "%s: FE_READ_SIGNAL_STRENGTH\n", __func__);
 
-	if (AVCTunerStatus(firesat,&info)) {
+	if (AVCTunerStatus(firesat, &info))
 		return -EINVAL;
-	}
 
 	*signal = info.SignalStrength;
+
 	return 0;
 }
 
-static int firesat_read_snr(struct dvb_frontend* fe, u16* snr)
+static int firesat_read_snr(struct dvb_frontend *fe, u16 *snr)
 {
 	return -EOPNOTSUPP;
 }
 
-static int firesat_read_uncorrected_blocks(struct dvb_frontend* fe, u32* ucblocks)
+static int firesat_read_uncorrected_blocks(struct dvb_frontend *fe, u32 *ucblocks)
 {
 	return -EOPNOTSUPP;
 }
 
-static int firesat_set_frontend(struct dvb_frontend* fe,
-				struct dvb_frontend_parameters* params)
+static int firesat_set_frontend(struct dvb_frontend *fe,
+				struct dvb_frontend_parameters *params)
 {
 	struct firesat *firesat = fe->sec_priv;
 
@@ -481,16 +478,12 @@ static int firesat_set_frontend(struct d
 		return 0; //not sure of this...
 }
 
-static int firesat_get_frontend(struct dvb_frontend* fe,
-				struct dvb_frontend_parameters* params)
+static int firesat_get_frontend(struct dvb_frontend *fe,
+				struct dvb_frontend_parameters *params)
 {
 	return -EOPNOTSUPP;
 }
 
-/**************************************
- *  End of dvb_frontend_ops functions *
- * ************************************/
-
 static struct firesat_channel *firesat_channel_allocate(struct firesat *firesat)
 {
 	int k;
@@ -572,14 +565,14 @@ static int firesat_start_feed(struct dvb
 			channel = firesat_channel_allocate(firesat);
 			break;
 		default:
-			printk("%s: invalid pes type %u\n",__func__,dvbdmxfeed->pes_type);
+			printk("%s: invalid pes type %u\n",__func__, dvbdmxfeed->pes_type);
 			return -EINVAL;
 		}
 	} else {
 		channel = firesat_channel_allocate(firesat);
 	}
 
-	if(!channel) {
+	if (!channel) {
 		printk("%s: busy!\n", __func__);
 		return -EBUSY;
 	}
@@ -591,12 +584,12 @@ static int firesat_start_feed(struct dvb
 	channel->type = dvbdmxfeed->type;
 	channel->firesat = firesat;
 
-	if(firesat_channel_collect(firesat, &pidc, pids)) {
+	if (firesat_channel_collect(firesat, &pidc, pids)) {
 		firesat_channel_release(firesat, channel);
 		return -EINTR;
 	}
 
-	if((k=AVCTuner_SetPIDs(firesat, pidc, pids))) {
+	if ((k = AVCTuner_SetPIDs(firesat, pidc, pids))) {
 		firesat_channel_release(firesat, channel);
 		printk("%s: AVCTuner failed with error %d\n", __func__, k);
 		return k;
@@ -684,11 +677,11 @@ static int firesat_probe(struct device *
 		}
 
 		memset(firesat, 0, sizeof (struct firesat));
-		firesat->host=ud->ne->host;
-		firesat->guid=ud->ne->guid;
-		firesat->guid_vendor_id=ud->ne->guid_vendor_id;
-		firesat->nodeentry=ud->ne;
-		firesat->isochannel=-1;
+		firesat->host = ud->ne->host;
+		firesat->guid = ud->ne->guid;
+		firesat->guid_vendor_id = ud->ne->guid_vendor_id;
+		firesat->nodeentry = ud->ne;
+		firesat->isochannel = -1;
 		firesat->tone = 0xff;
 		firesat->voltage = 0xff;
 		if (!(firesat->respfrm = kmalloc(sizeof (AVCRspFrm), GFP_KERNEL))) {
@@ -721,9 +714,9 @@ static int firesat_probe(struct device *
 
 		printk(KERN_INFO "%s: subunit count = %d\n", __func__, subunitcount);
 
-		firesat->subunit=subunit;
+		firesat->subunit = subunit;
 
-		if (AVCIdentifySubunit(firesat,NULL,(int*)&firesat->type,&firesat->has_ci)) {
+		if (AVCIdentifySubunit(firesat, NULL, (int*)&firesat->type, &firesat->has_ci)) {
 			printk("%s: cannot identify subunit %d\n", __func__, subunit);
 			spin_lock_irqsave(&firesat_list_lock, flags);
 			list_del(&firesat->list);
@@ -736,22 +729,22 @@ static int firesat_probe(struct device *
 
 		switch(firesat->type) {
 		case FireSAT_DVB_S:
-			firesat->model_name="FireSAT DVB-S";
-			firesat->frontend_info=&firesat_S_frontend_info;
+			firesat->model_name = "FireSAT DVB-S";
+			firesat->frontend_info = &firesat_S_frontend_info;
 			break;
 		case FireSAT_DVB_C:
-			firesat->model_name="FireSAT DVB-C";
-			firesat->frontend_info=&firesat_C_frontend_info;
+			firesat->model_name = "FireSAT DVB-C";
+			firesat->frontend_info = &firesat_C_frontend_info;
 			break;
 		case FireSAT_DVB_T:
-			firesat->model_name="FireSAT DVB-T";
-			firesat->frontend_info=&firesat_T_frontend_info;
+			firesat->model_name = "FireSAT DVB-T";
+			firesat->frontend_info = &firesat_T_frontend_info;
 			break;
 		default:
 			printk("%s: unknown model type 0x%x on subunit %d!\n",
 				__func__, firesat->type,subunit);
-			firesat->model_name="Unknown";
-			firesat->frontend_info=NULL;
+			firesat->model_name = "Unknown";
+			firesat->frontend_info = NULL;
 		}
 
 		if (!firesat->frontend_info) {
@@ -851,13 +844,13 @@ static int firesat_probe(struct device *
 		fe->ops = firesat_ops;
 		fe->dvb = firesat->adapter;
 		fe->sec_priv = firesat; //IMPORTANT, functions depend on this!!!
-		if((result= dvb_register_frontend(firesat->adapter, fe)) < 0) {
+		if ((result= dvb_register_frontend(firesat->adapter, fe)) < 0) {
 			printk("%s: dvb_register_frontend_new failed: error %d\n", __func__, result);
 			/* ### cleanup */
 			return result;
 		}
 
-		if(firesat->has_ci)
+		if (firesat->has_ci)
 			firesat_ca_init(firesat);
 
 		firesats[subunit] = firesat;
@@ -883,6 +876,7 @@ static int firesat_remove(struct device 
 			if (firesats[k]) {
 				if (firesats[k]->has_ci)
 					firesat_ca_release(firesats[k]);
+
 				if (!(fe = kmalloc(sizeof (struct dvb_frontend), GFP_KERNEL))) {
 					fe->ops = firesat_ops;
 					fe->dvb = firesats[k]->adapter;
@@ -923,9 +917,9 @@ static int firesat_update(struct unit_di
 
 	for (k = 0; k < 2; k++)
 		if (firesats[k]) {
-			firesats[k]->nodeentry=ud->ne;
+			firesats[k]->nodeentry = ud->ne;
 
-			if(firesats[k]->isochannel >= 0)
+			if (firesats[k]->isochannel >= 0)
 				try_CMPEstablishPPconnection(firesats[k], firesats[k]->subunit, firesats[k]->isochannel);
 		}
 
