From alan@linux.intel.com  Mon Oct 26 14:47:14 2009
From: Alan Cox <alan@linux.intel.com>
Date: Tue, 06 Oct 2009 15:46:24 +0100
Subject: Staging: et131x: kill SUCCESS and FAILURE defines
To: greg@kroah.com
Message-ID: <20091006144619.8604.74924.stgit@localhost.localdomain>


Signed-off-by: Alan Cox <alan@linux.intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/et131x/et1310_eeprom.c |   20 ++++++++++----------
 drivers/staging/et131x/et1310_eeprom.h |    9 ++-------
 drivers/staging/et131x/et1310_phy.h    |    3 ---
 3 files changed, 12 insertions(+), 20 deletions(-)

--- a/drivers/staging/et131x/et1310_eeprom.c
+++ b/drivers/staging/et131x/et1310_eeprom.c
@@ -146,7 +146,7 @@
  * @addr: the address to write
  * @data: the value to write
  *
- * Returns SUCCESS or FAILURE
+ * Returns 1 for a successful write.
  */
 int EepromWriteByte(struct et131x_adapter *etdev, u32 addr, u8 data)
 {
@@ -227,7 +227,7 @@ int EepromWriteByte(struct et131x_adapte
 	}
 
 	if (err || (index >= MAX_NUM_REGISTER_POLLS))
-		return FAILURE;
+		return 0;
 
 	/* Step 2: */
 	control = 0;
@@ -235,7 +235,7 @@ int EepromWriteByte(struct et131x_adapte
 
 	if (pci_write_config_byte(pdev, LBCIF_CONTROL_REGISTER_OFFSET,
 				  control)) {
-		return FAILURE;
+		return 0;
 	}
 
 	i2c_wack = 1;
@@ -334,7 +334,7 @@ int EepromWriteByte(struct et131x_adapte
 		index++;
 	}
 
-	return writeok ? SUCCESS : FAILURE;
+	return writeok;
 }
 
 /**
@@ -345,7 +345,7 @@ int EepromWriteByte(struct et131x_adapte
  * @eeprom_id: the ID of the EEPROM
  * @addrmode: how the EEPROM is to be accessed
  *
- * Returns SUCCESS or FAILURE
+ * Returns 1 for a successful read
  */
 int EepromReadByte(struct et131x_adapter *etdev, u32 addr, u8 *pdata)
 {
@@ -409,7 +409,7 @@ int EepromReadByte(struct et131x_adapter
 	}
 
 	if (err || (index >= MAX_NUM_REGISTER_POLLS))
-		return FAILURE;
+		return 0;
 
 	/* Step 2: */
 	control = 0;
@@ -417,14 +417,14 @@ int EepromReadByte(struct et131x_adapter
 
 	if (pci_write_config_byte(pdev, LBCIF_CONTROL_REGISTER_OFFSET,
 				  control)) {
-		return FAILURE;
+		return 0;
 	}
 
 	/* Step 3: */
 
 	if (pci_write_config_dword(pdev, LBCIF_ADDRESS_REGISTER_OFFSET,
 				   addr)) {
-		return FAILURE;
+		return 0;
 	}
 
 	/* Step 4: */
@@ -446,10 +446,10 @@ int EepromReadByte(struct et131x_adapter
 	}
 
 	if (err || (index >= MAX_NUM_REGISTER_POLLS))
-		return FAILURE;
+		return 0;
 
 	/* Step 6: */
 	*pdata = EXTRACT_DATA_REGISTER(dword1);
 
-	return (status & LBCIF_STATUS_ACK_ERROR) ? FAILURE : SUCCESS;
+	return (status & LBCIF_STATUS_ACK_ERROR) ? 0 : 1;
 }
--- a/drivers/staging/et131x/et1310_eeprom.h
+++ b/drivers/staging/et131x/et1310_eeprom.h
@@ -61,17 +61,12 @@
 
 #include "et1310_address_map.h"
 
-#ifndef SUCCESS
-#define SUCCESS		0
-#define FAILURE		1
-#endif
-
 /* Forward declaration of the private adapter structure */
 struct et131x_adapter;
 
-int32_t EepromWriteByte(struct et131x_adapter *adapter, u32 unAddress,
+int EepromWriteByte(struct et131x_adapter *adapter, u32 unAddress,
 			u8 bData);
-int32_t EepromReadByte(struct et131x_adapter *adapter, u32 unAddress,
+int EepromReadByte(struct et131x_adapter *adapter, u32 unAddress,
 			u8 *pbData);
 
 #endif /* _ET1310_EEPROM_H_ */
--- a/drivers/staging/et131x/et1310_phy.h
+++ b/drivers/staging/et131x/et1310_phy.h
@@ -61,9 +61,6 @@
 
 #include "et1310_address_map.h"
 
-#define TRUEPHY_SUCCESS 0
-#define TRUEPHY_FAILURE 1
-
 /* MI Register Addresses */
 #define MI_CONTROL_REG                      0
 #define MI_STATUS_REG                       1
