From wfp5p@virginia.edu Mon Mar 16 17:19:45 2009
From: Bill Pemberton <wfp5p@virginia.edu>
Date: Mon, 16 Mar 2009 22:04:56 -0400
Subject: Staging: comedi: Remove comedi_t typedef
To: greg@kroah.com
Message-ID: <20090317020456.14467.31221.stgit@viridian.itc.Virginia.EDU>


Signed-off-by: Bill Pemberton <wfp5p@virginia.edu>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---

 drivers/staging/comedi/comedilib.h                  |   88 +++++++++-----------
 drivers/staging/comedi/drivers/comedi_bond.c        |    6 -
 drivers/staging/comedi/kcomedilib/data.c            |    8 -
 drivers/staging/comedi/kcomedilib/dio.c             |    8 -
 drivers/staging/comedi/kcomedilib/get.c             |   40 ++++-----
 drivers/staging/comedi/kcomedilib/kcomedilib_main.c |   32 +++----
 6 files changed, 90 insertions(+), 92 deletions(-)

--- a/drivers/staging/comedi/comedilib.h
+++ b/drivers/staging/comedi/comedilib.h
@@ -36,18 +36,16 @@
 
 #ifndef KCOMEDILIB_DEPRECATED
 
-typedef void comedi_t;
-
 /* these functions may not be called at real-time priority */
 
-comedi_t *comedi_open(const char *path);
-int comedi_close(comedi_t *dev);
+void *comedi_open(const char *path);
+int comedi_close(void *dev);
 
 /* these functions may be called at any priority, but may fail at
    real-time priority */
 
-int comedi_lock(comedi_t *dev, unsigned int subdev);
-int comedi_unlock(comedi_t *dev, unsigned int subdev);
+int comedi_lock(void *dev, unsigned int subdev);
+int comedi_unlock(void *dev, unsigned int subdev);
 
 /* these functions may be called at any priority, but you must hold
    the lock for the subdevice */
@@ -56,68 +54,68 @@ int comedi_loglevel(int loglevel);
 void comedi_perror(const char *s);
 char *comedi_strerror(int errnum);
 int comedi_errno(void);
-int comedi_fileno(comedi_t *dev);
+int comedi_fileno(void *dev);
 
-int comedi_cancel(comedi_t *dev, unsigned int subdev);
-int comedi_register_callback(comedi_t *dev, unsigned int subdev,
+int comedi_cancel(void *dev, unsigned int subdev);
+int comedi_register_callback(void *dev, unsigned int subdev,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg);
 
-int comedi_command(comedi_t *dev, comedi_cmd *cmd);
-int comedi_command_test(comedi_t *dev, comedi_cmd *cmd);
-int comedi_trigger(comedi_t *dev, unsigned int subdev, comedi_trig *it);
-int __comedi_trigger(comedi_t *dev, unsigned int subdev, comedi_trig *it);
-int comedi_data_write(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_command(void *dev, comedi_cmd *cmd);
+int comedi_command_test(void *dev, comedi_cmd *cmd);
+int comedi_trigger(void *dev, unsigned int subdev, comedi_trig *it);
+int __comedi_trigger(void *dev, unsigned int subdev, comedi_trig *it);
+int comedi_data_write(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int range, unsigned int aref, lsampl_t data);
-int comedi_data_read(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_data_read(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int range, unsigned int aref, lsampl_t *data);
-int comedi_data_read_hint(comedi_t *dev, unsigned int subdev,
+int comedi_data_read_hint(void *dev, unsigned int subdev,
 	unsigned int chan, unsigned int range, unsigned int aref);
-int comedi_data_read_delayed(comedi_t *dev, unsigned int subdev,
+int comedi_data_read_delayed(void *dev, unsigned int subdev,
 	unsigned int chan, unsigned int range, unsigned int aref,
 	lsampl_t *data, unsigned int nano_sec);
-int comedi_dio_config(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_config(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int io);
-int comedi_dio_read(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_read(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int *val);
-int comedi_dio_write(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_write(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int val);
-int comedi_dio_bitfield(comedi_t *dev, unsigned int subdev, unsigned int mask,
+int comedi_dio_bitfield(void *dev, unsigned int subdev, unsigned int mask,
 	unsigned int *bits);
-int comedi_get_n_subdevices(comedi_t *dev);
-int comedi_get_version_code(comedi_t *dev);
-const char *comedi_get_driver_name(comedi_t *dev);
-const char *comedi_get_board_name(comedi_t *dev);
-int comedi_get_subdevice_type(comedi_t *dev, unsigned int subdevice);
-int comedi_find_subdevice_by_type(comedi_t *dev, int type, unsigned int subd);
-int comedi_get_n_channels(comedi_t *dev, unsigned int subdevice);
-lsampl_t comedi_get_maxdata(comedi_t *dev, unsigned int subdevice, unsigned
+int comedi_get_n_subdevices(void *dev);
+int comedi_get_version_code(void *dev);
+const char *comedi_get_driver_name(void *dev);
+const char *comedi_get_board_name(void *dev);
+int comedi_get_subdevice_type(void *dev, unsigned int subdevice);
+int comedi_find_subdevice_by_type(void *dev, int type, unsigned int subd);
+int comedi_get_n_channels(void *dev, unsigned int subdevice);
+lsampl_t comedi_get_maxdata(void *dev, unsigned int subdevice, unsigned
 	int chan);
-int comedi_get_n_ranges(comedi_t *dev, unsigned int subdevice, unsigned int
+int comedi_get_n_ranges(void *dev, unsigned int subdevice, unsigned int
 	chan);
-int comedi_do_insn(comedi_t *dev, comedi_insn *insn);
-int comedi_poll(comedi_t *dev, unsigned int subdev);
+int comedi_do_insn(void *dev, comedi_insn *insn);
+int comedi_poll(void *dev, unsigned int subdev);
 
 /* DEPRECATED functions */
-int comedi_get_rangetype(comedi_t *dev, unsigned int subdevice,
+int comedi_get_rangetype(void *dev, unsigned int subdevice,
 	unsigned int chan);
 
 /* ALPHA functions */
-unsigned int comedi_get_subdevice_flags(comedi_t *dev, unsigned int subdevice);
-int comedi_get_len_chanlist(comedi_t *dev, unsigned int subdevice);
-int comedi_get_krange(comedi_t *dev, unsigned int subdevice, unsigned int
+unsigned int comedi_get_subdevice_flags(void *dev, unsigned int subdevice);
+int comedi_get_len_chanlist(void *dev, unsigned int subdevice);
+int comedi_get_krange(void *dev, unsigned int subdevice, unsigned int
 	chan, unsigned int range, comedi_krange *krange);
-unsigned int comedi_get_buf_head_pos(comedi_t *dev, unsigned int subdevice);
-int comedi_set_user_int_count(comedi_t *dev, unsigned int subdevice,
+unsigned int comedi_get_buf_head_pos(void *dev, unsigned int subdevice);
+int comedi_set_user_int_count(void *dev, unsigned int subdevice,
 	unsigned int buf_user_count);
-int comedi_map(comedi_t *dev, unsigned int subdev, void *ptr);
-int comedi_unmap(comedi_t *dev, unsigned int subdev);
-int comedi_get_buffer_size(comedi_t *dev, unsigned int subdev);
-int comedi_mark_buffer_read(comedi_t *dev, unsigned int subdevice,
+int comedi_map(void *dev, unsigned int subdev, void *ptr);
+int comedi_unmap(void *dev, unsigned int subdev);
+int comedi_get_buffer_size(void *dev, unsigned int subdev);
+int comedi_mark_buffer_read(void *dev, unsigned int subdevice,
 	unsigned int num_bytes);
-int comedi_mark_buffer_written(comedi_t *d, unsigned int subdevice,
+int comedi_mark_buffer_written(void *d, unsigned int subdevice,
 	unsigned int num_bytes);
-int comedi_get_buffer_contents(comedi_t *dev, unsigned int subdevice);
-int comedi_get_buffer_offset(comedi_t *dev, unsigned int subdevice);
+int comedi_get_buffer_contents(void *dev, unsigned int subdevice);
+int comedi_get_buffer_offset(void *dev, unsigned int subdevice);
 
 #else
 
--- a/drivers/staging/comedi/drivers/comedi_bond.c
+++ b/drivers/staging/comedi/drivers/comedi_bond.c
@@ -142,7 +142,7 @@ static const struct BondingBoard bonding
 #define thisboard ((const struct BondingBoard *)dev->board_ptr)
 
 struct BondedDevice {
-	comedi_t *dev;
+	void *dev;
 	unsigned minor;
 	unsigned subdev;
 	unsigned subdev_type;
@@ -397,7 +397,7 @@ static void *Realloc(const void *oldmem,
 static int doDevConfig(comedi_device *dev, comedi_devconfig *it)
 {
 	int i;
-	comedi_t *devs_opened[COMEDI_NUM_BOARD_MINORS];
+	void *devs_opened[COMEDI_NUM_BOARD_MINORS];
 
 	memset(devs_opened, 0, sizeof(devs_opened));
 	devpriv->name[0] = 0;;
@@ -406,7 +406,7 @@ static int doDevConfig(comedi_device *de
 	for (i = 0; i < COMEDI_NDEVCONFOPTS && (!i || it->options[i]); ++i) {
 		char file[] = "/dev/comediXXXXXX";
 		int minor = it->options[i];
-		comedi_t *d;
+		void *d;
 		int sdev = -1, nchans, tmp;
 		struct BondedDevice *bdev = NULL;
 
--- a/drivers/staging/comedi/kcomedilib/data.c
+++ b/drivers/staging/comedi/kcomedilib/data.c
@@ -27,7 +27,7 @@
 
 #include <linux/string.h>
 
-int comedi_data_write(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_data_write(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int range, unsigned int aref, lsampl_t data)
 {
 	comedi_insn insn;
@@ -42,7 +42,7 @@ int comedi_data_write(comedi_t *dev, uns
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_data_read(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_data_read(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int range, unsigned int aref, lsampl_t *data)
 {
 	comedi_insn insn;
@@ -57,7 +57,7 @@ int comedi_data_read(comedi_t *dev, unsi
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_data_read_hint(comedi_t *dev, unsigned int subdev,
+int comedi_data_read_hint(void *dev, unsigned int subdev,
 	unsigned int chan, unsigned int range, unsigned int aref)
 {
 	comedi_insn insn;
@@ -73,7 +73,7 @@ int comedi_data_read_hint(comedi_t *dev,
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_data_read_delayed(comedi_t *dev, unsigned int subdev,
+int comedi_data_read_delayed(void *dev, unsigned int subdev,
 	unsigned int chan, unsigned int range, unsigned int aref,
 	lsampl_t *data, unsigned int nano_sec)
 {
--- a/drivers/staging/comedi/kcomedilib/dio.c
+++ b/drivers/staging/comedi/kcomedilib/dio.c
@@ -26,7 +26,7 @@
 
 #include <linux/string.h>
 
-int comedi_dio_config(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_config(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int io)
 {
 	comedi_insn insn;
@@ -41,7 +41,7 @@ int comedi_dio_config(comedi_t *dev, uns
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_dio_read(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_read(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int *val)
 {
 	comedi_insn insn;
@@ -56,7 +56,7 @@ int comedi_dio_read(comedi_t *dev, unsig
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_dio_write(comedi_t *dev, unsigned int subdev, unsigned int chan,
+int comedi_dio_write(void *dev, unsigned int subdev, unsigned int chan,
 	unsigned int val)
 {
 	comedi_insn insn;
@@ -71,7 +71,7 @@ int comedi_dio_write(comedi_t *dev, unsi
 	return comedi_do_insn(dev, &insn);
 }
 
-int comedi_dio_bitfield(comedi_t *dev, unsigned int subdev, unsigned int mask,
+int comedi_dio_bitfield(void *dev, unsigned int subdev, unsigned int mask,
 	unsigned int *bits)
 {
 	comedi_insn insn;
--- a/drivers/staging/comedi/kcomedilib/get.c
+++ b/drivers/staging/comedi/kcomedilib/get.c
@@ -26,33 +26,33 @@
 #include "../comedilib.h"
 #include "../comedidev.h"
 
-int comedi_get_n_subdevices(comedi_t *d)
+int comedi_get_n_subdevices(void *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
 	return dev->n_subdevices;
 }
 
-int comedi_get_version_code(comedi_t *d)
+int comedi_get_version_code(void *d)
 {
 	return COMEDI_VERSION_CODE;
 }
 
-const char *comedi_get_driver_name(comedi_t * d)
+const char *comedi_get_driver_name(void * d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
 	return dev->driver->driver_name;
 }
 
-const char *comedi_get_board_name(comedi_t * d)
+const char *comedi_get_board_name(void * d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
 	return dev->board_name;
 }
 
-int comedi_get_subdevice_type(comedi_t *d, unsigned int subdevice)
+int comedi_get_subdevice_type(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -60,7 +60,7 @@ int comedi_get_subdevice_type(comedi_t *
 	return s->type;
 }
 
-unsigned int comedi_get_subdevice_flags(comedi_t *d, unsigned int subdevice)
+unsigned int comedi_get_subdevice_flags(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -68,7 +68,7 @@ unsigned int comedi_get_subdevice_flags(
 	return s->subdev_flags;
 }
 
-int comedi_find_subdevice_by_type(comedi_t *d, int type, unsigned int subd)
+int comedi_find_subdevice_by_type(void *d, int type, unsigned int subd)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -82,7 +82,7 @@ int comedi_find_subdevice_by_type(comedi
 	return -1;
 }
 
-int comedi_get_n_channels(comedi_t *d, unsigned int subdevice)
+int comedi_get_n_channels(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -90,7 +90,7 @@ int comedi_get_n_channels(comedi_t *d, u
 	return s->n_chan;
 }
 
-int comedi_get_len_chanlist(comedi_t *d, unsigned int subdevice)
+int comedi_get_len_chanlist(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -98,7 +98,7 @@ int comedi_get_len_chanlist(comedi_t *d,
 	return s->len_chanlist;
 }
 
-lsampl_t comedi_get_maxdata(comedi_t *d, unsigned int subdevice,
+lsampl_t comedi_get_maxdata(void *d, unsigned int subdevice,
 	unsigned int chan)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -111,7 +111,7 @@ lsampl_t comedi_get_maxdata(comedi_t *d,
 }
 
 #ifdef KCOMEDILIB_DEPRECATED
-int comedi_get_rangetype(comedi_t *d, unsigned int subdevice,
+int comedi_get_rangetype(void *d, unsigned int subdevice,
 	unsigned int chan)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -130,7 +130,7 @@ int comedi_get_rangetype(comedi_t *d, un
 }
 #endif
 
-int comedi_get_n_ranges(comedi_t *d, unsigned int subdevice, unsigned int chan)
+int comedi_get_n_ranges(void *d, unsigned int subdevice, unsigned int chan)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -148,7 +148,7 @@ int comedi_get_n_ranges(comedi_t *d, uns
 /*
  * ALPHA (non-portable)
 */
-int comedi_get_krange(comedi_t *d, unsigned int subdevice, unsigned int chan,
+int comedi_get_krange(void *d, unsigned int subdevice, unsigned int chan,
 	unsigned int range, comedi_krange *krange)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -171,7 +171,7 @@ int comedi_get_krange(comedi_t *d, unsig
 /*
  * ALPHA (may be renamed)
 */
-unsigned int comedi_get_buf_head_pos(comedi_t *d, unsigned int subdevice)
+unsigned int comedi_get_buf_head_pos(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -184,7 +184,7 @@ unsigned int comedi_get_buf_head_pos(com
 	return async->buf_write_count;
 }
 
-int comedi_get_buffer_contents(comedi_t *d, unsigned int subdevice)
+int comedi_get_buffer_contents(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
@@ -203,7 +203,7 @@ int comedi_get_buffer_contents(comedi_t 
 /*
  * ALPHA
 */
-int comedi_set_user_int_count(comedi_t *d, unsigned int subdevice,
+int comedi_set_user_int_count(void *d, unsigned int subdevice,
 	unsigned int buf_user_count)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -224,7 +224,7 @@ int comedi_set_user_int_count(comedi_t *
 	return 0;
 }
 
-int comedi_mark_buffer_read(comedi_t *d, unsigned int subdevice,
+int comedi_mark_buffer_read(void *d, unsigned int subdevice,
 	unsigned int num_bytes)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -243,7 +243,7 @@ int comedi_mark_buffer_read(comedi_t *d,
 	return 0;
 }
 
-int comedi_mark_buffer_written(comedi_t *d, unsigned int subdevice,
+int comedi_mark_buffer_written(void *d, unsigned int subdevice,
 	unsigned int num_bytes)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -263,7 +263,7 @@ int comedi_mark_buffer_written(comedi_t 
 	return 0;
 }
 
-int comedi_get_buffer_size(comedi_t *d, unsigned int subdev)
+int comedi_get_buffer_size(void *d, unsigned int subdev)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdev;
@@ -278,7 +278,7 @@ int comedi_get_buffer_size(comedi_t *d, 
 	return async->prealloc_bufsz;
 }
 
-int comedi_get_buffer_offset(comedi_t *d, unsigned int subdevice)
+int comedi_get_buffer_offset(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices + subdevice;
--- a/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
+++ b/drivers/staging/comedi/kcomedilib/kcomedilib_main.c
@@ -42,7 +42,7 @@ MODULE_AUTHOR("David Schleef <ds@schleef
 MODULE_DESCRIPTION("Comedi kernel library");
 MODULE_LICENSE("GPL");
 
-comedi_t *comedi_open(const char *filename)
+void *comedi_open(const char *filename)
 {
 	struct comedi_device_file_info *dev_file_info;
 	comedi_device *dev;
@@ -67,10 +67,10 @@ comedi_t *comedi_open(const char *filena
 	if (!try_module_get(dev->driver->module))
 		return NULL;
 
-	return (comedi_t *) dev;
+	return (void *) dev;
 }
 
-comedi_t *comedi_open_old(unsigned int minor)
+void *comedi_open_old(unsigned int minor)
 {
 	struct comedi_device_file_info *dev_file_info;
 	comedi_device *dev;
@@ -86,10 +86,10 @@ comedi_t *comedi_open_old(unsigned int m
 	if (dev == NULL || !dev->attached)
 		return NULL;
 
-	return (comedi_t *) dev;
+	return (void *) dev;
 }
 
-int comedi_close(comedi_t *d)
+int comedi_close(void *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -113,7 +113,7 @@ char *comedi_strerror(int err)
 	return "unknown error";
 }
 
-int comedi_fileno(comedi_t *d)
+int comedi_fileno(void *d)
 {
 	comedi_device *dev = (comedi_device *) d;
 
@@ -121,7 +121,7 @@ int comedi_fileno(comedi_t *d)
 	return dev->minor;
 }
 
-int comedi_command(comedi_t *d, comedi_cmd *cmd)
+int comedi_command(void *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -161,7 +161,7 @@ int comedi_command(comedi_t *d, comedi_c
 	return s->do_cmd(dev, s);
 }
 
-int comedi_command_test(comedi_t *d, comedi_cmd *cmd)
+int comedi_command_test(void *d, comedi_cmd *cmd)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -183,7 +183,7 @@ int comedi_command_test(comedi_t *d, com
  *	COMEDI_INSN
  *	perform an instruction
  */
-int comedi_do_insn(comedi_t *d, comedi_insn *insn)
+int comedi_do_insn(void *d, comedi_insn *insn)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -324,7 +324,7 @@ int comedi_do_insn(comedi_t *d, comedi_i
 	- lock while subdevice being programmed
 
 */
-int comedi_lock(comedi_t *d, unsigned int subdevice)
+int comedi_lock(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -367,7 +367,7 @@ int comedi_lock(comedi_t *d, unsigned in
 		none
 
 */
-int comedi_unlock(comedi_t *d, unsigned int subdevice)
+int comedi_unlock(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -419,7 +419,7 @@ int comedi_unlock(comedi_t *d, unsigned 
 		nothing
 
 */
-int comedi_cancel(comedi_t *d, unsigned int subdevice)
+int comedi_cancel(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -464,7 +464,7 @@ int comedi_cancel(comedi_t *d, unsigned 
 /*
    registration of callback functions
  */
-int comedi_register_callback(comedi_t *d, unsigned int subdevice,
+int comedi_register_callback(void *d, unsigned int subdevice,
 	unsigned int mask, int (*cb) (unsigned int, void *), void *arg)
 {
 	comedi_device *dev = (comedi_device *) d;
@@ -501,7 +501,7 @@ int comedi_register_callback(comedi_t *d
 	return 0;
 }
 
-int comedi_poll(comedi_t *d, unsigned int subdevice)
+int comedi_poll(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s = dev->subdevices;
@@ -528,7 +528,7 @@ int comedi_poll(comedi_t *d, unsigned in
 }
 
 /* WARNING: not portable */
-int comedi_map(comedi_t *d, unsigned int subdevice, void *ptr)
+int comedi_map(void *d, unsigned int subdevice, void *ptr)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
@@ -550,7 +550,7 @@ int comedi_map(comedi_t *d, unsigned int
 }
 
 /* WARNING: not portable */
-int comedi_unmap(comedi_t *d, unsigned int subdevice)
+int comedi_unmap(void *d, unsigned int subdevice)
 {
 	comedi_device *dev = (comedi_device *) d;
 	comedi_subdevice *s;
