From 3e3a9c12adeb2b6682dbc1f5e02954901ad014b5 Mon Sep 17 00:00:00 2001
From: Greg Kroah-Hartman <gregkh@suse.de>
Date: Wed, 25 Feb 2009 17:16:44 -0800
Subject: Staging: slicoss: remove TRUE/FALSE usage

Don't use TRUE and FALSE, we have proper boolean types in the kernel.

Cc: Lior Dotan <liodot@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/slicoss/slic.h    |   10 +++++-----
 drivers/staging/slicoss/slic_os.h |    3 ---
 drivers/staging/slicoss/slichw.h  |   14 --------------
 drivers/staging/slicoss/slicoss.c |   32 ++++++++++++++++----------------
 4 files changed, 21 insertions(+), 38 deletions(-)

--- a/drivers/staging/slicoss/slic.h
+++ b/drivers/staging/slicoss/slic.h
@@ -585,11 +585,11 @@ struct slic_crash_info {
 
 #define ETHER_EQ_ADDR(_AddrA, _AddrB, _Result)                           \
 {                                                                        \
-    _Result = TRUE;                                                      \
+    _Result = true;                                                      \
     if (*(u32 *)(_AddrA) != *(u32 *)(_AddrB))                          \
-	_Result = FALSE;                                                 \
+	_Result = false;                                                 \
     if (*(u16 *)(&((_AddrA)[4])) != *(u16 *)(&((_AddrB)[4])))        \
-	_Result = FALSE;                                                 \
+	_Result = false;                                                 \
 }
 
 #if defined(CONFIG_X86_64) || defined(CONFIG_IA64)
@@ -602,8 +602,8 @@ struct slic_crash_info {
 #define   SLIC_GET_ADDR_HIGH(_addr)  (u32)0
 #endif
 
-#define FLUSH       TRUE
-#define DONT_FLUSH  FALSE
+#define FLUSH		true
+#define DONT_FLUSH	false
 
 #define SIOCSLICDUMPCARD         (SIOCDEVPRIVATE+9)
 #define SIOCSLICSETINTAGG        (SIOCDEVPRIVATE+10)
--- a/drivers/staging/slicoss/slichw.h
+++ b/drivers/staging/slicoss/slichw.h
@@ -221,20 +221,6 @@
 #define SLIC_HOSTID_DEFAULT   0xFFFF      /* uninitialized hostid */
 #define SLIC_NBR_MACS         4
 
-#ifndef FALSE
-#define FALSE  0
-#else
-#undef  FALSE
-#define FALSE  0
-#endif
-
-#ifndef TRUE
-#define TRUE   1
-#else
-#undef  TRUE
-#define TRUE   1
-#endif
-
 struct slic_rcvbuf {
     unsigned char     pad1[6];
     ushort    pad2;
--- a/drivers/staging/slicoss/slic_os.h
+++ b/drivers/staging/slicoss/slic_os.h
@@ -42,9 +42,6 @@
 #ifndef _SLIC_OS_SPECIFIC_H_
 #define _SLIC_OS_SPECIFIC_H_
 
-#define FALSE               (0)
-#define TRUE                (1)
-
 #define SLIC_SECS_TO_JIFFS(x)  ((x) * HZ)
 #define SLIC_MS_TO_JIFFIES(x)  (SLIC_SECS_TO_JIFFS((x)) / 1000)
 
--- a/drivers/staging/slicoss/slicoss.c
+++ b/drivers/staging/slicoss/slicoss.c
@@ -1626,7 +1626,7 @@ static void slic_mcast_set_list(struct n
 		adapter->devflags_prev = dev->flags;
 		DBG_MSG("%s call slic_config_set adapter->macopts[%x]\n",
 			__func__, adapter->macopts);
-		slic_config_set(adapter, TRUE);
+		slic_config_set(adapter, true);
 	} else {
 		if (status == STATUS_SUCCESS)
 			slic_mcast_set_mask(adapter);
@@ -2561,7 +2561,7 @@ static int slic_card_init(struct sliccar
 			break;
 		}
 
-		card->config.EepromValid = FALSE;
+		card->config.EepromValid = false;
 
 		/*  see if the EEPROM is valid by checking it's checksum */
 		if ((eecodesize <= MAX_EECODE_SIZE) &&
@@ -2580,7 +2580,7 @@ static int slic_card_init(struct sliccar
 			    we wouldn't need this shit
 			*/
 			if (ee_chksum == calc_chksum)
-				card->config.EepromValid = TRUE;
+				card->config.EepromValid = true;
 		}
 		/*  copy in the DRAM size */
 		card->config.DramSize = dramsize;
@@ -3022,15 +3022,15 @@ static bool slic_mac_filter(struct adapt
 	if (opts & MAC_PROMISC) {
 		DBG_MSG("slicoss: %s (%s) PROMISCUOUS. Accept frame\n",
 			__func__, adapter->netdev->name);
-		return TRUE;
+		return true;
 	}
 
 	if ((*dhost4 == 0xFFFFFFFF) && (*dhost2 == 0xFFFF)) {
 		if (opts & MAC_BCAST) {
 			adapter->rcv_broadcasts++;
-			return TRUE;
+			return true;
 		} else {
-			return FALSE;
+			return false;
 		}
 	}
 
@@ -3038,7 +3038,7 @@ static bool slic_mac_filter(struct adapt
 		if (opts & MAC_ALLMCAST) {
 			adapter->rcv_multicasts++;
 			adapter->stats.multicast++;
-			return TRUE;
+			return true;
 		}
 		if (opts & MAC_MCAST) {
 			struct mcast_address *mcaddr = adapter->mcastaddrs;
@@ -3050,20 +3050,20 @@ static bool slic_mac_filter(struct adapt
 				if (equaladdr) {
 					adapter->rcv_multicasts++;
 					adapter->stats.multicast++;
-					return TRUE;
+					return true;
 				}
 				mcaddr = mcaddr->next;
 			}
-			return FALSE;
+			return false;
 		} else {
-			return FALSE;
+			return false;
 		}
 	}
 	if (opts & MAC_DIRECTED) {
 		adapter->rcv_unicasts++;
-		return TRUE;
+		return true;
 	}
-	return FALSE;
+	return false;
 
 }
 
@@ -3091,7 +3091,7 @@ static int slic_mac_set_address(struct n
 		adapter->currmacaddr[3], adapter->currmacaddr[4],
 		adapter->currmacaddr[5]);
 
-	slic_config_set(adapter, TRUE);
+	slic_config_set(adapter, true);
 	return 0;
 }
 
@@ -3600,7 +3600,7 @@ static void slic_link_upr_complete(struc
 	if (adapter->linkstate != LINK_UP) {
 		/* setup the mac */
 		DBG_MSG("%s call slic_config_set\n", __func__);
-		slic_config_set(adapter, TRUE);
+		slic_config_set(adapter, true);
 		adapter->linkstate = LINK_UP;
 		DBG_MSG("\n(%s) Link UP: CALL slic_if_start_queue",
 			adapter->netdev->name);
@@ -4064,7 +4064,7 @@ static void slic_cmdq_addcmdpage(struct 
 
 		cmd->pslic_handle = pslic_handle;
 		cmd->cmd64.hosthandle = pslic_handle->token.handle_token;
-		cmd->busy = FALSE;
+		cmd->busy = false;
 		cmd->paddrl = phys_addrl;
 		cmd->paddrh = phys_addrh;
 		cmd->next_all = prev;
@@ -5096,7 +5096,7 @@ static int slic_dump_thread(void *contex
 						    adapter->upr_lock.flags);
 					}
 
-					slic_dump_card(card, FALSE);
+					slic_dump_card(card, false);
 					dump_complete = 1;
 				}
 
