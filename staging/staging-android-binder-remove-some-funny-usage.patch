From dwalker@fifo99.com  Tue Jun 23 15:06:51 2009
From: Daniel Walker <dwalker@fifo99.com>
Date: Fri, 12 Jun 2009 11:51:13 -0700
Subject: staging: android: binder: Remove some funny && usage
To: Greg Kroah-Hartman <greg@kroah.com>
Cc: Brian Swetland <swetland@google.com>, linux-kernel@vger.kernel.org, Daniel Walker <dwalker@fifo99.com>
Message-ID: <1244832678-30329-1-git-send-email-dwalker@fifo99.com>


This && usage is a bit confusing. I reworked these to be actual
if statements so it's clear what is going on.

Signed-off-by: Daniel Walker <dwalker@fifo99.com>
Cc: Brian Swetland <swetland@google.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/android/binder.c |   14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

--- a/drivers/staging/android/binder.c
+++ b/drivers/staging/android/binder.c
@@ -2146,7 +2146,7 @@ static int binder_thread_read(struct bin
 	void __user *end = buffer + size;
 
 	int ret = 0;
-	int wait_for_proc_work;
+	int wait_for_proc_work = 0;
 
 	if (*consumed == 0) {
 		if (put_user(BR_NOOP, (uint32_t __user *)ptr))
@@ -2155,8 +2155,8 @@ static int binder_thread_read(struct bin
 	}
 
 retry:
-	wait_for_proc_work = thread->transaction_stack == NULL &&
-				list_empty(&thread->todo);
+	if (list_empty(&thread->todo) && thread->transaction_stack == NULL)
+		wait_for_proc_work = 1;
 
 	if (thread->return_error != BR_OK && ptr < end) {
 		if (thread->return_error2 != BR_OK) {
@@ -2539,13 +2539,15 @@ static unsigned int binder_poll(struct f
 {
 	struct binder_proc *proc = filp->private_data;
 	struct binder_thread *thread = NULL;
-	int wait_for_proc_work;
+	int wait_for_proc_work = 0;
 
 	mutex_lock(&binder_lock);
 	thread = binder_get_thread(proc);
 
-	wait_for_proc_work = thread->transaction_stack == NULL &&
-		list_empty(&thread->todo) && thread->return_error == BR_OK;
+	if (list_empty(&thread->todo) && thread->transaction_stack == NULL &&
+	    thread->return_error == BR_OK)
+		wait_for_proc_work = 1;
+
 	mutex_unlock(&binder_lock);
 
 	if (wait_for_proc_work) {
