From jmm@debian.org  Mon Jan 26 09:48:03 2009
From: Moritz Muehlenhoff <jmm@debian.org>
Date: Sun, 25 Jan 2009 21:55:01 +0100
Subject: Staging: wlan-ng: Replace WLAN_LOG_WARNING() with printk()
To: greg@kroah.com
Cc: Moritz Muehlenhoff <jmm@debian.org>
Message-ID: <1232916910-5075-7-git-send-email-jmm@debian.org>


Signed-off-by: Moritz Muehlenhoff <jmm@debian.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/wlan-ng/hfa384x_usb.c  |   32 ++++++++++++++++----------------
 drivers/staging/wlan-ng/p80211conv.c   |    2 +-
 drivers/staging/wlan-ng/p80211netdev.c |    2 +-
 drivers/staging/wlan-ng/prism2mgmt.c   |    2 +-
 drivers/staging/wlan-ng/prism2mib.c    |    2 +-
 drivers/staging/wlan-ng/prism2sta.c    |   18 +++++++++---------
 drivers/staging/wlan-ng/wlan_compat.h  |    2 --
 7 files changed, 29 insertions(+), 31 deletions(-)

--- a/drivers/staging/wlan-ng/hfa384x_usb.c
+++ b/drivers/staging/wlan-ng/hfa384x_usb.c
@@ -427,7 +427,7 @@ submit_rx_urb(hfa384x_t *hw, gfp_t memfl
 
 		/* Check whether we need to reset the RX pipe */
 		if (result == -EPIPE) {
-			WLAN_LOG_WARNING("%s rx pipe stalled: requesting reset\n",
+			printk(KERN_WARNING "%s rx pipe stalled: requesting reset\n",
 			                 hw->wlandev->netdev->name);
 			if ( !test_and_set_bit(WORK_RX_HALT, &hw->usb_flags) )
 				schedule_work(&hw->usb_work);
@@ -476,7 +476,7 @@ submit_tx_urb(hfa384x_t *hw, struct urb 
 
 			/* Test whether we need to reset the TX pipe */
 			if (result == -EPIPE) {
-				WLAN_LOG_WARNING("%s tx pipe stalled: requesting reset\n",
+				printk(KERN_WARNING "%s tx pipe stalled: requesting reset\n",
 				                 netdev->name);
 				set_bit(WORK_TX_HALT, &hw->usb_flags);
 				schedule_work(&hw->usb_work);
@@ -809,7 +809,7 @@ static int usbctlx_rrid_completor_fn(usb
 
 	/* Validate the length, note body len calculation in bytes */
 	if ( rridresult.riddata_len != complete->riddatalen ) {
-		WLAN_LOG_WARNING(
+		printk(KERN_WARNING
 			"RID len mismatch, rid=0x%04x hlen=%d fwlen=%d\n",
 		        rridresult.rid,
 		        complete->riddatalen,
@@ -1499,7 +1499,7 @@ static int hfa384x_usbctlx_complete_sync
 		if (ctlx->state == CTLX_COMPLETE) {
 			result = completor->complete(completor);
 		} else {
-			WLAN_LOG_WARNING("CTLX[%d] error: state(%s)\n",
+			printk(KERN_WARNING "CTLX[%d] error: state(%s)\n",
 			                 hfa384x2host_16(ctlx->outbuf.type),
 			                 ctlxstr(ctlx->state));
 			result = -EIO;
@@ -2255,7 +2255,7 @@ hfa384x_drvr_flashdl_write(
 		hw->bufinfo.page, hw->bufinfo.offset, dlbufaddr);
 
 #if 0
-WLAN_LOG_WARNING("dlbuf@0x%06lx len=%d to=%d\n", dlbufaddr, hw->bufinfo.len, hw->dltimeout);
+printk(KERN_WARNING "dlbuf@0x%06lx len=%d to=%d\n", dlbufaddr, hw->bufinfo.len, hw->dltimeout);
 #endif
 	/* Calculations to determine how many fills of the dlbuffer to do
 	 * and how many USB wmemreq's to do for each fill.  At this point
@@ -2764,7 +2764,7 @@ int hfa384x_drvr_readpda(hfa384x_t *hw, 
 			len);		/* units of bytes */
 
 		if (result) {
-			WLAN_LOG_WARNING(
+			printk(KERN_WARNING
 					  "Read from index %zd failed, continuing\n",
 				i );
 			continue;
@@ -2941,10 +2941,10 @@ int hfa384x_drvr_start(hfa384x_t *hw)
 			WLAN_LOG_DEBUG(0, "but second attempt succeeded. All should be ok\n");
 		}
 	} else if (result2 != 0) {
-		WLAN_LOG_WARNING(
+		printk(KERN_WARNING
 			"First cmd_initialize() succeeded, but second attempt failed (result=%d)\n",
 			result2);
-		WLAN_LOG_WARNING("Most likely the card will be functional\n");
+		printk(KERN_WARNING "Most likely the card will be functional\n");
 			goto done;
 	}
 
@@ -3036,7 +3036,7 @@ int hfa384x_drvr_txframe(hfa384x_t *hw, 
 	char		*ptr;
 
 	if (hw->tx_urb.status == -EINPROGRESS) {
-		WLAN_LOG_WARNING("TX URB already in use\n");
+		printk(KERN_WARNING "TX URB already in use\n");
 		result = 3;
 		goto exit;
 	}
@@ -3423,7 +3423,7 @@ hfa384x_usbctlxq_run(hfa384x_t	*hw)
 			 * this CTLX back in the "pending" queue
 			 * and schedule a reset ...
 			 */
-			WLAN_LOG_WARNING("%s tx pipe stalled: requesting reset\n",
+			printk(KERN_WARNING "%s tx pipe stalled: requesting reset\n",
 			                 hw->wlandev->netdev->name);
 			list_move(&head->list, &hw->ctlxq.pending);
 			set_bit(WORK_TX_HALT, &hw->usb_flags);
@@ -3432,7 +3432,7 @@ hfa384x_usbctlxq_run(hfa384x_t	*hw)
 		}
 
 		if (result == -ESHUTDOWN) {
-			WLAN_LOG_WARNING("%s urb shutdown!\n",
+			printk(KERN_WARNING "%s urb shutdown!\n",
 					 hw->wlandev->netdev->name);
 			break;
 		}
@@ -3508,7 +3508,7 @@ static void hfa384x_usbin_callback(struc
 		break;
 
 	case -EPIPE:
-		WLAN_LOG_WARNING("%s rx pipe stalled: requesting reset\n",
+		printk(KERN_WARNING "%s rx pipe stalled: requesting reset\n",
 		                 wlandev->netdev->name);
 		if ( !test_and_set_bit(WORK_RX_HALT, &hw->usb_flags) )
 			schedule_work(&hw->usb_work);
@@ -3698,7 +3698,7 @@ retry:
 		 * Check that our message is what we're expecting ...
 		 */
 		if (ctlx->outbuf.type != intype) {
-			WLAN_LOG_WARNING("Expected IN[%d], received IN[%d] - ignored.\n",
+			printk(KERN_WARNING "Expected IN[%d], received IN[%d] - ignored.\n",
 			                 hfa384x2host_16(ctlx->outbuf.type),
 			                 hfa384x2host_16(intype));
 			goto unlock;
@@ -3877,7 +3877,7 @@ static void hfa384x_usbin_rx(wlandevice_
 		break;
 
 	default:
-		WLAN_LOG_WARNING("Received frame on unsupported port=%d\n",
+		printk(KERN_WARNING "Received frame on unsupported port=%d\n",
 			HFA384x_RXSTATUS_MACPORT_GET(usbin->rxfrm.desc.status) );
 		goto done;
 		break;
@@ -4057,7 +4057,7 @@ static void hfa384x_usbout_callback(stru
 		case -EPIPE:
 		{
 			hfa384x_t *hw = wlandev->priv;
-			WLAN_LOG_WARNING("%s tx pipe stalled: requesting reset\n",
+			printk(KERN_WARNING "%s tx pipe stalled: requesting reset\n",
 			                 wlandev->netdev->name);
 			if ( !test_and_set_bit(WORK_TX_HALT, &hw->usb_flags) )
 				schedule_work(&hw->usb_work);
@@ -4193,7 +4193,7 @@ retry:
 		/* If the pipe has stalled then we need to reset it */
 		if ( (urb->status == -EPIPE) &&
 		      !test_and_set_bit(WORK_TX_HALT, &hw->usb_flags) ) {
-			WLAN_LOG_WARNING("%s tx pipe stalled: requesting reset\n",
+			printk(KERN_WARNING "%s tx pipe stalled: requesting reset\n",
 			                 hw->wlandev->netdev->name);
 			schedule_work(&hw->usb_work);
 		}
--- a/drivers/staging/wlan-ng/p80211conv.c
+++ b/drivers/staging/wlan-ng/p80211conv.c
@@ -235,7 +235,7 @@ int skb_ether_to_p80211( wlandevice_t *w
 				       skb->len,
 				(wlandev->hostwep & HOSTWEP_DEFAULTKEY_MASK),
 				p80211_wep->iv, p80211_wep->icv))) {
-			WLAN_LOG_WARNING("Host en-WEP failed, dropping frame (%d).\n", foo);
+			printk(KERN_WARNING "Host en-WEP failed, dropping frame (%d).\n", foo);
 			return 2;
 		}
 		fc |= cpu_to_le16(WLAN_SET_FC_ISWEP(1));
--- a/drivers/staging/wlan-ng/p80211netdev.c
+++ b/drivers/staging/wlan-ng/p80211netdev.c
@@ -1155,7 +1155,7 @@ static void p80211knetdev_tx_timeout( ne
 	if (wlandev->tx_timeout) {
 		wlandev->tx_timeout(wlandev);
 	} else {
-		WLAN_LOG_WARNING("Implement tx_timeout for %s\n",
+		printk(KERN_WARNING "Implement tx_timeout for %s\n",
 				 wlandev->nsdname);
 		netif_wake_queue(wlandev->netdev);
 	}
--- a/drivers/staging/wlan-ng/prism2mgmt.c
+++ b/drivers/staging/wlan-ng/prism2mgmt.c
@@ -183,7 +183,7 @@ int prism2mgmt_scan(wlandevice_t *wlande
                 }
                 result = hfa384x_drvr_setconfig16(hw, HFA384x_RID_CNFPASSIVESCANCTRL, word);
                 if ( result ) {
-                        WLAN_LOG_WARNING("Passive scan not supported with "
+                        printk(KERN_WARNING "Passive scan not supported with "
 					  "current firmware.  (<1.5.1)\n");
                 }
         }
--- a/drivers/staging/wlan-ng/prism2mib.c
+++ b/drivers/staging/wlan-ng/prism2mib.c
@@ -729,7 +729,7 @@ void                         *data)
 
 	if (!isget)
 		if ((*uint32) % 2) {
-			WLAN_LOG_WARNING("Attempt to set odd number "
+			printk(KERN_WARNING "Attempt to set odd number "
 					  "FragmentationThreshold\n");
 			msg->resultcode.data = P80211ENUM_resultcode_not_supported;
 			return(0);
--- a/drivers/staging/wlan-ng/prism2sta.c
+++ b/drivers/staging/wlan-ng/prism2sta.c
@@ -446,7 +446,7 @@ static int prism2sta_mlmerequest(wlandev
 		break;
 	}
 	default:
-		WLAN_LOG_WARNING("Unknown mgmt request message 0x%08x", msg->msgcode);
+		printk(KERN_WARNING "Unknown mgmt request message 0x%08x", msg->msgcode);
 		break;
 	}
 
@@ -511,7 +511,7 @@ u32 prism2sta_ifstate(wlandevice_t *wlan
 			result = P80211ENUM_resultcode_success;
 			break;
 		case WLAN_MSD_RUNNING:
-			WLAN_LOG_WARNING(
+			printk(KERN_WARNING
 				"Cannot enter fwload state from enable state,"
 				"you must disable first.\n");
 			result = P80211ENUM_resultcode_invalid_parameters;
@@ -1467,7 +1467,7 @@ void prism2sta_processing_defer(struct w
 
 	default:
 		/* This is bad, IO port problems? */
-		WLAN_LOG_WARNING(
+		printk(KERN_WARNING
 			"unknown linkstatus=0x%02x\n", hw->link_status);
 		goto failed;
 		break;
@@ -1557,14 +1557,14 @@ static void prism2sta_inf_assocstatus(wl
 
 	if (i >= hw->authlist.cnt) {
 		if (rec.assocstatus != HFA384x_ASSOCSTATUS_AUTHFAIL)
-			WLAN_LOG_WARNING("assocstatus info frame received for non-authenticated station.\n");
+			printk(KERN_WARNING "assocstatus info frame received for non-authenticated station.\n");
 	} else {
 		hw->authlist.assoc[i] =
 			(rec.assocstatus == HFA384x_ASSOCSTATUS_STAASSOC ||
 			 rec.assocstatus == HFA384x_ASSOCSTATUS_REASSOC);
 
 		if (rec.assocstatus == HFA384x_ASSOCSTATUS_AUTHFAIL)
-			WLAN_LOG_WARNING("authfail assocstatus info frame received for authenticated station.\n");
+			printk(KERN_WARNING "authfail assocstatus info frame received for authenticated station.\n");
 	}
 
 	return;
@@ -1887,16 +1887,16 @@ void prism2sta_ev_info(wlandevice_t *wla
 			prism2sta_inf_psusercnt(wlandev, inf);
 			break;
 	        case HFA384x_IT_KEYIDCHANGED:
-			WLAN_LOG_WARNING("Unhandled IT_KEYIDCHANGED\n");
+			printk(KERN_WARNING "Unhandled IT_KEYIDCHANGED\n");
 			break;
 	        case HFA384x_IT_ASSOCREQ:
-			WLAN_LOG_WARNING("Unhandled IT_ASSOCREQ\n");
+			printk(KERN_WARNING "Unhandled IT_ASSOCREQ\n");
 			break;
 	        case HFA384x_IT_MICFAILURE:
-			WLAN_LOG_WARNING("Unhandled IT_MICFAILURE\n");
+			printk(KERN_WARNING "Unhandled IT_MICFAILURE\n");
 			break;
 		default:
-			WLAN_LOG_WARNING(
+			printk(KERN_WARNING
 				"Unknown info type=0x%02x\n", inf->infotype);
 			break;
 	}
--- a/drivers/staging/wlan-ng/wlan_compat.h
+++ b/drivers/staging/wlan-ng/wlan_compat.h
@@ -58,8 +58,6 @@
 
 #include <linux/hardirq.h>
 
-#define WLAN_LOG_WARNING(x,args...) printk(KERN_WARNING "%s: " x , __func__ , ##args);
-
 #if defined(WLAN_INCLUDE_DEBUG)
 	#define WLAN_HEX_DUMP( l, x, p, n)	if( WLAN_DBVAR >= (l) ){ \
 		int __i__; \
