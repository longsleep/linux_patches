From lieb@canonical.com  Mon Aug 17 12:54:36 2009
From: Jim Lieb <lieb@canonical.com>
Date: Wed, 12 Aug 2009 14:54:14 -0700
Subject: Staging: vt665x: cleanup USB definitions
To: Greg KH <greg@kroah.com>, Forest Bond <forest@alittletooquiet.net>, Bartlomiej Zolnierkiewicz <bzolnier@gmail.com>
Cc: jim.lieb@canonical.com, Jim Lieb <lieb@canonical.com>
Message-ID: <1250114056-13843-13-git-send-email-lieb@canonical.com>


Remove gratuitous macros re-defining usb functions.
One result is to make kcompat.h now identical in both driver dirs

Signed-off-by: Jim Lieb <lieb@canonical.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/vt6656/kcompat.h  |    5 -----
 drivers/staging/vt6656/main_usb.c |   26 +++++++++++++-------------
 drivers/staging/vt6656/usbpipe.c  |   14 +++++++-------
 3 files changed, 20 insertions(+), 25 deletions(-)

--- a/drivers/staging/vt6656/kcompat.h
+++ b/drivers/staging/vt6656/kcompat.h
@@ -35,10 +35,5 @@
 #define netdev_priv(dev) (dev->priv)
 #endif
 
-#define vntwusb_submit_urb(val) usb_submit_urb(val, GFP_ATOMIC)
-#define vntwusb_alloc_urb(val)  usb_alloc_urb(val, GFP_ATOMIC)
-
-#define vntwusb_unlink_urb(val) usb_kill_urb(val)
-
 #endif
 
--- a/drivers/staging/vt6656/main_usb.c
+++ b/drivers/staging/vt6656/main_usb.c
@@ -859,7 +859,7 @@ static VOID device_free_tx_bufs(PSDevice
         pTxContext = pDevice->apTD[ii];
         //de-allocate URBs
         if (pTxContext->pUrb) {
-            vntwusb_unlink_urb(pTxContext->pUrb);
+            usb_kill_urb(pTxContext->pUrb);
             usb_free_urb(pTxContext->pUrb);
         }
         if (pTxContext)
@@ -878,7 +878,7 @@ static VOID device_free_rx_bufs(PSDevice
         pRCB = pDevice->apRCB[ii];
         //de-allocate URBs
         if (pRCB->pUrb) {
-            vntwusb_unlink_urb(pRCB->pUrb);
+            usb_kill_urb(pRCB->pUrb);
             usb_free_urb(pRCB->pUrb);
         }
         //de-allocate skb
@@ -926,7 +926,7 @@ static BOOL device_alloc_bufs(PSDevice p
         pDevice->apTD[ii] = pTxContext;
         pTxContext->pDevice = (PVOID) pDevice;
         //allocate URBs
-        pTxContext->pUrb = vntwusb_alloc_urb(0);;
+        pTxContext->pUrb = usb_alloc_urb(0, GFP_ATOMIC);
         if (pTxContext->pUrb == NULL) {
             DBG_PRT(MSG_LEVEL_ERR,KERN_ERR "alloc tx urb failed\n");
             goto free_tx;
@@ -955,7 +955,7 @@ static BOOL device_alloc_bufs(PSDevice p
         pDevice->apRCB[ii] = pRCB;
         pRCB->pDevice = (PVOID) pDevice;
         //allocate URBs
-        pRCB->pUrb = vntwusb_alloc_urb(0);
+        pRCB->pUrb = usb_alloc_urb(0, GFP_ATOMIC);
 
         if (pRCB->pUrb == NULL) {
             DBG_PRT(MSG_LEVEL_ERR,KERN_ERR" Failed to alloc rx urb\n");
@@ -974,16 +974,16 @@ static BOOL device_alloc_bufs(PSDevice p
     }
 
 
-	pDevice->pControlURB = vntwusb_alloc_urb(0);
+	pDevice->pControlURB = usb_alloc_urb(0, GFP_ATOMIC);
 	if (pDevice->pControlURB == NULL) {
 	    DBG_PRT(MSG_LEVEL_ERR,KERN_ERR"Failed to alloc control urb\n");
 	    goto free_rx_tx;
 	}
 
-	pDevice->pInterruptURB = vntwusb_alloc_urb(0);
+	pDevice->pInterruptURB = usb_alloc_urb(0, GFP_ATOMIC);
 	if (pDevice->pInterruptURB == NULL) {
 	    DBG_PRT(MSG_LEVEL_ERR,KERN_ERR"Failed to alloc int urb\n");
-   	    vntwusb_unlink_urb(pDevice->pControlURB);
+   	    usb_kill_urb(pDevice->pControlURB);
 	    usb_free_urb(pDevice->pControlURB);
 	    goto free_rx_tx;
 	}
@@ -991,8 +991,8 @@ static BOOL device_alloc_bufs(PSDevice p
     pDevice->intBuf.pDataBuf = kmalloc(MAX_INTERRUPT_SIZE, GFP_KERNEL);
 	if (pDevice->intBuf.pDataBuf == NULL) {
 	    DBG_PRT(MSG_LEVEL_ERR,KERN_ERR"Failed to alloc int buf\n");
-   	    vntwusb_unlink_urb(pDevice->pControlURB);
-   	    vntwusb_unlink_urb(pDevice->pInterruptURB);
+   	    usb_kill_urb(pDevice->pControlURB);
+   	    usb_kill_urb(pDevice->pInterruptURB);
 	    usb_free_urb(pDevice->pControlURB);
 	    usb_free_urb(pDevice->pInterruptURB);
 	    goto free_rx_tx;
@@ -1193,8 +1193,8 @@ free_rx_tx:
     device_free_rx_bufs(pDevice);
     device_free_tx_bufs(pDevice);
     device_free_int_bufs(pDevice);
-	vntwusb_unlink_urb(pDevice->pControlURB);
-	vntwusb_unlink_urb(pDevice->pInterruptURB);
+	usb_kill_urb(pDevice->pControlURB);
+	usb_kill_urb(pDevice->pInterruptURB);
     usb_free_urb(pDevice->pControlURB);
     usb_free_urb(pDevice->pInterruptURB);
 
@@ -1280,8 +1280,8 @@ device_release_WPADEV(pDevice);
     device_free_int_bufs(pDevice);
     device_free_frag_bufs(pDevice);
 
-	vntwusb_unlink_urb(pDevice->pControlURB);
-	vntwusb_unlink_urb(pDevice->pInterruptURB);
+	usb_kill_urb(pDevice->pControlURB);
+	usb_kill_urb(pDevice->pInterruptURB);
     usb_free_urb(pDevice->pControlURB);
     usb_free_urb(pDevice->pInterruptURB);
 
--- a/drivers/staging/vt6656/usbpipe.c
+++ b/drivers/staging/vt6656/usbpipe.c
@@ -193,7 +193,7 @@ PIPEnsControlOut(
 			 usb_sndctrlpipe(pDevice->usb , 0), (char *) &pDevice->sUsbCtlRequest,
 			 pbyBuffer, wLength, s_nsControlInUsbIoCompleteWrite, pDevice);
 
-	if ((ntStatus = vntwusb_submit_urb(pDevice->pControlURB) != 0)) {
+	if ((ntStatus = usb_submit_urb(pDevice->pControlURB, GFP_ATOMIC)) != 0) {
 		DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"control send request submission failed: %d\n", ntStatus);
 		return STATUS_FAILURE;
 	}
@@ -251,7 +251,7 @@ PIPEnsControlIn(
 			 usb_rcvctrlpipe(pDevice->usb , 0), (char *) &pDevice->sUsbCtlRequest,
 			 pbyBuffer, wLength, s_nsControlInUsbIoCompleteRead, pDevice);
 
-	if ((ntStatus = vntwusb_submit_urb(pDevice->pControlURB) != 0)) {
+	if ((ntStatus = usb_submit_urb(pDevice->pControlURB, GFP_ATOMIC)) != 0) {
 		DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"control request submission failed: %d\n", ntStatus);
 	}else {
 		MP_SET_FLAG(pDevice, fMP_CONTROL_READS);
@@ -414,7 +414,7 @@ usb_fill_bulk_urb(pDevice->pInterruptURB
 #endif
 #endif
 
-	if ((ntStatus = vntwusb_submit_urb(pDevice->pInterruptURB)) != 0) {
+	if ((ntStatus = usb_submit_urb(pDevice->pInterruptURB, GFP_ATOMIC)) != 0) {
 	    DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Submit int URB failed %d\n", ntStatus);
     }
 
@@ -494,7 +494,7 @@ s_nsInterruptUsbIoCompleteRead(
 
     if (pDevice->fKillEventPollingThread != TRUE) {
    #if 0               //reserve int URB submit
-	if ((ntStatus = vntwusb_submit_urb(urb)) != 0) {
+	if ((ntStatus = usb_submit_urb(urb, GFP_ATOMIC)) != 0) {
 	    DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Re-Submit int URB failed %d\n", ntStatus);
     }
    #else                                                                                     //replace int URB submit by bulk transfer
@@ -507,7 +507,7 @@ s_nsInterruptUsbIoCompleteRead(
 		     s_nsInterruptUsbIoCompleteRead,
 		     pDevice);
 
-	if ((ntStatus = vntwusb_submit_urb(pDevice->pInterruptURB)) != 0) {
+	if ((ntStatus = usb_submit_urb(pDevice->pInterruptURB, GFP_ATOMIC)) != 0) {
 	    DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Submit int URB failed %d\n", ntStatus);
            }
 
@@ -572,7 +572,7 @@ PIPEnsBulkInUsbRead(
 		s_nsBulkInUsbIoCompleteRead,
 		pRCB);
 
-	if((ntStatus = vntwusb_submit_urb(pUrb)!=0)){
+	if((ntStatus = usb_submit_urb(pUrb, GFP_ATOMIC)) != 0){
 		DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Submit Rx URB failed %d\n", ntStatus);
 		return STATUS_FAILURE ;
 	}
@@ -718,7 +718,7 @@ PIPEnsSendBulkOut(
         		s_nsBulkOutIoCompleteWrite,
         		pContext);
 
-    	if((status = vntwusb_submit_urb(pUrb))!=0)
+    	if((status = usb_submit_urb(pUrb, GFP_ATOMIC))!=0)
     	{
     		DBG_PRT(MSG_LEVEL_DEBUG, KERN_INFO"Submit Tx URB failed %d\n", status);
     		return STATUS_FAILURE;
