From foo@baz Wed Jul 29 09:04:51 PDT 2009
Date: Wed, 29 Jul 2009 09:04:51 -0700
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: Staging: hv: fix sparse static warnings

From: Greg Kroah-Hartman <gregkh@suse.de>

This fixes up all of the sparse warnings about static functions.

Cc: Hank Janssen <hjanssen@microsoft.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/hv/BlkVsc.c      |    2 +-
 drivers/staging/hv/Channel.c     |   24 ++++++++++++------------
 drivers/staging/hv/ChannelMgmt.c |   14 +++++++-------
 drivers/staging/hv/Connection.c  |   12 ++++++------
 drivers/staging/hv/Hv.c          |   10 +++++-----
 drivers/staging/hv/NetVsc.c      |    6 +++---
 drivers/staging/hv/RingBuffer.c  |   20 ++++++++++----------
 drivers/staging/hv/RndisFilter.c |    4 ++--
 drivers/staging/hv/StorVsc.c     |   14 +++++++-------
 drivers/staging/hv/VersionInfo.h |    6 +++---
 drivers/staging/hv/Vmbus.c       |   16 ++++++++--------
 drivers/staging/hv/blkvsc_drv.c  |    6 +++---
 drivers/staging/hv/netvsc_drv.c  |    4 ++--
 drivers/staging/hv/osd.c         |    4 ++--
 drivers/staging/hv/storvsc_drv.c |    4 ++--
 drivers/staging/hv/vmbus_drv.c   |    4 ++--
 16 files changed, 75 insertions(+), 75 deletions(-)

--- a/drivers/staging/hv/BlkVsc.c
+++ b/drivers/staging/hv/BlkVsc.c
@@ -75,7 +75,7 @@ BlkVscInitialize(
 	return ret;
 }
 
-int
+static int
 BlkVscOnDeviceAdd(
 	struct hv_device *Device,
 	void			*AdditionalInfo
--- a/drivers/staging/hv/blkvsc_drv.c
+++ b/drivers/staging/hv/blkvsc_drv.c
@@ -169,7 +169,7 @@ Name:	blkvsc_drv_init()
 Desc:	BlkVsc driver initialization.
 
 --*/
-int blkvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
+static int blkvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
 {
 	int ret=0;
 	STORVSC_DRIVER_OBJECT *storvsc_drv_obj=&g_blkvsc_drv.drv_obj;
@@ -214,7 +214,7 @@ Name:	blkvsc_drv_exit()
 Desc:
 
 --*/
-void blkvsc_drv_exit(void)
+static void blkvsc_drv_exit(void)
 {
 	STORVSC_DRIVER_OBJECT *storvsc_drv_obj=&g_blkvsc_drv.drv_obj;
 	struct driver_context *drv_ctx=&g_blkvsc_drv.drv_ctx;
@@ -1390,7 +1390,7 @@ static int blkvsc_revalidate_disk(struct
 	return 0;
 }
 
-int blkvsc_getgeo(struct block_device *bd, struct hd_geometry *hg)
+static int blkvsc_getgeo(struct block_device *bd, struct hd_geometry *hg)
 {
 	sector_t total_sectors = get_capacity(bd->bd_disk);
 	sector_t cylinder_times_heads=0;
--- a/drivers/staging/hv/Channel.c
+++ b/drivers/staging/hv/Channel.c
@@ -153,7 +153,7 @@ Description:
 	Retrieve various channel debug info
 
 --*/
-void
+static void
 VmbusChannelGetDebugInfo(
 	VMBUS_CHANNEL				*Channel,
 	VMBUS_CHANNEL_DEBUG_INFO	*DebugInfo
@@ -197,7 +197,7 @@ Description:
 	Open the specified channel.
 
 --*/
-int
+static int
 VmbusChannelOpen(
 	VMBUS_CHANNEL			*NewChannel,
 	u32					SendRingBufferSize,
@@ -510,7 +510,7 @@ Description:
 	Estabish a GPADL for the specified buffer
 
 --*/
-int
+static int
 VmbusChannelEstablishGpadl(
 	VMBUS_CHANNEL	*Channel,
 	void *			Kbuffer,	/* from kmalloc() */
@@ -615,7 +615,7 @@ Description:
 	Teardown the specified GPADL handle
 
 --*/
-int
+static int
 VmbusChannelTeardownGpadl(
 	VMBUS_CHANNEL	*Channel,
 	u32			GpadlHandle
@@ -676,7 +676,7 @@ Description:
 	Close the specified channel
 
 --*/
-void
+static void
 VmbusChannelClose(
 	VMBUS_CHANNEL	*Channel
 	)
@@ -753,7 +753,7 @@ Description:
 	Send the specified buffer on the given channel
 
 --*/
-int
+static int
 VmbusChannelSendPacket(
 	VMBUS_CHANNEL		*Channel,
 	const void *			Buffer,
@@ -819,7 +819,7 @@ Description:
 	Send a range of single-page buffer packets using a GPADL Direct packet type.
 
 --*/
-int
+static int
 VmbusChannelSendPacketPageBuffer(
 	VMBUS_CHANNEL		*Channel,
 	PAGE_BUFFER			PageBuffers[],
@@ -902,7 +902,7 @@ Description:
 	Send a multi-page buffer packet using a GPADL Direct packet type.
 
 --*/
-int
+static int
 VmbusChannelSendPacketMultiPageBuffer(
 	VMBUS_CHANNEL		*Channel,
 	MULTIPAGE_BUFFER	*MultiPageBuffer,
@@ -985,7 +985,7 @@ Description:
 
 --*/
 /* TODO: Do we ever receive a gpa direct packet other than the ones we send ? */
-int
+static int
 VmbusChannelRecvPacket(
 	VMBUS_CHANNEL		*Channel,
 	void *				Buffer,
@@ -1063,7 +1063,7 @@ Description:
 	Retrieve the raw packet on the specified channel
 
 --*/
-int
+static int
 VmbusChannelRecvPacketRaw(
 	VMBUS_CHANNEL		*Channel,
 	void *				Buffer,
@@ -1140,7 +1140,7 @@ Description:
 	Channel event callback
 
 --*/
-void
+static void
 VmbusChannelOnChannelEvent(
 	VMBUS_CHANNEL		*Channel
 	)
@@ -1165,7 +1165,7 @@ Description:
 	Timer event callback
 
 --*/
-void
+static void
 VmbusChannelOnTimer(
 	void		*Context
 	)
--- a/drivers/staging/hv/ChannelMgmt.c
+++ b/drivers/staging/hv/ChannelMgmt.c
@@ -87,7 +87,7 @@ VmbusChannelProcessRescindOffer(
 
 #define MAX_NUM_DEVICE_CLASSES_SUPPORTED 4
 
-const GUID gSupportedDeviceClasses[MAX_NUM_DEVICE_CLASSES_SUPPORTED]= {
+static const GUID gSupportedDeviceClasses[MAX_NUM_DEVICE_CLASSES_SUPPORTED]= {
 	/* {ba6163d9-04a1-4d29-b605-72e2ffb1dc7f} */
 	{.Data  = {0xd9, 0x63, 0x61, 0xba, 0xa1, 0x04, 0x29, 0x4d, 0xb6, 0x05, 0x72, 0xe2, 0xff, 0xb1, 0xdc, 0x7f}},/* Storage - SCSI */
 	/* {F8615163-DF3E-46c5-913F-F2D2F965ED0E} */
@@ -100,7 +100,7 @@ const GUID gSupportedDeviceClasses[MAX_N
 };
 
 /* Channel message dispatch table */
-VMBUS_CHANNEL_MESSAGE_TABLE_ENTRY gChannelMessageTable[ChannelMessageCount]= {
+static VMBUS_CHANNEL_MESSAGE_TABLE_ENTRY gChannelMessageTable[ChannelMessageCount]= {
     {ChannelMessageInvalid,					NULL},
     {ChannelMessageOfferChannel,            VmbusChannelOnOffer},
     {ChannelMessageRescindChannelOffer,     VmbusChannelOnOfferRescind},
@@ -129,7 +129,7 @@ Description:
 	Allocate and initialize a vmbus channel object
 
 --*/
-VMBUS_CHANNEL* AllocVmbusChannel(void)
+static VMBUS_CHANNEL* AllocVmbusChannel(void)
 {
 	VMBUS_CHANNEL* channel;
 
@@ -193,7 +193,7 @@ Description:
 	Release the resources used by the vmbus channel object
 
 --*/
-void FreeVmbusChannel(VMBUS_CHANNEL* Channel)
+static void FreeVmbusChannel(VMBUS_CHANNEL* Channel)
 {
 	TimerClose(Channel->PollTimer);
 
@@ -665,7 +665,7 @@ Description:
 	This is invoked in the vmbus worker thread context.
 
 --*/
-void
+static void
 VmbusOnChannelMessage(
 	void *Context
 	)
@@ -714,7 +714,7 @@ Description:
 	Send a request to get all our pending offers.
 
 --*/
-int
+static int
 VmbusChannelRequestOffers(
 	void
 	)
@@ -776,7 +776,7 @@ Description:
 	Release channels that are unattached/unconnected ie (no drivers associated)
 
 --*/
-void
+static void
 VmbusChannelReleaseUnattachedChannels(
 	void
 	)
--- a/drivers/staging/hv/Connection.c
+++ b/drivers/staging/hv/Connection.c
@@ -44,7 +44,7 @@ Description:
 	Sends a connect request on the partition service connection
 
 --*/
-int
+static int
 VmbusConnect(
 	)
 {
@@ -198,7 +198,7 @@ Description:
 	Sends a disconnect request on the partition service connection
 
 --*/
-int
+static int
 VmbusDisconnect(
 	void
 	)
@@ -254,7 +254,7 @@ Description:
 	Get the channel object given its child relative id (ie channel id)
 
 --*/
-VMBUS_CHANNEL*
+static VMBUS_CHANNEL*
 GetChannelFromRelId(
 	u32 relId
 	)
@@ -329,7 +329,7 @@ Description:
 	Handler for events
 
 --*/
-void
+static void
 VmbusOnEvents(
   void
 	)
@@ -389,7 +389,7 @@ Description:
 	Send a msg on the vmbus's message connection
 
 --*/
-int
+static int
 VmbusPostMessage(
 	void *			buffer,
 	size_t			bufferLen
@@ -419,7 +419,7 @@ Description:
 	Send an event notification to the parent
 
 --*/
-int
+static int
 VmbusSetEvent(u32 childRelId)
 {
 	int ret=0;
--- a/drivers/staging/hv/Hv.c
+++ b/drivers/staging/hv/Hv.c
@@ -348,7 +348,7 @@ Description:
 	Cleanup routine. This routine is called normally during driver unloading or exiting.
 
 --*/
-void
+static void
 HvCleanup (
     void
     )
@@ -390,7 +390,7 @@ Description:
 	involves a hypercall.
 
 --*/
-HV_STATUS
+static HV_STATUS
 HvPostMessage(
 	HV_CONNECTION_ID connectionId,
 	HV_MESSAGE_TYPE  messageType,
@@ -444,7 +444,7 @@ Description:
 	involves a hypercall.
 
 --*/
-HV_STATUS
+static HV_STATUS
 HvSignalEvent(
 	)
 {
@@ -467,7 +467,7 @@ Description:
 	Otherwise, we create and initialize the message and event pages.
 
 --*/
-int
+static int
 HvSynicInit (
 	u32 irqVector
 	)
@@ -611,7 +611,7 @@ Description:
 	Cleanup routine for HvSynicInit().
 
 --*/
-void
+static void
 HvSynicCleanup(
 	void
 	)
--- a/drivers/staging/hv/NetVsc.c
+++ b/drivers/staging/hv/NetVsc.c
@@ -792,7 +792,7 @@ Description:
 	Callback when the device belonging to this driver is added
 
 --*/
-int
+static int
 NetVscOnDeviceAdd(
 	struct hv_device *Device,
 	void			*AdditionalInfo
@@ -909,7 +909,7 @@ Description:
 	Callback when the root bus device is removed
 
 --*/
-int
+static int
 NetVscOnDeviceRemove(
 	struct hv_device *Device
 	)
@@ -981,7 +981,7 @@ Description:
 	Perform any cleanup when the driver is removed
 
 --*/
-void
+static void
 NetVscOnCleanup(
 	struct hv_driver *drv
 	)
--- a/drivers/staging/hv/netvsc_drv.c
+++ b/drivers/staging/hv/netvsc_drv.c
@@ -90,7 +90,7 @@ Name:	netvsc_drv_init()
 Desc:	NetVsc driver initialization
 
 --*/
-int netvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
+static int netvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
 {
 	int ret=0;
 	NETVSC_DRIVER_OBJECT *net_drv_obj=&g_netvsc_drv.drv_obj;
@@ -634,7 +634,7 @@ Name:	netvsc_drv_exit()
 Desc:
 
 --*/
-void netvsc_drv_exit(void)
+static void netvsc_drv_exit(void)
 {
 	NETVSC_DRIVER_OBJECT *netvsc_drv_obj=&g_netvsc_drv.drv_obj;
 	struct driver_context *drv_ctx=&g_netvsc_drv.drv_ctx;
--- a/drivers/staging/hv/osd.c
+++ b/drivers/staging/hv/osd.c
@@ -161,7 +161,7 @@ void MemUnmapIO(void *virt)
 	/* iounmap(virt); */
 }
 
-void TimerCallback(unsigned long data)
+static void TimerCallback(unsigned long data)
 {
 	struct osd_timer *t = (struct osd_timer *) data;
 
@@ -269,7 +269,7 @@ unsigned long Virtual2Physical(void * Vi
 	return pfn << PAGE_SHIFT;
 }
 
-void WorkItemCallback(struct work_struct *work)
+static void WorkItemCallback(struct work_struct *work)
 {
 	WORKITEM* w = (WORKITEM*)work;
 
--- a/drivers/staging/hv/RingBuffer.c
+++ b/drivers/staging/hv/RingBuffer.c
@@ -203,7 +203,7 @@ Description:
 	Dump out to console the ring buffer info
 
 --*/
-void
+static void
 DumpRingInfo(RING_BUFFER_INFO* RingInfo, char *Prefix)
 {
 	u32 bytesAvailToWrite;
@@ -249,7 +249,7 @@ Description:
 	Get various debug metrics for the specified ring buffer
 
 --*/
-void
+static void
 RingBufferGetDebugInfo(
 	RING_BUFFER_INFO		*RingInfo,
 	RING_BUFFER_DEBUG_INFO	*DebugInfo
@@ -281,7 +281,7 @@ Description:
 	Get the interrupt mask for the specified ring buffer
 
 --*/
-u32
+static u32
 GetRingBufferInterruptMask(
 	RING_BUFFER_INFO *rbi
 	)
@@ -298,7 +298,7 @@ Description:
 	Initialize the ring buffer
 
 --*/
-int
+static int
 RingBufferInit(
 	RING_BUFFER_INFO	*RingInfo,
 	void				*Buffer,
@@ -329,7 +329,7 @@ Description:
 	Cleanup the ring buffer
 
 --*/
-void
+static void
 RingBufferCleanup(
 	RING_BUFFER_INFO* RingInfo
 	)
@@ -345,7 +345,7 @@ Description:
 	Write to the ring buffer
 
 --*/
-int
+static int
 RingBufferWrite(
 	RING_BUFFER_INFO*	OutRingInfo,
 	SG_BUFFER_LIST		SgBuffers[],
@@ -435,7 +435,7 @@ Description:
 	Read without advancing the read index
 
 --*/
-int
+static int
 RingBufferPeek(
 	RING_BUFFER_INFO*	InRingInfo,
 	void*				Buffer,
@@ -484,7 +484,7 @@ Description:
 	Read and advance the read index
 
 --*/
-int
+static int
 RingBufferRead(
 	RING_BUFFER_INFO*	InRingInfo,
 	void *				Buffer,
@@ -555,7 +555,7 @@ Description:
 	Assume there is enough room. Handles wrap-around in dest case only!!
 
 --*/
-u32
+static u32
 CopyToRingBuffer(
 	RING_BUFFER_INFO	*RingInfo,
 	u32				StartWriteOffset,
@@ -596,7 +596,7 @@ Description:
 	Assume there is enough room. Handles wrap-around in src case only!!
 
 --*/
-u32
+static u32
 CopyFromRingBuffer(
 	RING_BUFFER_INFO	*RingInfo,
 	void *				Dest,
--- a/drivers/staging/hv/RndisFilter.c
+++ b/drivers/staging/hv/RndisFilter.c
@@ -202,7 +202,7 @@ RndisFilterOnSendRequestCompletion(
 
 
 /* The one and only */
-RNDIS_FILTER_DRIVER_OBJECT gRndisFilter;
+static RNDIS_FILTER_DRIVER_OBJECT gRndisFilter;
 
 static inline RNDIS_DEVICE* GetRndisDevice(void)
 {
@@ -926,7 +926,7 @@ RndisFilterCloseDevice(
 }
 
 
-int
+static int
 RndisFilterOnDeviceAdd(
 	struct hv_device *Device,
 	void			*AdditionalInfo
--- a/drivers/staging/hv/StorVsc.c
+++ b/drivers/staging/hv/StorVsc.c
@@ -315,7 +315,7 @@ Description:
 	Callback when the device belonging to this driver is added
 
 --*/
-int
+static int
 StorVscOnDeviceAdd(
 	struct hv_device *Device,
 	void			*AdditionalInfo
@@ -527,7 +527,7 @@ Cleanup:
 }
 
 
-int
+static int
 StorVscConnectToVsp(
 	struct hv_device *Device
 	)
@@ -572,7 +572,7 @@ Description:
 	Callback when the our device is being removed
 
 --*/
-int
+static int
 StorVscOnDeviceRemove(
 	struct hv_device *Device
 	)
@@ -631,7 +631,7 @@ DPRINT_EXIT(STORVSC);
 }
 *********** */
 
-int
+static int
 StorVscOnHostReset(
 	struct hv_device *Device
 	)
@@ -701,7 +701,7 @@ Description:
 	Callback to initiate an I/O request
 
 --*/
-int
+static int
 StorVscOnIORequest(
 	struct hv_device *Device,
 	struct hv_storvsc_request *Request
@@ -805,7 +805,7 @@ Description:
 	Perform any cleanup when the driver is removed
 
 --*/
-void
+static void
 StorVscOnCleanup(
 	struct hv_driver *Driver
 	)
@@ -919,7 +919,7 @@ StorVscOnReceive(
 	}
 }
 
-void
+static void
 StorVscOnChannelCallback(
 	void * Context
 	)
--- a/drivers/staging/hv/storvsc_drv.c
+++ b/drivers/staging/hv/storvsc_drv.c
@@ -130,7 +130,7 @@ Name:	storvsc_drv_init()
 Desc:	StorVsc driver initialization.
 
 --*/
-int storvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
+static int storvsc_drv_init(PFN_DRIVERINITIALIZE pfn_drv_init)
 {
 	int ret=0;
 	STORVSC_DRIVER_OBJECT *storvsc_drv_obj=&g_storvsc_drv.drv_obj;
@@ -184,7 +184,7 @@ Name:	storvsc_drv_exit()
 Desc:
 
 --*/
-void storvsc_drv_exit(void)
+static void storvsc_drv_exit(void)
 {
 	STORVSC_DRIVER_OBJECT *storvsc_drv_obj=&g_storvsc_drv.drv_obj;
 	struct driver_context *drv_ctx=&g_storvsc_drv.drv_ctx;
--- a/drivers/staging/hv/VersionInfo.h
+++ b/drivers/staging/hv/VersionInfo.h
@@ -24,6 +24,6 @@
 
 #pragma once
 
-const char VersionDate[]=__DATE__;
-const char VersionTime[]=__TIME__;
-const char VersionDesc[]= "Version 2.0";
+static const char VersionDate[]=__DATE__;
+static const char VersionTime[]=__TIME__;
+static const char VersionDesc[]= "Version 2.0";
--- a/drivers/staging/hv/Vmbus.c
+++ b/drivers/staging/hv/Vmbus.c
@@ -224,7 +224,7 @@ Description:
 
 --*/
 
-struct hv_device*
+static struct hv_device*
 VmbusChildDeviceCreate(
 	GUID DeviceType,
 	GUID DeviceInstance,
@@ -248,7 +248,7 @@ Description:
 	Registers the child device with the vmbus
 
 --*/
-int
+static int
 VmbusChildDeviceAdd(
    struct hv_device *ChildDevice)
 {
@@ -267,7 +267,7 @@ Description:
 	Unregisters the child device from the vmbus
 
 --*/
-void
+static void
 VmbusChildDeviceRemove(
    struct hv_device *ChildDevice)
 {
@@ -346,7 +346,7 @@ Description:
 	Callback when the root bus device is removed
 
 --*/
-int VmbusOnDeviceRemove(
+static int VmbusOnDeviceRemove(
 	struct hv_device *dev
 	)
 {
@@ -375,7 +375,7 @@ Description:
 	Perform any cleanup when the driver is removed
 
 --*/
-void
+static void
 VmbusOnCleanup(
 	struct hv_driver *drv
 	)
@@ -399,7 +399,7 @@ Description:
 	DPC routine to handle messages from the hypervisior
 
 --*/
-void
+static void
 VmbusOnMsgDPC(
 	struct hv_driver *drv
 	)
@@ -458,7 +458,7 @@ Description:
 	DPC routine to handle events from the hypervisior
 
 --*/
-void
+static void
 VmbusOnEventDPC(
 	struct hv_driver* drv
 	)
@@ -477,7 +477,7 @@ Description:
 	ISR routine
 
 --*/
-int
+static int
 VmbusOnISR(
 	struct hv_driver *drv
 	)
--- a/drivers/staging/hv/vmbus_drv.c
+++ b/drivers/staging/hv/vmbus_drv.c
@@ -311,7 +311,7 @@ Desc:	Main vmbus driver initialization r
 		- setup the vmbus root device
 		- retrieve the channel offers
 --*/
-int vmbus_bus_init(PFN_DRIVERINITIALIZE pfn_drv_init)
+static int vmbus_bus_init(PFN_DRIVERINITIALIZE pfn_drv_init)
 {
 	int ret=0;
 	unsigned int vector=0;
@@ -436,7 +436,7 @@ Name:	vmbus_bus_exit()
 Desc:	Terminate the vmbus driver. This routine is opposite of vmbus_bus_init()
 
 --*/
-void vmbus_bus_exit(void)
+static void vmbus_bus_exit(void)
 {
 	VMBUS_DRIVER_OBJECT *vmbus_drv_obj=&g_vmbus_drv.drv_obj;
 	struct vmbus_driver_context *vmbus_drv_ctx=&g_vmbus_drv;
