From liodot@gmail.com  Mon Oct 20 16:04:46 2008
From: "Lior Dotan" <liodot@gmail.com>
Date: Tue, 14 Oct 2008 10:43:57 +0200
Subject: Staging: PCC-ACPI: Fix all checkpatch errors
To: "Greg KH" <greg@kroah.com>
Message-ID: <a5bf86a80810140143g510183c9ve85a379af519670@mail.gmail.com>


Fix all complaints that checkpatch had regarding this patch

Signed-off-by: Lior Dotan <liodot@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/pcc-acpi/pcc-acpi.c |  382 ++++++++++++++++++++----------------
 1 file changed, 222 insertions(+), 160 deletions(-)

--- a/drivers/staging/pcc-acpi/pcc-acpi.c
+++ b/drivers/staging/pcc-acpi/pcc-acpi.c
@@ -27,11 +27,13 @@
  * 	Nov.04, 2006	Hiroshi Miura <miura@da-cha.org>
  * 		-v0.9	remove warning about section reference.
  * 			remove acpi_os_free
- * 			add /proc/acpi/pcc/brightness interface to allow HAL to access.
+ * 			add /proc/acpi/pcc/brightness interface to
+ * 			allow HAL to access.
  * 			merge dbronaugh's enhancement
  * 			Aug.17, 2004 David Bronaugh (dbronaugh)
  *  				- Added screen brightness setting interface
- *				  Thanks to the FreeBSD crew (acpi_panasonic.c authors)
+ *				  Thanks to the FreeBSD crew
+ *				  (acpi_panasonic.c authors)
  * 				  for the ideas I needed to accomplish it
  *
  *	May.29, 2006	Hiroshi Miura <miura@da-cha.org>
@@ -41,13 +43,15 @@
  *			Hiroshi Yokota for providing solutions.
  *
  *	Oct.02, 2004	Hiroshi Miura <miura@da-cha.org>
- *		-v0.8.2	merge code of YOKOTA Hiroshi <yokota@netlab.is.tsukuba.ac.jp>.
+ *		-v0.8.2	merge code of YOKOTA Hiroshi
+ *			<yokota@netlab.is.tsukuba.ac.jp>.
  *			Add sticky key mode interface.
  *			Refactoring acpi_pcc_generete_keyinput().
  *
  *	Sep.15, 2004	Hiroshi Miura <miura@da-cha.org>
  *		-v0.8	Generate key input event on input subsystem.
- *			This is based on yet another driver written by Ryuta Nakanishi.
+ *			This is based on yet another driver
+ *			written by Ryuta Nakanishi.
  *
  *	Sep.10, 2004	Hiroshi Miura <miura@da-cha.org>
  *		-v0.7	Change proc interface functions using seq_file
@@ -57,7 +61,8 @@
  *		-v0.6.4 Fix a silly error with status checking
  *
  *	Aug.25, 2004	Hiroshi Miura <miura@da-cha.org>
- *		-v0.6.3 replace read_acpi_int by standard function acpi_evaluate_integer
+ *		-v0.6.3 replace read_acpi_int by standard
+ *			function acpi_evaluate_integer
  *			some clean up and make smart copyright notice.
  *			fix return value of pcc_acpi_get_key()
  *			fix checking return value of acpi_bus_register_driver()
@@ -104,7 +109,7 @@
 #include <linux/proc_fs.h>
 #include <linux/ctype.h>
 #include <linux/seq_file.h>
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #include <acpi/acpi_bus.h>
 #include <acpi/acpi_drivers.h>
 #include <linux/input.h>
@@ -200,12 +205,18 @@ MODULE_LICENSE("GPL");
    ENV_STATEs: Normal temp=0x01, High temp=0x81, N/A=0x00
 */
 enum SINF_BITS { SINF_NUM_BATTERIES = 0,
-                 SINF_LCD_TYPE,      /* 1 */
-		 SINF_AC_MAX_BRIGHT, SINF_AC_MIN_BRIGHT, SINF_AC_CUR_BRIGHT,  /* 2, 3, 4 */
-		             /* 4 = R1 only handle SINF_AC_CUR_BRIGHT as SINF_CUR_BRIGHT and don't know AC state */
-		 SINF_DC_MAX_BRIGHT, SINF_DC_MIN_BRIGHT, SINF_DC_CUR_BRIGHT,  /* 5, 6, 7 */
+		 SINF_LCD_TYPE,
+		 SINF_AC_MAX_BRIGHT,
+		 SINF_AC_MIN_BRIGHT,
+		 SINF_AC_CUR_BRIGHT,
+			     /* 4 = R1 only handle SINF_AC_CUR_BRIGHT
+			      * as SINF_CUR_BRIGHT and don't know AC state */
+		 SINF_DC_MAX_BRIGHT,
+		 SINF_DC_MIN_BRIGHT,
+		 SINF_DC_CUR_BRIGHT,
 		 SINF_MUTE,
-		 SINF_RESERVED,      SINF_ENV_STATE, /* 9, 10 */
+		 SINF_RESERVED,
+		 SINF_ENV_STATE, /* 10 */
 		 SINF_STICKY_KEY = 0x80,
 };
 
@@ -249,8 +260,8 @@ struct pcc_keyinput {
 };
 
 /* --------------------------------------------------------------------------
-                           method access functions
-   -------------------------------------------------------------------------- */
+ *                         method access functions
+ * -------------------------------------------------------------------------- */
 static int acpi_pcc_write_sset(struct acpi_hotkey *hotkey, int func, int val)
 {
 	union acpi_object in_objs[] = {
@@ -267,7 +278,8 @@ static int acpi_pcc_write_sset(struct ac
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_write_sset");
 
-	status = acpi_evaluate_object(hotkey->handle, METHOD_HKEY_SSET, &params, NULL);
+	status = acpi_evaluate_object(hotkey->handle, METHOD_HKEY_SSET,
+								&params, NULL);
 
 	return_VALUE(status == AE_OK);
 }
@@ -279,7 +291,8 @@ static inline int acpi_pcc_get_sqty(stru
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_get_sqty");
 
-	status = acpi_evaluate_integer(device->handle, METHOD_HKEY_SQTY, NULL, &s);
+	status = acpi_evaluate_integer(device->handle, METHOD_HKEY_SQTY,
+								NULL, &s);
 	if (ACPI_SUCCESS(status)) {
 		return_VALUE(s);
 	} else {
@@ -289,7 +302,7 @@ static inline int acpi_pcc_get_sqty(stru
 	}
 }
 
-static int acpi_pcc_retrieve_biosdata(struct acpi_hotkey *hotkey, u32* sinf)
+static int acpi_pcc_retrieve_biosdata(struct acpi_hotkey *hotkey, u32 *sinf)
 {
 	acpi_status status;
 	struct acpi_buffer buffer = {ACPI_ALLOCATE_BUFFER, NULL};
@@ -298,9 +311,11 @@ static int acpi_pcc_retrieve_biosdata(st
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_retrieve_biosdata");
 
-	status = acpi_evaluate_object(hotkey->handle, METHOD_HKEY_SINF, 0 , &buffer);
+	status = acpi_evaluate_object(hotkey->handle, METHOD_HKEY_SINF,
+								0, &buffer);
 	if (ACPI_FAILURE(status)) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "evaluation error HKEY.SINF\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"evaluation error HKEY.SINF\n"));
 		return_VALUE(0);
 	}
 
@@ -311,18 +326,19 @@ static int acpi_pcc_retrieve_biosdata(st
 	}
 
 	if (hotkey->num_sifr < hkey->package.count) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "SQTY reports bad SINF length\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"SQTY reports bad SINF length\n"));
 		status = AE_ERROR;
 		goto end;
 	}
 
 	for (i = 0; i < hkey->package.count; i++) {
 		union acpi_object *element = &(hkey->package.elements[i]);
-		if (likely(element->type == ACPI_TYPE_INTEGER)) {
+		if (likely(element->type == ACPI_TYPE_INTEGER))
 			sinf[i] = element->integer.value;
-		} else {
-			ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Invalid HKEY.SINF data\n"));
-		}
+		else
+			ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+				"Invalid HKEY.SINF data\n"));
 	}
 	sinf[hkey->package.count] = -1;
 
@@ -334,33 +350,34 @@ end:
 static int acpi_pcc_read_sinf_field(struct seq_file *seq, int field)
 {
 	struct acpi_hotkey *hotkey = (struct acpi_hotkey *) seq->private;
-	u32* sinf = kmalloc(sizeof(u32) * (hotkey->num_sifr + 1), GFP_KERNEL);
+	u32 *sinf = kmalloc(sizeof(u32) * (hotkey->num_sifr + 1), GFP_KERNEL);
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_read_sinf_field");
 
 	if (!sinf) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate %li bytes\n",
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't allocate %li bytes\n",
 		       sizeof(u32) * hotkey->num_sifr));
 		return_VALUE(0);
 	}
 
-	if (acpi_pcc_retrieve_biosdata(hotkey, sinf)) {
+	if (acpi_pcc_retrieve_biosdata(hotkey, sinf))
 		seq_printf(seq, "%u\n",	sinf[field]);
-	} else {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't retrieve BIOS data\n"));
-	}
+	else
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't retrieve BIOS data\n"));
 
 	kfree(sinf);
 	return_VALUE(0);
 }
 
 /* --------------------------------------------------------------------------
-                       user interface functions
-   -------------------------------------------------------------------------- */
+ *                     user interface functions
+ * -------------------------------------------------------------------------- */
 /* read methods */
 /* Sinf read methods */
 #define PCC_SINF_READ_F(_name_, FUNC) \
-static int _name_  (struct seq_file *seq, void *offset) \
+static int _name_(struct seq_file *seq, void *offset) \
 { \
 	return acpi_pcc_read_sinf_field(seq, (FUNC)); \
 }
@@ -382,9 +399,8 @@ static int acpi_pcc_sticky_key_show(stru
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_sticky_key_show");
 
-	if (!hotkey || !hotkey->device) {
+	if (!hotkey || !hotkey->device)
 		return_VALUE(0);
-	}
 
 	seq_printf(seq, "%d\n", hotkey->sticky_mode);
 
@@ -413,17 +429,18 @@ static int acpi_pcc_version_show(struct 
 	if (!hotkey || !hotkey->device)
 		return 0;
 
-	seq_printf(seq, "%s version %s\n", ACPI_PCC_DRIVER_NAME, ACPI_PCC_VERSION);
+	seq_printf(seq, "%s version %s\n", ACPI_PCC_DRIVER_NAME,
+						ACPI_PCC_VERSION);
 	seq_printf(seq, "%li functions\n", hotkey->num_sifr);
 
 	return_VALUE(0);
 }
 
 /* write methods */
-static ssize_t acpi_pcc_write_single_flag (struct file *file,
-                                           const char __user *buffer,
-                                           size_t count,
-                                           int sinf_func)
+static ssize_t acpi_pcc_write_single_flag(struct file *file,
+					  const char __user *buffer,
+					  size_t count,
+					  int sinf_func)
 {
 	struct seq_file		*seq = file->private_data;
 	struct acpi_hotkey	*hotkey = seq->private;
@@ -432,23 +449,22 @@ static ssize_t acpi_pcc_write_single_fla
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_write_single_flag");
 
-	if (!hotkey || (count > sizeof(write_string) - 1)) {
+	if (!hotkey || (count > sizeof(write_string) - 1))
 		return_VALUE(-EINVAL);
-        }
 
-	if (copy_from_user(write_string, buffer, count)) {
+	if (copy_from_user(write_string, buffer, count))
 		return_VALUE(-EFAULT);
-        }
+
 	write_string[count] = '\0';
 
-	if (sscanf(write_string, "%i", &val) == 1 && (val == 0 || val == 1)) {
+	if (sscanf(write_string, "%i", &val) == 1 && (val == 0 || val == 1))
 		acpi_pcc_write_sset(hotkey, sinf_func, val);
-	}
 
 	return_VALUE(count);
 }
 
-static unsigned long acpi_pcc_write_brightness(struct file *file, const char __user *buffer,
+static unsigned long acpi_pcc_write_brightness(struct file *file,
+					       const char __user *buffer,
 					       size_t count,
 					       int min_index, int max_index,
 					       int cur_index)
@@ -457,7 +473,7 @@ static unsigned long acpi_pcc_write_brig
 	struct acpi_hotkey	*hotkey = (struct acpi_hotkey *)seq->private;
 	char			write_string[PROC_STR_MAX_LEN];
 	u32 bright;
-	u32* sinf = kmalloc(sizeof(u32) * (hotkey->num_sifr + 1), GFP_KERNEL);
+	u32 *sinf = kmalloc(sizeof(u32) * (hotkey->num_sifr + 1), GFP_KERNEL);
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_write_brightness");
 
@@ -465,7 +481,8 @@ static unsigned long acpi_pcc_write_brig
 		return_VALUE(-EINVAL);
 
 	if (!sinf) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate %li bytes\n",
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't allocate %li bytes\n",
 		       sizeof(u32) * hotkey->num_sifr));
 		return_VALUE(-EFAULT);
 	}
@@ -476,7 +493,8 @@ static unsigned long acpi_pcc_write_brig
 	write_string[count] = '\0';
 
 	if (!acpi_pcc_retrieve_biosdata(hotkey, sinf)) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't retrieve BIOS data\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't retrieve BIOS data\n"));
 		goto end;
 	}
 
@@ -490,45 +508,52 @@ end:
 	return_VALUE(count);
 }
 
-static ssize_t acpi_pcc_write_ac_brightness(struct file *file, const char __user *buffer,
+static ssize_t acpi_pcc_write_ac_brightness(struct file *file,
+					 const char __user *buffer,
 					 size_t count, loff_t *ppos)
 {
-	return acpi_pcc_write_brightness(file, buffer, count, SINF_AC_MIN_BRIGHT,
+	return acpi_pcc_write_brightness(file, buffer, count,
+					 SINF_AC_MIN_BRIGHT,
 					 SINF_AC_MAX_BRIGHT,
 					 SINF_AC_CUR_BRIGHT);
 }
 
-static ssize_t acpi_pcc_write_dc_brightness(struct file *file, const char __user *buffer,
+static ssize_t acpi_pcc_write_dc_brightness(struct file *file,
+					 const char __user *buffer,
 					 size_t count, loff_t *ppos)
 {
-	return acpi_pcc_write_brightness(file, buffer, count, SINF_DC_MIN_BRIGHT,
+	return acpi_pcc_write_brightness(file, buffer, count,
+					 SINF_DC_MIN_BRIGHT,
 					 SINF_DC_MAX_BRIGHT,
 					 SINF_DC_CUR_BRIGHT);
 }
 
-static ssize_t acpi_pcc_write_no_brightness(struct file *file, const char __user *buffer,
+static ssize_t acpi_pcc_write_no_brightness(struct file *file,
+					 const char __user *buffer,
 					 size_t count, loff_t *ppos)
 {
-	return acpi_pcc_write_brightness(file, buffer, count, SINF_AC_MIN_BRIGHT,
+	return acpi_pcc_write_brightness(file, buffer, count,
+					 SINF_AC_MIN_BRIGHT,
 					 SINF_AC_MAX_BRIGHT,
 					 SINF_AC_CUR_BRIGHT);
 }
 
-static ssize_t acpi_pcc_write_mute (struct file *file,
+static ssize_t acpi_pcc_write_mute(struct file *file,
 				    const char __user *buffer,
 				    size_t count, loff_t *ppos)
 {
 	return acpi_pcc_write_single_flag(file, buffer, count, SINF_MUTE);
 }
 
-static ssize_t acpi_pcc_write_sticky_key (struct file *file,
+static ssize_t acpi_pcc_write_sticky_key(struct file *file,
 					  const char __user *buffer,
 					  size_t count, loff_t *ppos)
 {
 	return acpi_pcc_write_single_flag(file, buffer, count, SINF_STICKY_KEY);
 }
 
-static ssize_t acpi_pcc_write_keyinput(struct file *file, const char __user *buffer,
+static ssize_t acpi_pcc_write_keyinput(struct file *file,
+					 const char __user *buffer,
 					 size_t count, loff_t *ppos)
 {
 	struct seq_file		*seq = (struct seq_file *)file->private_data;
@@ -547,8 +572,10 @@ static ssize_t acpi_pcc_write_keyinput(s
 
 	write_string[count] = '\0';
 
-	if (sscanf(write_string, "%i", &key_mode) == 1 && (key_mode == 0 || key_mode == 1)) {
-		keyinput = (struct pcc_keyinput *)input_get_drvdata(hotkey->input_dev);
+	if (sscanf(write_string, "%i", &key_mode) == 1 &&
+				(key_mode == 0 || key_mode == 1)) {
+		keyinput = (struct pcc_keyinput *)input_get_drvdata(
+							hotkey->input_dev);
 		keyinput->key_mode = key_mode;
 	}
 
@@ -556,8 +583,8 @@ static ssize_t acpi_pcc_write_keyinput(s
 }
 
 /* --------------------------------------------------------------------------
-                            hotkey driver
-   -------------------------------------------------------------------------- */
+ *                          hotkey driver
+ * -------------------------------------------------------------------------- */
 static void acpi_pcc_generete_keyinput(struct acpi_hotkey *hotkey)
 {
 	struct input_dev    *hotk_input_dev = hotkey->input_dev;
@@ -568,7 +595,8 @@ static void acpi_pcc_generete_keyinput(s
 		/*  0 */ -1,
 		/*  1 */ KEY_BRIGHTNESSDOWN,
 		/*  2 */ KEY_BRIGHTNESSUP,
-		/*  3 */ -1, /* vga/lcd switch event is not occur on hotkey driver. */
+		/*  3 */ -1, /* vga/lcd switch event is not occur on
+				hotkey driver. */
 		/*  4 */ KEY_MUTE,
 		/*  5 */ KEY_VOLUMEDOWN,
 		/*  6 */ KEY_VOLUMEUP,
@@ -580,11 +608,12 @@ static void acpi_pcc_generete_keyinput(s
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_generete_keyinput");
 
-	if (keyinput->key_mode == 0) { return_VOID; }
+	if (keyinput->key_mode == 0)
+		return_VOID;
 
 	hkey_num = hinf & 0xf;
 
-	if ((       0 > hkey_num	   ) ||
+	if ((0 > hkey_num) ||
 	    (hkey_num > ARRAY_SIZE(key_map))) {
 		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
 				  "hotkey number out of range: %d\n",
@@ -609,12 +638,13 @@ static int acpi_pcc_hotkey_get_key(struc
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_hotkey_get_key");
 
-	status = acpi_evaluate_integer(hotkey->handle, METHOD_HKEY_QUERY, NULL, &result);
-	if (likely(ACPI_SUCCESS(status))) {
+	status = acpi_evaluate_integer(hotkey->handle, METHOD_HKEY_QUERY,
+								NULL, &result);
+	if (likely(ACPI_SUCCESS(status)))
 		hotkey->status = result;
-	} else {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "error getting hotkey status\n"));
-	}
+	else
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"error getting hotkey status\n"));
 
 	return_VALUE(status == AE_OK);
 }
@@ -625,11 +655,13 @@ void acpi_pcc_hotkey_notify(acpi_handle 
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_hotkey_notify");
 
-	switch(event) {
+	switch (event) {
 	case HKEY_NOTIFY:
 		if (acpi_pcc_hotkey_get_key(hotkey)) {
-			/* generate event like '"pcc HKEY 00000080 00000084"' when Fn+F4 pressed */
-			acpi_bus_generate_proc_event(hotkey->device, event, hotkey->status);
+			/* generate event like '"pcc HKEY 00000080 00000084"'
+			 * when Fn+F4 pressed */
+			acpi_bus_generate_proc_event(hotkey->device, event,
+								hotkey->status);
 		}
 		acpi_pcc_generete_keyinput(hotkey);
 		break;
@@ -641,80 +673,102 @@ void acpi_pcc_hotkey_notify(acpi_handle 
 }
 
 /* --------------------------------------------------------------------------
-                              FS Interface (/proc)
-   -------------------------------------------------------------------------- */
+ *                            FS Interface (/proc)
+ * -------------------------------------------------------------------------- */
 /* oepn proc file fs*/
 SEQ_OPEN_FS(acpi_pcc_dc_brightness_open_fs, acpi_pcc_dc_brightness_show);
 SEQ_OPEN_FS(acpi_pcc_numbatteries_open_fs,  acpi_pcc_numbatteries_show);
 SEQ_OPEN_FS(acpi_pcc_lcdtype_open_fs,  acpi_pcc_lcdtype_show);
-SEQ_OPEN_FS(acpi_pcc_ac_brightness_max_open_fs, acpi_pcc_ac_brightness_max_show);
-SEQ_OPEN_FS(acpi_pcc_ac_brightness_min_open_fs,  acpi_pcc_ac_brightness_min_show);
+SEQ_OPEN_FS(acpi_pcc_ac_brightness_max_open_fs,
+			acpi_pcc_ac_brightness_max_show);
+SEQ_OPEN_FS(acpi_pcc_ac_brightness_min_open_fs,
+			acpi_pcc_ac_brightness_min_show);
 SEQ_OPEN_FS(acpi_pcc_ac_brightness_open_fs, acpi_pcc_ac_brightness_show);
-SEQ_OPEN_FS(acpi_pcc_dc_brightness_max_open_fs, acpi_pcc_dc_brightness_max_show);
-SEQ_OPEN_FS(acpi_pcc_dc_brightness_min_open_fs, acpi_pcc_dc_brightness_min_show);
+SEQ_OPEN_FS(acpi_pcc_dc_brightness_max_open_fs,
+			acpi_pcc_dc_brightness_max_show);
+SEQ_OPEN_FS(acpi_pcc_dc_brightness_min_open_fs,
+			acpi_pcc_dc_brightness_min_show);
 SEQ_OPEN_FS(acpi_pcc_brightness_open_fs,  acpi_pcc_brightness_show);
 SEQ_OPEN_FS(acpi_pcc_mute_open_fs, acpi_pcc_mute_show);
 SEQ_OPEN_FS(acpi_pcc_version_open_fs, acpi_pcc_version_show);
 SEQ_OPEN_FS(acpi_pcc_keyinput_open_fs, acpi_pcc_keyinput_show);
 SEQ_OPEN_FS(acpi_pcc_sticky_key_open_fs, acpi_pcc_sticky_key_show);
 
-typedef struct file_operations fops_t;
-static fops_t acpi_pcc_numbatteries_fops = SEQ_FILEOPS_R (acpi_pcc_numbatteries_open_fs);
-static fops_t acpi_pcc_lcdtype_fops = SEQ_FILEOPS_R (acpi_pcc_lcdtype_open_fs);
-static fops_t acpi_pcc_mute_fops = SEQ_FILEOPS_RW(acpi_pcc_mute_open_fs, acpi_pcc_write_mute);
-static fops_t acpi_pcc_ac_brightness_fops = SEQ_FILEOPS_RW(acpi_pcc_ac_brightness_open_fs, acpi_pcc_write_ac_brightness);
-static fops_t acpi_pcc_ac_brightness_max_fops = SEQ_FILEOPS_R(acpi_pcc_ac_brightness_max_open_fs);
-static fops_t acpi_pcc_ac_brightness_min_fops = SEQ_FILEOPS_R(acpi_pcc_ac_brightness_min_open_fs);
-static fops_t acpi_pcc_dc_brightness_fops = SEQ_FILEOPS_RW(acpi_pcc_dc_brightness_open_fs, acpi_pcc_write_dc_brightness);
-static fops_t acpi_pcc_dc_brightness_max_fops = SEQ_FILEOPS_R(acpi_pcc_dc_brightness_max_open_fs);
-static fops_t acpi_pcc_dc_brightness_min_fops = SEQ_FILEOPS_R(acpi_pcc_dc_brightness_min_open_fs);
-static fops_t acpi_pcc_brightness_fops = SEQ_FILEOPS_RW(acpi_pcc_brightness_open_fs, acpi_pcc_write_no_brightness);
-static fops_t acpi_pcc_sticky_key_fops = SEQ_FILEOPS_RW(acpi_pcc_sticky_key_open_fs, acpi_pcc_write_sticky_key);
-static fops_t acpi_pcc_keyinput_fops = SEQ_FILEOPS_RW(acpi_pcc_keyinput_open_fs, acpi_pcc_write_keyinput);
-static fops_t acpi_pcc_version_fops = SEQ_FILEOPS_R (acpi_pcc_version_open_fs);
+static struct file_operations acpi_pcc_numbatteries_fops = SEQ_FILEOPS_R(
+				acpi_pcc_numbatteries_open_fs);
+static struct file_operations acpi_pcc_lcdtype_fops = SEQ_FILEOPS_R(
+						acpi_pcc_lcdtype_open_fs);
+static struct file_operations acpi_pcc_mute_fops = SEQ_FILEOPS_RW
+		(acpi_pcc_mute_open_fs, acpi_pcc_write_mute);
+static struct file_operations acpi_pcc_ac_brightness_fops = SEQ_FILEOPS_RW(
+	acpi_pcc_ac_brightness_open_fs, acpi_pcc_write_ac_brightness);
+static struct file_operations acpi_pcc_ac_brightness_max_fops = SEQ_FILEOPS_R(
+				acpi_pcc_ac_brightness_max_open_fs);
+static struct file_operations acpi_pcc_ac_brightness_min_fops = SEQ_FILEOPS_R(
+				acpi_pcc_ac_brightness_min_open_fs);
+static struct file_operations acpi_pcc_dc_brightness_fops = SEQ_FILEOPS_RW(
+		acpi_pcc_dc_brightness_open_fs, acpi_pcc_write_dc_brightness);
+static struct file_operations acpi_pcc_dc_brightness_max_fops = SEQ_FILEOPS_R(
+				acpi_pcc_dc_brightness_max_open_fs);
+static struct file_operations acpi_pcc_dc_brightness_min_fops = SEQ_FILEOPS_R(
+				acpi_pcc_dc_brightness_min_open_fs);
+static struct file_operations acpi_pcc_brightness_fops = SEQ_FILEOPS_RW(
+		acpi_pcc_brightness_open_fs, acpi_pcc_write_no_brightness);
+static struct file_operations acpi_pcc_sticky_key_fops = SEQ_FILEOPS_RW(
+		acpi_pcc_sticky_key_open_fs, acpi_pcc_write_sticky_key);
+static struct file_operations acpi_pcc_keyinput_fops = SEQ_FILEOPS_RW(
+				acpi_pcc_keyinput_open_fs,
+				acpi_pcc_write_keyinput);
+static struct file_operations acpi_pcc_version_fops = SEQ_FILEOPS_R(
+				acpi_pcc_version_open_fs);
 
-typedef struct _ProcItem
-{
-	const char* name;
+struct proc_item {
+	const char *name;
 	struct file_operations *fops;
 	mode_t flag;
-} ProcItem;
+};
 
 /* Note: These functions map *exactly* to the SINF/SSET functions */
-ProcItem pcc_proc_items_sifr[] =
+struct proc_item pcc_proc_items_sifr[] =
 {
 	{ "num_batteries",      &acpi_pcc_numbatteries_fops,     S_IRUGO },
 	{ "lcd_type",           &acpi_pcc_lcdtype_fops,          S_IRUGO },
-	{ "ac_brightness_max" , &acpi_pcc_ac_brightness_max_fops,S_IRUGO },
-	{ "ac_brightness_min" , &acpi_pcc_ac_brightness_min_fops,S_IRUGO },
-	{ "ac_brightness" ,     &acpi_pcc_ac_brightness_fops,    S_IFREG | S_IRUGO | S_IWUSR },
-	{ "dc_brightness_max" , &acpi_pcc_dc_brightness_max_fops,S_IRUGO },
-	{ "dc_brightness_min" , &acpi_pcc_dc_brightness_min_fops,S_IRUGO },
-	{ "dc_brightness" ,     &acpi_pcc_dc_brightness_fops,    S_IFREG | S_IRUGO | S_IWUSR },
-	{ "brightness" ,        &acpi_pcc_brightness_fops,    S_IFREG | S_IRUGO | S_IWUSR },
-	{ "mute",               &acpi_pcc_mute_fops,             S_IFREG | S_IRUGO | S_IWUSR },
+	{ "ac_brightness_max", &acpi_pcc_ac_brightness_max_fops, S_IRUGO },
+	{ "ac_brightness_min", &acpi_pcc_ac_brightness_min_fops, S_IRUGO },
+	{ "ac_brightness",     &acpi_pcc_ac_brightness_fops,    S_IFREG |
+							S_IRUGO | S_IWUSR },
+	{ "dc_brightness_max", &acpi_pcc_dc_brightness_max_fops, S_IRUGO },
+	{ "dc_brightness_min", &acpi_pcc_dc_brightness_min_fops, S_IRUGO },
+	{ "dc_brightness",     &acpi_pcc_dc_brightness_fops,    S_IFREG |
+							S_IRUGO | S_IWUSR },
+	{ "brightness",        &acpi_pcc_brightness_fops,    S_IFREG |
+							S_IRUGO | S_IWUSR },
+	{ "mute",               &acpi_pcc_mute_fops,             S_IFREG |
+							S_IRUGO | S_IWUSR },
 	{ NULL, NULL, 0 },
 };
 
-ProcItem pcc_proc_items[] =
+struct proc_item pcc_proc_items[] =
 {
-	{ "sticky_key",		&acpi_pcc_sticky_key_fops,	 S_IFREG | S_IRUGO | S_IWUSR },
-	{ "keyinput",           &acpi_pcc_keyinput_fops,         S_IFREG | S_IRUGO | S_IWUSR },
-	{ "version",            &acpi_pcc_version_fops,          S_IRUGO },
-	{ NULL, NULL, 0 },
+	{"sticky_key", &acpi_pcc_sticky_key_fops, S_IFREG | S_IRUGO | S_IWUSR },
+	{"keyinput", &acpi_pcc_keyinput_fops,     S_IFREG | S_IRUGO | S_IWUSR },
+	{"version",            &acpi_pcc_version_fops,          S_IRUGO },
+	{NULL, NULL, 0 },
 };
 
 static int acpi_pcc_add_device(struct acpi_device *device,
-                                      ProcItem *proc_items,
-                                      int num)
+					struct proc_item *proc_items,
+					int num)
 {
-	struct proc_dir_entry* proc;
-	ProcItem* item;
+	struct proc_dir_entry *proc;
+	struct proc_item *item;
 	int i;
-	struct acpi_hotkey *hotkey = (struct acpi_hotkey*)acpi_driver_data(device);
+	struct acpi_hotkey *hotkey = (struct acpi_hotkey *)acpi_driver_data(
+									device);
 
 	for (item = proc_items, i = 0; item->name && i < num; ++item, ++i) {
-		proc = create_proc_entry(item->name, item->flag, hotkey->proc_dir_entry);
+		proc = create_proc_entry(item->name, item->flag,
+						hotkey->proc_dir_entry);
 		if (likely(proc)) {
 			proc->proc_fops = item->fops;
 			proc->data = hotkey;
@@ -722,7 +776,8 @@ static int acpi_pcc_add_device(struct ac
 		} else {
 			while (i-- > 0) {
 				item--;
-				remove_proc_entry(item->name, hotkey->proc_dir_entry);
+				remove_proc_entry(item->name,
+					hotkey->proc_dir_entry);
 			}
 			return -ENODEV;
 		}
@@ -732,8 +787,9 @@ static int acpi_pcc_add_device(struct ac
 
 static int acpi_pcc_proc_init(struct acpi_device *device)
 {
-	struct proc_dir_entry* acpi_pcc_dir;
-	struct acpi_hotkey *hotkey = (struct acpi_hotkey*)acpi_driver_data(device);
+	struct proc_dir_entry *acpi_pcc_dir;
+	struct acpi_hotkey *hotkey = (struct acpi_hotkey *)acpi_driver_data(
+									device);
 	acpi_status status;
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_proc_init");
@@ -741,15 +797,19 @@ static int acpi_pcc_proc_init(struct acp
 	acpi_pcc_dir = proc_mkdir(PROC_PCC, acpi_root_dir);
 
 	if (unlikely(!acpi_pcc_dir)) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't create dir in /proc\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't create dir in /proc\n"));
 		return_VALUE(-ENODEV);
 	}
 
 	acpi_pcc_dir->owner = THIS_MODULE;
 	hotkey->proc_dir_entry = acpi_pcc_dir;
 
-	status =  acpi_pcc_add_device(device, pcc_proc_items_sifr, hotkey->num_sifr);
-	status |= acpi_pcc_add_device(device, pcc_proc_items, sizeof(pcc_proc_items)/sizeof(ProcItem));
+	status =  acpi_pcc_add_device(device, pcc_proc_items_sifr,
+				hotkey->num_sifr);
+	status |= acpi_pcc_add_device(device, pcc_proc_items,
+				sizeof(pcc_proc_items)/
+				sizeof(struct proc_item));
 	if (unlikely(status)) {
 		remove_proc_entry(PROC_PCC, acpi_root_dir);
 		hotkey->proc_dir_entry = NULL;
@@ -760,23 +820,24 @@ static int acpi_pcc_proc_init(struct acp
 }
 
 static void acpi_pcc_remove_device(struct acpi_device *device,
-                                          ProcItem *proc_items,
-                                          int num)
+					struct proc_item *proc_items,
+					int num)
 {
-	struct acpi_hotkey *hotkey = (struct acpi_hotkey*)acpi_driver_data(device);
-	ProcItem* item;
+	struct acpi_hotkey *hotkey = (struct acpi_hotkey *)acpi_driver_data(
+									device);
+	struct proc_item *item;
 	int i;
 
-	for (item = proc_items, i = 0; item->name != NULL && i < num; ++item, ++i) {
+	for (item = proc_items, i = 0; item->name != NULL && i < num;
+								++item, ++i)
 		remove_proc_entry(item->name, hotkey->proc_dir_entry);
-	}
 
 	return;
 }
 
 /* --------------------------------------------------------------------------
-                             input init
-   -------------------------------------------------------------------------- */
+ *                           input init
+ * -------------------------------------------------------------------------- */
 static int acpi_pcc_init_input(struct acpi_hotkey *hotkey)
 {
 	struct input_dev *hotk_input_dev;
@@ -784,24 +845,17 @@ static int acpi_pcc_init_input(struct ac
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_init_input");
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
 	hotk_input_dev = input_allocate_device();
 	if (!hotk_input_dev) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate input device for hotkey"));
-		return_VALUE(-ENOMEM);
-	}
-#else
-	hotk_input_dev = kcalloc(1, sizeof(struct input_dev),GFP_KERNEL);
-	if (hotk_input_dev == NULL) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate mem for hotkey"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't allocate input device for hotkey"));
 		return_VALUE(-ENOMEM);
 	}
-#endif
-
-	pcc_keyinput = kcalloc(1,sizeof(struct pcc_keyinput),GFP_KERNEL);
+	pcc_keyinput = kcalloc(1, sizeof(struct pcc_keyinput), GFP_KERNEL);
 
 	if (pcc_keyinput == NULL) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate mem for hotkey"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't allocate mem for hotkey"));
 		input_unregister_device(hotk_input_dev);
 		return_VALUE(-ENOMEM);
 	}
@@ -838,8 +892,8 @@ static int acpi_pcc_init_input(struct ac
 }
 
 /* --------------------------------------------------------------------------
-                         module init
-   -------------------------------------------------------------------------- */
+ *                       module init
+ * -------------------------------------------------------------------------- */
 
 static int acpi_pcc_hotkey_resume(struct acpi_device *device)
 {
@@ -848,16 +902,19 @@ static int acpi_pcc_hotkey_resume(struct
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_hotkey_resume");
 
-	if (device == NULL || hotkey == NULL) { return_VALUE(-EINVAL); }
+	if (device == NULL || hotkey == NULL)
+		return_VALUE(-EINVAL);
 
-	ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Sticky mode restore: %d\n", hotkey->sticky_mode));
+	ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+		"Sticky mode restore: %d\n", hotkey->sticky_mode));
 
-	status = acpi_pcc_write_sset(hotkey, SINF_STICKY_KEY, hotkey->sticky_mode);
+	status = acpi_pcc_write_sset(hotkey, SINF_STICKY_KEY,
+		hotkey->sticky_mode);
 
 	return_VALUE(status == AE_OK ? 0 : -EINVAL);
 }
 
-static int acpi_pcc_hotkey_add (struct acpi_device *device)
+static int acpi_pcc_hotkey_add(struct acpi_device *device)
 {
 	acpi_status		status = AE_OK;
 	struct acpi_hotkey	*hotkey = NULL;
@@ -865,9 +922,8 @@ static int acpi_pcc_hotkey_add (struct a
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_hotkey_add");
 
-	if (!device) {
+	if (!device)
 		return_VALUE(-EINVAL);
-	}
 
 	num_sifr = acpi_pcc_get_sqty(device);
 
@@ -878,7 +934,8 @@ static int acpi_pcc_hotkey_add (struct a
 
 	hotkey = kmalloc(sizeof(struct acpi_hotkey), GFP_KERNEL);
 	if (!hotkey) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Couldn't allocate mem for hotkey"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Couldn't allocate mem for hotkey"));
 		return_VALUE(-ENOMEM);
 	}
 
@@ -898,14 +955,16 @@ static int acpi_pcc_hotkey_add (struct a
 			hotkey);
 
 	if (ACPI_FAILURE(status)) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Error installing notify handler\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error installing notify handler\n"));
 		kfree(hotkey);
 		return_VALUE(-ENODEV);
 	}
 
 	result = acpi_pcc_init_input(hotkey);
 	if (result) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Error installing keyinput handler\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error installing keyinput handler\n"));
 		kfree(hotkey);
 		return_VALUE(result);
 	}
@@ -919,13 +978,13 @@ static int __init acpi_pcc_init(void)
 
 	ACPI_FUNCTION_TRACE("acpi_pcc_init");
 
-	if (acpi_disabled) {
+	if (acpi_disabled)
 		return_VALUE(-ENODEV);
-	}
 
 	result = acpi_bus_register_driver(&acpi_pcc_driver);
 	if (result < 0) {
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Error registering hotkey driver\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error registering hotkey driver\n"));
 		return_VALUE(-ENODEV);
 	}
 
@@ -945,8 +1004,10 @@ static int acpi_pcc_hotkey_remove(struct
 		return_VALUE(-EINVAL);
 
 	if (hotkey->proc_dir_entry) {
-		acpi_pcc_remove_device(device, pcc_proc_items_sifr, hotkey->num_sifr);
-		acpi_pcc_remove_device(device, pcc_proc_items, sizeof(pcc_proc_items)/sizeof(ProcItem));
+		acpi_pcc_remove_device(device, pcc_proc_items_sifr,
+			hotkey->num_sifr);
+		acpi_pcc_remove_device(device, pcc_proc_items,
+			sizeof(pcc_proc_items)/sizeof(struct proc_item));
 		remove_proc_entry(PROC_PCC, acpi_root_dir);
 	}
 
@@ -954,7 +1015,8 @@ static int acpi_pcc_hotkey_remove(struct
 		    ACPI_DEVICE_NOTIFY, acpi_pcc_hotkey_notify);
 
 	if (ACPI_FAILURE(status))
-		ACPI_DEBUG_PRINT((ACPI_DB_ERROR, "Error removing notify handler\n"));
+		ACPI_DEBUG_PRINT((ACPI_DB_ERROR,
+			"Error removing notify handler\n"));
 
 	input_unregister_device(hotkey->input_dev);
 
