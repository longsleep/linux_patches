From alan@linux.intel.com  Wed Jan 27 15:40:11 2010
From: Alan Cox <alan@linux.intel.com>
Date: Mon, 18 Jan 2010 15:33:18 +0000
Subject: Staging: et131x: Kill off TXDMA_t
To: greg@kroah.com
Message-ID: <20100118153317.6884.41049.stgit@localhost.localdomain>


All the contents are clean so kill off the top level typedefs

Signed-off-by: Alan Cox <alan@linux.intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---

 drivers/staging/et131x/et1310_address_map.h |    8 ++++----
 drivers/staging/et131x/et1310_tx.c          |    2 +-
 2 files changed, 5 insertions(+), 5 deletions(-)


--- a/drivers/staging/et131x/et1310_address_map.h
+++ b/drivers/staging/et131x/et1310_address_map.h
@@ -253,7 +253,7 @@ extern inline void add_12bit(u32 *v, int
  * Tx DMA Module of JAGCore Address Mapping
  * Located at address 0x1000
  */
-typedef struct _TXDMA_t {		/* Location: */
+struct txdma_regs {			/* Location: */
 	u32 csr;			/*  0x1000 */
 	u32 pr_base_hi;			/*  0x1004 */
 	u32 pr_base_lo;			/*  0x1008 */
@@ -280,7 +280,7 @@ typedef struct _TXDMA_t {		/* Location: 
 	u32 DroppedTLPCount;		/*  0x105c */
 	u32 NewServiceComplete;		/*  0x1060 */
 	u32 EthernetPacketCount;	/*  0x1064 */
-} TXDMA_t, *PTXDMA_t;
+};
 
 /* END OF TXDMA REGISTER ADDRESS MAP */
 
@@ -1667,9 +1667,9 @@ typedef struct _ADDRESS_MAP_t {
 	struct global_regs global;
 	/* unused section of global address map */
 	u8 unused_global[4096 - sizeof(struct global_regs)];
-	TXDMA_t txdma;
+	struct txdma_regs txdma;
 	/* unused section of txdma address map */
-	u8 unused_txdma[4096 - sizeof(TXDMA_t)];
+	u8 unused_txdma[4096 - sizeof(struct txdma_regs)];
 	struct rxdma_regs rxdma;
 	/* unused section of rxdma address map */
 	u8 unused_rxdma[4096 - sizeof(struct rxdma_regs)];
--- a/drivers/staging/et131x/et1310_tx.c
+++ b/drivers/staging/et131x/et1310_tx.c
@@ -200,7 +200,7 @@ void et131x_tx_dma_memory_free(struct et
  */
 void ConfigTxDmaRegs(struct et131x_adapter *etdev)
 {
-	struct _TXDMA_t __iomem *txdma = &etdev->regs->txdma;
+	struct txdma_regs __iomem *txdma = &etdev->regs->txdma;
 
 	/* Load the hardware with the start of the transmit descriptor ring. */
 	writel((u32) ((u64)etdev->tx_ring.tx_desc_ring_pa >> 32),
