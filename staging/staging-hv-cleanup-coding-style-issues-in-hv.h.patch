From foo@baz Mon Aug 17 17:20:55 PDT 2009
Date: Mon, 17 Aug 2009 17:20:55 -0700
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: Staging: hv: cleanup coding style issues in Hv.h


Cc: Hank Janssen <hjanssen@microsoft.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/hv/Hv.c |   26 ++------
 drivers/staging/hv/Hv.h |  139 ++++++++++++++++++++++--------------------------
 2 files changed, 70 insertions(+), 95 deletions(-)

--- a/drivers/staging/hv/Hv.c
+++ b/drivers/staging/hv/Hv.c
@@ -224,10 +224,7 @@ Description:
 	before any other routines in here are called
 
 --*/
-static int
-HvInit (
-    void
-    )
+int HvInit (void)
 {
 	int ret=0;
     int maxLeaf;
@@ -346,10 +343,7 @@ Description:
 	Cleanup routine. This routine is called normally during driver unloading or exiting.
 
 --*/
-static void
-HvCleanup (
-    void
-    )
+void HvCleanup (void)
 {
 	HV_X64_MSR_HYPERCALL_CONTENTS hypercallMsr;
 
@@ -388,8 +382,7 @@ Description:
 	involves a hypercall.
 
 --*/
-static HV_STATUS
-HvPostMessage(
+HV_STATUS HvPostMessage(
 	HV_CONNECTION_ID connectionId,
 	HV_MESSAGE_TYPE  messageType,
 	void *            payload,
@@ -442,8 +435,7 @@ Description:
 	involves a hypercall.
 
 --*/
-static HV_STATUS
-HvSignalEvent(void)
+HV_STATUS HvSignalEvent(void)
 {
 	HV_STATUS status;
 
@@ -464,10 +456,7 @@ Description:
 	Otherwise, we create and initialize the message and event pages.
 
 --*/
-static int
-HvSynicInit (
-	u32 irqVector
-	)
+int HvSynicInit (u32 irqVector)
 {
 	u64			version;
 	HV_SYNIC_SIMP	simp;
@@ -607,10 +596,7 @@ Description:
 	Cleanup routine for HvSynicInit().
 
 --*/
-static void
-HvSynicCleanup(
-	void
-	)
+void HvSynicCleanup(void)
 {
     HV_SYNIC_SINT	sharedSint;
 	HV_SYNIC_SIMP	simp;
--- a/drivers/staging/hv/Hv.h
+++ b/drivers/staging/hv/Hv.h
@@ -29,48 +29,41 @@
 
 #include "include/HvTypes.h"
 #include "include/HvStatus.h"
-/* #include "HvVmApi.h" */
-/* #include "HvKeApi.h" */
-/* #include "HvMmApi.h" */
-/* #include "HvCpuApi.h" */
 #include "include/HvHalApi.h"
 #include "include/HvVpApi.h"
-/* #include "HvTrApi.h" */
 #include "include/HvSynicApi.h"
-/* #include "HvAmApi.h" */
-/* #include "HvHkApi.h" */
-/* #include "HvValApi.h" */
 #include "include/HvHcApi.h"
 #include "include/HvPtApi.h"
 
-enum
-{
-    VMBUS_MESSAGE_CONNECTION_ID = 1,
-    VMBUS_MESSAGE_PORT_ID       = 1,
-    VMBUS_EVENT_CONNECTION_ID   = 2,
-    VMBUS_EVENT_PORT_ID         = 2,
-    VMBUS_MONITOR_CONNECTION_ID = 3,
-    VMBUS_MONITOR_PORT_ID       = 3,
-    VMBUS_MESSAGE_SINT          = 2
+enum {
+	VMBUS_MESSAGE_CONNECTION_ID	= 1,
+	VMBUS_MESSAGE_PORT_ID		= 1,
+	VMBUS_EVENT_CONNECTION_ID	= 2,
+	VMBUS_EVENT_PORT_ID		= 2,
+	VMBUS_MONITOR_CONNECTION_ID	= 3,
+	VMBUS_MONITOR_PORT_ID		= 3,
+	VMBUS_MESSAGE_SINT		= 2,
 };
 
 /* #defines */
 
-#define HV_PRESENT_BIT				0x80000000
+#define HV_PRESENT_BIT			0x80000000
 
-#define HV_XENLINUX_GUEST_ID_LO     0x00000000
+#define HV_XENLINUX_GUEST_ID_LO		0x00000000
 #define HV_XENLINUX_GUEST_ID_HI		0x0B00B135
-#define HV_XENLINUX_GUEST_ID		(((u64)HV_XENLINUX_GUEST_ID_HI << 32) | HV_XENLINUX_GUEST_ID_LO)
+#define HV_XENLINUX_GUEST_ID		(((u64)HV_XENLINUX_GUEST_ID_HI << 32) \
+					  | HV_XENLINUX_GUEST_ID_LO)
 
 #define HV_LINUX_GUEST_ID_LO		0x00000000
 #define HV_LINUX_GUEST_ID_HI		0xB16B00B5
-#define HV_LINUX_GUEST_ID			(((u64)HV_LINUX_GUEST_ID_HI << 32) | HV_LINUX_GUEST_ID_LO)
+#define HV_LINUX_GUEST_ID		(((u64)HV_LINUX_GUEST_ID_HI << 32) | \
+					   HV_LINUX_GUEST_ID_LO)
 
-#define HV_CPU_POWER_MANAGEMENT     (1 << 0)
-#define HV_RECOMMENDATIONS_MAX      4
+#define HV_CPU_POWER_MANAGEMENT		(1 << 0)
+#define HV_RECOMMENDATIONS_MAX		4
 
-#define HV_X64_MAX                  5
-#define HV_CAPS_MAX                 8
+#define HV_X64_MAX			5
+#define HV_CAPS_MAX			8
 
 
 #define HV_HYPERCALL_PARAM_ALIGN	sizeof(u64)
@@ -78,46 +71,60 @@ enum
 
 /* Service definitions */
 
-#define HV_SERVICE_PARENT_PORT (0)
-#define HV_SERVICE_PARENT_CONNECTION (0)
+#define HV_SERVICE_PARENT_PORT				(0)
+#define HV_SERVICE_PARENT_CONNECTION			(0)
 
-#define HV_SERVICE_CONNECT_RESPONSE_SUCCESS             (0)
-#define HV_SERVICE_CONNECT_RESPONSE_INVALID_PARAMETER   (1)
-#define HV_SERVICE_CONNECT_RESPONSE_UNKNOWN_SERVICE     (2)
-#define HV_SERVICE_CONNECT_RESPONSE_CONNECTION_REJECTED (3)
+#define HV_SERVICE_CONNECT_RESPONSE_SUCCESS		(0)
+#define HV_SERVICE_CONNECT_RESPONSE_INVALID_PARAMETER	(1)
+#define HV_SERVICE_CONNECT_RESPONSE_UNKNOWN_SERVICE	(2)
+#define HV_SERVICE_CONNECT_RESPONSE_CONNECTION_REJECTED	(3)
 
 #define HV_SERVICE_CONNECT_REQUEST_MESSAGE_ID		(1)
 #define HV_SERVICE_CONNECT_RESPONSE_MESSAGE_ID		(2)
 #define HV_SERVICE_DISCONNECT_REQUEST_MESSAGE_ID	(3)
 #define HV_SERVICE_DISCONNECT_RESPONSE_MESSAGE_ID	(4)
-#define HV_SERVICE_MAX_MESSAGE_ID					(4)
+#define HV_SERVICE_MAX_MESSAGE_ID				(4)
 
 #define HV_SERVICE_PROTOCOL_VERSION (0x0010)
 #define HV_CONNECT_PAYLOAD_BYTE_COUNT 64
 
 /* #define VMBUS_REVISION_NUMBER	6 */
-/* #define VMBUS_PORT_ID			11		// Our local vmbus's port and connection id. Anything >0 is fine */
+
+/* Our local vmbus's port and connection id. Anything >0 is fine */
+/* #define VMBUS_PORT_ID		11 */
 
 /* 628180B8-308D-4c5e-B7DB-1BEB62E62EF4 */
-static const GUID VMBUS_SERVICE_ID = {.Data = {0xb8, 0x80, 0x81, 0x62, 0x8d, 0x30, 0x5e, 0x4c, 0xb7, 0xdb, 0x1b, 0xeb, 0x62, 0xe6, 0x2e, 0xf4} };
+static const GUID VMBUS_SERVICE_ID = {
+	.Data = {
+		0xb8, 0x80, 0x81, 0x62, 0x8d, 0x30, 0x5e, 0x4c,
+		0xb7, 0xdb, 0x1b, 0xeb, 0x62, 0xe6, 0x2e, 0xf4
+	},
+};
 
 #define MAX_NUM_CPUS	1
 
 
 typedef struct {
-	u64					Align8;
-	HV_INPUT_SIGNAL_EVENT	Event;
+	u64 Align8;
+	HV_INPUT_SIGNAL_EVENT Event;
 } HV_INPUT_SIGNAL_EVENT_BUFFER;
 
 typedef struct {
-	u64	GuestId;			/* XenLinux or native Linux. If XenLinux, the hypercall and synic pages has already been initialized */
-	void*	HypercallPage;
-
-	bool	SynICInitialized;
-	/* This is used as an input param to HvCallSignalEvent hypercall. The input param is immutable */
-	/* in our usage and must be dynamic mem (vs stack or global). */
+	/* XenLinux or native Linux. If XenLinux, the hypercall and synic pages
+	 * has already been initialized */
+	u64 GuestId;
+
+	void *HypercallPage;
+
+	bool SynICInitialized;
+
+	/*
+	 * This is used as an input param to HvCallSignalEvent hypercall. The
+	 * input param is immutable in our usage and must be dynamic mem (vs
+	 * stack or global). */
 	HV_INPUT_SIGNAL_EVENT_BUFFER *SignalEventBuffer;
-	HV_INPUT_SIGNAL_EVENT *SignalEventParam; /* 8-bytes aligned of the buffer above */
+	/* 8-bytes aligned of the buffer above */
+	HV_INPUT_SIGNAL_EVENT *SignalEventParam;
 
 	void *synICMessagePage[MAX_NUM_CPUS];
 	void *synICEventPage[MAX_NUM_CPUS];
@@ -128,37 +135,19 @@ extern HV_CONTEXT gHvContext;
 
 /* Hv Interface */
 
-static int
-HvInit(
-    void
-    );
-
-static void
-HvCleanup(
-    void
-    );
-
-static HV_STATUS
-HvPostMessage(
-	HV_CONNECTION_ID connectionId,
-	HV_MESSAGE_TYPE  messageType,
-	void *            payload,
-	size_t           payloadSize
-	);
-
-static HV_STATUS
-HvSignalEvent(
-	void
-	);
-
-static int
-HvSynicInit(
-	u32		irqVector
-	);
-
-static void
-HvSynicCleanup(
-	void
-	);
+extern int HvInit(void);
+
+extern void HvCleanup(void);
+
+extern HV_STATUS HvPostMessage(HV_CONNECTION_ID connectionId,
+			       HV_MESSAGE_TYPE messageType,
+			       void *payload,
+			       size_t payloadSize);
+
+extern HV_STATUS HvSignalEvent(void);
+
+extern int HvSynicInit(u32 irqVector);
+
+extern void HvSynicCleanup(void);
 
 #endif /* __HV_H__ */
