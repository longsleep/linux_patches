From penberg@cs.helsinki.fi  Mon Oct 20 14:29:21 2008
From: Pekka J Enberg <penberg@cs.helsinki.fi>
Date: Fri, 17 Oct 2008 20:57:08 +0300 (EEST)
Subject: Staging: echo: remove annoying "end of function" markers
To: greg@kroah.com
Cc: david@rowetel.com, steveu@coppice.org, linux-kernel@vger.kernel.org
Message-ID: <Pine.LNX.4.64.0810172056010.23852@melkki.cs.Helsinki.FI>


From: Pekka Enberg <penberg@cs.helsinki.fi>

This patch removes the very noisy "end of function" markers that are
very annoying when reading the driver code.

Cc: David Rowe <david@rowetel.com>
Cc: Steve Underwood <steveu@coppice.org>
Signed-off-by: Pekka Enberg <penberg@cs.helsinki.fi>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/echo/bit_operations.h |   10 ----------
 drivers/staging/echo/echo.c           |    7 -------
 drivers/staging/echo/fir.h            |    9 ---------
 3 files changed, 26 deletions(-)

--- a/drivers/staging/echo/bit_operations.h
+++ b/drivers/staging/echo/bit_operations.h
@@ -45,7 +45,6 @@ static __inline__ int top_bit(unsigned i
              : [bits] "rm" (bits));
     return res;
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Find the bit position of the lowest set bit in a word
     \param bits The word to be searched
@@ -61,7 +60,6 @@ static __inline__ int bottom_bit(unsigne
              : [bits] "rm" (bits));
     return res;
 }
-/*- End of function --------------------------------------------------------*/
 #else
 static __inline__ int top_bit(unsigned int bits)
 {
@@ -97,7 +95,6 @@ static __inline__ int top_bit(unsigned i
     }
     return i;
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ int bottom_bit(unsigned int bits)
 {
@@ -133,7 +130,6 @@ static __inline__ int bottom_bit(unsigne
     }
     return i;
 }
-/*- End of function --------------------------------------------------------*/
 #endif
 
 /*! \brief Bit reverse a byte.
@@ -151,7 +147,6 @@ static __inline__ uint8_t bit_reverse8(u
     return ((x & 0xAA) >> 1) | ((x & 0x55) << 1);
 #endif
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Bit reverse a 16 bit word.
     \param data The word to be reversed.
@@ -191,7 +186,6 @@ static __inline__ uint32_t least_signifi
 {
     return (x & (-(int32_t) x));
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Find the most significant one in a word, and return a word
            with just that bit set.
@@ -206,7 +200,6 @@ static __inline__ uint32_t most_signific
     return (x ^ (x >> 1));
 #endif
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Find the parity of a byte.
     \param x The byte to be checked.
@@ -216,7 +209,6 @@ static __inline__ int parity8(uint8_t x)
     x = (x ^ (x >> 4)) & 0x0F;
     return (0x6996 >> x) & 1;
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Find the parity of a 16 bit word.
     \param x The word to be checked.
@@ -227,7 +219,6 @@ static __inline__ int parity16(uint16_t 
     x = (x ^ (x >> 4)) & 0x0F;
     return (0x6996 >> x) & 1;
 }
-/*- End of function --------------------------------------------------------*/
 
 /*! \brief Find the parity of a 32 bit word.
     \param x The word to be checked.
@@ -239,7 +230,6 @@ static __inline__ int parity32(uint32_t 
     x = (x ^ (x >> 4)) & 0x0F;
     return (0x6996 >> x) & 1;
 }
-/*- End of function --------------------------------------------------------*/
 
 #endif
 /*- End of file ------------------------------------------------------------*/
--- a/drivers/staging/echo/echo.c
+++ b/drivers/staging/echo/echo.c
@@ -230,7 +230,6 @@ static __inline__ void lms_adapt_bg(stru
 }
 #endif
 
-/*- End of function --------------------------------------------------------*/
 
 struct oslec_state *oslec_create(int len, int adaption_mode)
 {
@@ -288,7 +287,6 @@ error_oom:
     return NULL;
 }
 EXPORT_SYMBOL_GPL(oslec_create);
-/*- End of function --------------------------------------------------------*/
 
 void oslec_free(struct oslec_state *ec)
 {
@@ -302,14 +300,12 @@ void oslec_free(struct oslec_state *ec)
 	kfree(ec);
 }
 EXPORT_SYMBOL_GPL(oslec_free);
-/*- End of function --------------------------------------------------------*/
 
 void oslec_adaption_mode(struct oslec_state *ec, int adaption_mode)
 {
     ec->adaption_mode = adaption_mode;
 }
 EXPORT_SYMBOL_GPL(oslec_adaption_mode);
-/*- End of function --------------------------------------------------------*/
 
 void oslec_flush(struct oslec_state *ec)
 {
@@ -336,13 +332,11 @@ void oslec_flush(struct oslec_state *ec)
     ec->Pstates = 0;
 }
 EXPORT_SYMBOL_GPL(oslec_flush);
-/*- End of function --------------------------------------------------------*/
 
 void oslec_snapshot(struct oslec_state *ec) {
     memcpy(ec->snapshot, ec->fir_taps16[0], ec->taps*sizeof(int16_t));
 }
 EXPORT_SYMBOL_GPL(oslec_snapshot);
-/*- End of function --------------------------------------------------------*/
 
 /* Dual Path Echo Canceller ------------------------------------------------*/
 
@@ -588,7 +582,6 @@ int16_t oslec_update(struct oslec_state 
     return (int16_t) ec->clean_nlp << 1;
 }
 EXPORT_SYMBOL_GPL(oslec_update);
-/*- End of function --------------------------------------------------------*/
 
 /* This function is seperated from the echo canceller is it is usually called
    as part of the tx process.  See rx HP (DC blocking) filter above, it's
--- a/drivers/staging/echo/fir.h
+++ b/drivers/staging/echo/fir.h
@@ -119,7 +119,6 @@ static __inline__ const int16_t *fir16_c
 #endif
 	return fir->history;
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ void fir16_flush(fir16_state_t *fir)
 {
@@ -129,13 +128,11 @@ static __inline__ void fir16_flush(fir16
     memset(fir->history, 0, fir->taps*sizeof(int16_t));
 #endif
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ void fir16_free(fir16_state_t *fir)
 {
 	kfree(fir->history);
 }
-/*- End of function --------------------------------------------------------*/
 
 #ifdef __bfin__
 static inline int32_t dot_asm(short *x, short *y, int len)
@@ -165,7 +162,6 @@ static inline int32_t dot_asm(short *x, 
    return dot;
 }
 #endif
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ int16_t fir16(fir16_state_t *fir, int16_t sample)
 {
@@ -260,7 +256,6 @@ static __inline__ int16_t fir16(fir16_st
     fir->curr_pos--;
     return (int16_t) (y >> 15);
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ const int16_t *fir32_create(fir32_state_t *fir,
                                               const int32_t *coeffs,
@@ -272,19 +267,16 @@ static __inline__ const int16_t *fir32_c
     fir->history = kcalloc(taps, sizeof(int16_t), GFP_KERNEL);
     return fir->history;
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ void fir32_flush(fir32_state_t *fir)
 {
     memset(fir->history, 0, fir->taps*sizeof(int16_t));
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ void fir32_free(fir32_state_t *fir)
 {
     kfree(fir->history);
 }
-/*- End of function --------------------------------------------------------*/
 
 static __inline__ int16_t fir32(fir32_state_t *fir, int16_t sample)
 {
@@ -306,7 +298,6 @@ static __inline__ int16_t fir32(fir32_st
     fir->curr_pos--;
     return (int16_t) (y >> 15);
 }
-/*- End of function --------------------------------------------------------*/
 
 #endif
 /*- End of file ------------------------------------------------------------*/
