From penberg@cs.helsinki.fi  Tue Apr 21 15:33:56 2009
From: Pekka Enberg <penberg@cs.helsinki.fi>
Date: Wed,  8 Apr 2009 11:14:01 +0300
Subject: Staging: w35und: simplify hal_init_hardware() and hal_halt()
To: greg@kroah.com
Cc: Pavel Machek <pavel@ucw.cz>
Message-ID: <1239178446-12893-6-git-send-email-penberg@cs.helsinki.fi>


Impact: cleanup

Now that hal_halt() is called from wb35_hw_halt() only where
->InitialResource is always set to 4, we can simplify
hal_init_hardware() and hal_halt().

Acked-by: Pavel Machek <pavel@ucw.cz>
Signed-off-by: Pekka Enberg <penberg@cs.helsinki.fi>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/winbond/wbhal_s.h |    1 -
 drivers/staging/winbond/wbusb.c   |   29 +++++++++++------------------
 2 files changed, 11 insertions(+), 19 deletions(-)

--- a/drivers/staging/winbond/wbhal_s.h
+++ b/drivers/staging/winbond/wbhal_s.h
@@ -401,7 +401,6 @@ struct hw_data {
 
 	// For surprise remove
 	u32	SurpriseRemove; // 0: Normal 1: Surprise remove
-	u8	InitialResource;
 	u8	IsKeyPreSet;
 	u8	CalOneTime; // 20060630.1
 
--- a/drivers/staging/winbond/wbusb.c
+++ b/drivers/staging/winbond/wbusb.c
@@ -178,19 +178,6 @@ static const struct ieee80211_ops wbsoft
 // conf_tx: hal_set_cwmin()/hal_set_cwmax;
 };
 
-static void hal_halt(struct hw_data *pHwData, void *ppa_data)
-{
-	switch( pHwData->InitialResource )
-	{
-		case 4:
-		case 3: del_timer_sync(&pHwData->LEDTimer);
-			msleep(100); // Wait for Timer DPC exit 940623.2
-			Wb35Rx_destroy( pHwData ); // Release the Rx
-		case 2: Wb35Tx_destroy( pHwData ); // Release the Tx
-		case 1: Wb35Reg_destroy( pHwData ); // Release the Wb35 Regisster resources
-	}
-}
-
 static void hal_led_control(unsigned long data)
 {
 	struct wbsoft_priv *adapter = (struct wbsoft_priv *) data;
@@ -486,19 +473,15 @@ static int hal_init_hardware(struct ieee
 	pHwData->MaxReceiveLifeTime = DEFAULT_MSDU_LIFE_TIME; // Setting Rx maximum MSDU life time
 	pHwData->FragmentThreshold = DEFAULT_FRAGMENT_THRESHOLD; // Setting default fragment threshold
 
-	pHwData->InitialResource = 1;
 	if (!Wb35Reg_initial(pHwData))
 		goto error_reg_destroy;
 
-	pHwData->InitialResource = 2;
 	if (!Wb35Tx_initial(pHwData))
 		goto error_tx_destroy;
 
-	pHwData->InitialResource = 3;
 	if (!Wb35Rx_initial(pHwData))
 		goto error_rx_destroy;
 
-	pHwData->InitialResource = 4;
 	init_timer(&pHwData->LEDTimer);
 	pHwData->LEDTimer.function = hal_led_control;
 	pHwData->LEDTimer.data = (unsigned long) priv;
@@ -714,6 +697,16 @@ error:
 	return err;
 }
 
+static void hal_halt(struct hw_data *pHwData)
+{
+	del_timer_sync(&pHwData->LEDTimer);
+	/* XXX: Wait for Timer DPC exit. */
+	msleep(100);
+	Wb35Rx_destroy(pHwData);
+	Wb35Tx_destroy(pHwData);
+	Wb35Reg_destroy(pHwData);
+}
+
 static void wb35_hw_halt(struct wbsoft_priv *adapter)
 {
 	Mds_Destroy( adapter );
@@ -726,7 +719,7 @@ static void wb35_hw_halt(struct wbsoft_p
 	msleep(100);// Waiting Irp completed
 
 	// Halt the HAL
-	hal_halt(&adapter->sHwData, NULL);
+	hal_halt(&adapter->sHwData);
 }
 
 
