From abogani@texware.it  Tue Apr 21 15:09:02 2009
From: Alessio Igor Bogani <abogani@texware.it>
Date: Tue, 24 Mar 2009 19:29:45 +0100
Subject: Staging: sxg: replace __FUNCTION__ usages
To: Greg Kroah-Hartman <gregkh@suse.de>
Cc: Alessio Igor Bogani <abogani@texware.it>
Message-ID: <1237919385-12674-1-git-send-email-abogani@texware.it>


__FUNCTION__ is gcc-specific, use __func__

Signed-off-by: Alessio Igor Bogani <abogani@texware.it>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/sxg/sxg.c         |   38 +++++++++++++++++++-------------------
 drivers/staging/sxg/sxg_ethtool.c |    2 +-
 2 files changed, 20 insertions(+), 20 deletions(-)

--- a/drivers/staging/sxg/sxg.c
+++ b/drivers/staging/sxg/sxg.c
@@ -355,7 +355,7 @@ void sxg_remove_msix_isr(struct adapter_
 	for(i=0; i< adapter->nr_msix_entries;i++)
 	{
 		vector = adapter->msi_entries[i].vector;
-		DBG_ERROR("%s : Freeing IRQ vector#%d\n",__FUNCTION__,vector);
+		DBG_ERROR("%s : Freeing IRQ vector#%d\n",__func__,vector);
 		free_irq(vector,netdev);
 	}
 }
@@ -852,7 +852,7 @@ static inline int sxg_read_config(struct
  		 * Get out of here
  		 */
 		printk(KERN_ERR"%s : Could not allocate memory for reading \
-				 EEPROM\n", __FUNCTION__);
+				 EEPROM\n", __func__);
 		return -ENOMEM;
 	}
 
@@ -887,7 +887,7 @@ static inline int sxg_read_config(struct
 	case SXG_CFG_LOAD_ERROR:
 	default:	/* Fix default handler later */
 		printk(KERN_WARNING"%s  : We could not read the config \
-			word. Status = %ld\n", __FUNCTION__, status);
+			word. Status = %ld\n", __func__, status);
 		break;
 	}
 	pci_free_consistent(adapter->pcidev, sizeof(struct sw_cfg_data), data,
@@ -996,7 +996,7 @@ static int sxg_entry_probe(struct pci_de
 		adapter->asictype = SAHARA_REV_B;
 	} else {
 		ASSERT(0);
-		DBG_ERROR("%s Unexpected revision ID %x\n", __FUNCTION__, revision_id);
+		DBG_ERROR("%s Unexpected revision ID %x\n", __func__, revision_id);
 		goto err_out_exit_sxg_probe;
 	}
 	adapter->netdev = netdev;
@@ -1176,9 +1176,9 @@ static int sxg_entry_probe(struct pci_de
 		  smp_processor_id());
 
 	pci_disable_device(pcidev);
-        DBG_ERROR("sxg: %s deallocate device\n", __FUNCTION__);
+        DBG_ERROR("sxg: %s deallocate device\n", __func__);
         kfree(netdev);
-	printk("Exit %s, Sxg driver loading failed..\n", __FUNCTION__);
+	printk("Exit %s, Sxg driver loading failed..\n", __func__);
 
 	return -ENODEV;
 }
@@ -2191,10 +2191,10 @@ static int sxg_entry_open(struct net_dev
 	/*
 	 * The microcode expects it to be downloaded on every open.
 	 */
-	DBG_ERROR("sxg: %s ENTER sxg_download_microcode\n", __FUNCTION__);
+	DBG_ERROR("sxg: %s ENTER sxg_download_microcode\n", __func__);
 	if (sxg_download_microcode(adapter, SXG_UCODE_SYSTEM)) {
 		DBG_ERROR("sxg: %s ENTER sxg_adapter_set_hwaddr\n",
-				__FUNCTION__);
+				__func__);
 		sxg_read_config(adapter);
 	} else {
 		adapter->state = ADAPT_FAIL;
@@ -2307,14 +2307,14 @@ static void __devexit sxg_entry_remove(s
         mmio_start = pci_resource_start(pcidev, 0);
         mmio_len = pci_resource_len(pcidev, 0);
 
-        DBG_ERROR("sxg: %s rel_region(0) start[%x] len[%x]\n", __FUNCTION__,
+        DBG_ERROR("sxg: %s rel_region(0) start[%x] len[%x]\n", __func__,
                   mmio_start, mmio_len);
         release_mem_region(mmio_start, mmio_len);
 
         mmio_start = pci_resource_start(pcidev, 2);
         mmio_len = pci_resource_len(pcidev, 2);
 
-        DBG_ERROR("sxg: %s rel_region(2) start[%x] len[%x]\n", __FUNCTION__,
+        DBG_ERROR("sxg: %s rel_region(2) start[%x] len[%x]\n", __func__,
                   mmio_start, mmio_len);
         release_mem_region(mmio_start, mmio_len);
 
@@ -2400,7 +2400,7 @@ static int sxg_entry_halt(struct net_dev
 	atomic_set(&adapter->pending_allocations, 0);
 	adapter->intrregistered = 0;
 	sxg_remove_isr(adapter);
-	DBG_ERROR("sxg: %s (%s) EXIT\n", __FUNCTION__, dev->name);
+	DBG_ERROR("sxg: %s (%s) EXIT\n", __func__, dev->name);
 	return (STATUS_SUCCESS);
 }
 
@@ -2454,7 +2454,7 @@ static int sxg_send_packets(struct sk_bu
 	u32 status = STATUS_SUCCESS;
 
 	/*
-	 * DBG_ERROR("sxg: %s ENTER sxg_send_packets skb[%p]\n", __FUNCTION__,
+	 * DBG_ERROR("sxg: %s ENTER sxg_send_packets skb[%p]\n", __func__,
 	 *	  skb);
 	 */
 
@@ -3405,7 +3405,7 @@ static int sxg_read_mdio_reg(struct adap
 
 	SXG_TRACE(TRACE_SXG, SxgTraceBuffer, TRACE_NOISY, "WrtMDIO",
 		  adapter, 0, 0, 0);
-	DBG_ERROR("ENTER %s\n", __FUNCTION__);
+	DBG_ERROR("ENTER %s\n", __func__);
 
 	/* Ensure values don't exceed field width */
 	DevAddr &= 0x001F;	/* 5-bit field */
@@ -3441,7 +3441,7 @@ static int sxg_read_mdio_reg(struct adap
 		udelay(100);	/* Timeout in 100us units */
 		READ_REG(HwRegs->MacAmiimIndicator, ValueRead);
 		if (--Timeout == 0) {
-            DBG_ERROR("EXIT %s with STATUS_FAILURE 1\n", __FUNCTION__);
+            DBG_ERROR("EXIT %s with STATUS_FAILURE 1\n", __func__);
 
 			return (STATUS_FAILURE);
 		}
@@ -3462,7 +3462,7 @@ static int sxg_read_mdio_reg(struct adap
 		udelay(100);	/* Timeout in 100us units */
 		READ_REG(HwRegs->MacAmiimIndicator, ValueRead);
 		if (--Timeout == 0) {
-            DBG_ERROR("EXIT %s with STATUS_FAILURE 2\n", __FUNCTION__);
+            DBG_ERROR("EXIT %s with STATUS_FAILURE 2\n", __func__);
 
 			return (STATUS_FAILURE);
 		}
@@ -3472,7 +3472,7 @@ static int sxg_read_mdio_reg(struct adap
 	READ_REG(HwRegs->MacAmiimField, *pValue);
 	*pValue &= 0xFFFF;	/* data is in the lower 16 bits */
 
-	DBG_ERROR("EXIT %s\n", __FUNCTION__);
+	DBG_ERROR("EXIT %s\n", __func__);
 
 	return (STATUS_SUCCESS);
 }
@@ -3545,7 +3545,7 @@ static void sxg_mcast_set_mask(struct ad
 {
 	struct sxg_ucode_regs *sxg_regs = adapter->UcodeRegs;
 
-	DBG_ERROR("%s ENTER (%s) MacFilter[%x] mask[%llx]\n", __FUNCTION__,
+	DBG_ERROR("%s ENTER (%s) MacFilter[%x] mask[%llx]\n", __func__,
 		  adapter->netdev->name, (unsigned int)adapter->MacFilter,
 		  adapter->MulticastMask);
 
@@ -4055,7 +4055,7 @@ static int sxg_adapter_set_hwaddr(struct
 	 *  sxg_dbg_macaddrs(adapter);
 	 */
 	/* DBG_ERROR ("%s AFTER copying from config.macinfo into currmacaddr\n",
-	 *	   		__FUNCTION__);
+	 *	   		__func__);
 	 */
 
 	/* sxg_dbg_macaddrs(adapter); */
@@ -4066,7 +4066,7 @@ static int sxg_adapter_set_hwaddr(struct
 		printk("sxg: Dev is Null\n");
 	}
 
-        DBG_ERROR("%s ENTER (%s)\n", __FUNCTION__, adapter->netdev->name);
+        DBG_ERROR("%s ENTER (%s)\n", __func__, adapter->netdev->name);
 
         if (netif_running(dev)) {
                 return -EBUSY;
--- a/drivers/staging/sxg/sxg_ethtool.c
+++ b/drivers/staging/sxg/sxg_ethtool.c
@@ -278,7 +278,7 @@ static int sxg_nic_get_eeprom(struct net
                  * Get out of here
                  */
                 printk(KERN_ERR"%s : Could not allocate memory for reading \
-                                EEPROM\n", __FUNCTION__);
+                                EEPROM\n", __func__);
                 return -ENOMEM;
         }
 
