From julia@diku.dk  Mon Jul 27 08:38:25 2009
From: Julia Lawall <julia@diku.dk>
Date: Sat, 18 Jul 2009 17:25:30 +0200 (CEST)
Subject: Staging: meilhaus: convert nested spin_lock_irqsave to spin_lock
To: gregkh@suse.de
Message-ID: <Pine.LNX.4.64.0907181724550.26792@ask.diku.dk>


From: Julia Lawall <julia@diku.dk>

If spin_lock_irqsave is called twice in a row with the same second
argument, the interrupt state at the point of the second call overwrites
the value saved by the first call.  Indeed, the second call does not need
to save the interrupt state, so it is changed to a simple spin_lock.

The semantic match that finds this problem is as follows:
(http://www.emn.fr/x-info/coccinelle/)

// <smpl>
@@
expression lock1,lock2;
expression flags;
@@

*spin_lock_irqsave(lock1,flags)
... when != flags
*spin_lock_irqsave(lock2,flags)
// </smpl>

Signed-off-by: Julia Lawall <julia@diku.dk>
Cc: David Kiliani <mail@davidkiliani.de>
Cc: Meilhaus Support <support@meilhaus.de>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>


---
 drivers/staging/meilhaus/me4600_ai.c |   16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

--- a/drivers/staging/meilhaus/me4600_ai.c
+++ b/drivers/staging/meilhaus/me4600_ai.c
@@ -760,7 +760,7 @@ static int me4600_ai_io_single_read(me_s
 	// Mark that StreamConfig is removed.
 	instance->chan_list_len = 0;
 
-	spin_lock_irqsave(instance->ctrl_reg_lock, cpu_flags);
+	spin_lock(instance->ctrl_reg_lock);
 	/// @note Imprtant: Preserve EXT IRQ settings.
 	tmp = inl(instance->ctrl_reg);
 	// Clear FIFOs and dissable interrupts
@@ -824,7 +824,7 @@ static int me4600_ai_io_single_read(me_s
 		   instance->ctrl_reg - instance->reg_base,
 		   instance->single_config[channel].ctrl | tmp);
 
-	spin_unlock_irqrestore(instance->ctrl_reg_lock, cpu_flags);
+	spin_unlock(instance->ctrl_reg_lock);
 
 	if (!(instance->single_config[channel].ctrl & ME4600_AI_CTRL_BIT_EX_TRIG)) {	// Software start
 		inl(instance->start_reg);
@@ -877,7 +877,7 @@ static int me4600_ai_io_single_read(me_s
 	}
 
 	// Restore settings.
-	spin_lock_irqsave(instance->ctrl_reg_lock, cpu_flags);
+	spin_lock(instance->ctrl_reg_lock);
 	tmp = inl(instance->ctrl_reg);
 	// Clear FIFOs and dissable interrupts.
 	tmp &=
@@ -889,7 +889,7 @@ static int me4600_ai_io_single_read(me_s
 	outl(tmp, instance->ctrl_reg);
 	PDEBUG_REG("ctrl_reg outl(0x%lX+0x%lX)=0x%x\n", instance->reg_base,
 		   instance->ctrl_reg - instance->reg_base, tmp);
-	spin_unlock_irqrestore(instance->ctrl_reg_lock, cpu_flags);
+	spin_unlock(instance->ctrl_reg_lock);
 
 	spin_unlock_irqrestore(&instance->subdevice_lock, cpu_flags);
 
@@ -1268,7 +1268,7 @@ static int me4600_ai_io_stream_config(me
 	}
 
 	instance->status = ai_status_none;
-	spin_lock_irqsave(instance->ctrl_reg_lock, cpu_flags);
+	spin_lock(instance->ctrl_reg_lock);
 	// Stop all actions. Block all interrupts. Clear (disable) FIFOs.
 	ctrl =
 	    ME4600_AI_CTRL_BIT_LE_IRQ_RESET | ME4600_AI_CTRL_BIT_HF_IRQ_RESET |
@@ -1290,7 +1290,7 @@ static int me4600_ai_io_stream_config(me
 	outl(tmp | ctrl, instance->ctrl_reg);
 	PDEBUG_REG("ctrl_reg outl(0x%lX+0x%lX)=0x%x\n", instance->reg_base,
 		   instance->ctrl_reg - instance->reg_base, tmp | ctrl);
-	spin_unlock_irqrestore(instance->ctrl_reg_lock, cpu_flags);
+	spin_unlock(instance->ctrl_reg_lock);
 
 	// Write the channel list
 	for (i = 0; i < count; i++) {
@@ -1529,7 +1529,7 @@ static int me4600_ai_io_stream_config(me
 	ctrl |= (ME4600_AI_CTRL_BIT_HF_IRQ | ME4600_AI_CTRL_BIT_SC_IRQ | ME4600_AI_CTRL_BIT_LE_IRQ);	//The last IRQ source (ME4600_AI_CTRL_BIT_LE_IRQ) is unused!
 
 	//Everything is good. Finalize
-	spin_lock_irqsave(instance->ctrl_reg_lock, cpu_flags);
+	spin_lock(instance->ctrl_reg_lock);
 	tmp = inl(instance->ctrl_reg);
 
 	//Preserve EXT IRQ and OFFSET settings. Clean other bits.
@@ -1541,7 +1541,7 @@ static int me4600_ai_io_stream_config(me
 	outl(ctrl | tmp, instance->ctrl_reg);
 	PDEBUG_REG("ctrl_reg outl(0x%lX+0x%lX)=0x%x\n", instance->reg_base,
 		   instance->ctrl_reg - instance->reg_base, ctrl | tmp);
-	spin_unlock_irqrestore(instance->ctrl_reg_lock, cpu_flags);
+	spin_unlock(instance->ctrl_reg_lock);
 
 	//Set the global parameters end exit.
 	instance->chan_list_len = count;
