From alan@linux.intel.com  Mon Oct 26 14:59:10 2009
From: Alan Cox <alan@linux.intel.com>
Date: Tue, 06 Oct 2009 15:50:12 +0100
Subject: Staging: et131x: Kill the RX pending list
To: greg@kroah.com
Message-ID: <20091006145011.8604.36547.stgit@localhost.localdomain>


As with tx there was a pending list Linux doesn't use

Signed-off-by: Alan Cox <alan@linux.intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/et131x/et1310_rx.c |   22 ----------------------
 drivers/staging/et131x/et1310_rx.h |    1 -
 2 files changed, 23 deletions(-)

--- a/drivers/staging/et131x/et1310_rx.c
+++ b/drivers/staging/et131x/et1310_rx.c
@@ -390,7 +390,6 @@ int et131x_rx_dma_memory_alloc(struct et
 	 * lists now.
 	 */
 	INIT_LIST_HEAD(&rx_ring->RecvList);
-	INIT_LIST_HEAD(&rx_ring->RecvPendingList);
 	return 0;
 }
 
@@ -421,14 +420,6 @@ void et131x_rx_dma_memory_free(struct et
 		kmem_cache_free(adapter->RxRing.RecvLookaside, rfd);
 	}
 
-	while (!list_empty(&rx_ring->RecvPendingList)) {
-		rfd = (MP_RFD *) list_entry(rx_ring->RecvPendingList.next,
-					       MP_RFD, list_node);
-		list_del(&rfd->list_node);
-		rfd->Packet = NULL;
-		kmem_cache_free(adapter->RxRing.RecvLookaside, rfd);
-	}
-
 	/* Free Free Buffer Ring 1 */
 	if (rx_ring->pFbr1RingVa) {
 		/* First the packet memory */
@@ -1021,21 +1012,8 @@ PMP_RFD nic_rx_pkts(struct et131x_adapte
  */
 void et131x_reset_recv(struct et131x_adapter *etdev)
 {
-	PMP_RFD rfd;
-	struct list_head *element;
-
 	WARN_ON(list_empty(&etdev->RxRing.RecvList));
 
-	/* Take all the RFD's from the pending list, and stick them on the
-	 * RecvList.
-	 */
-	while (!list_empty(&etdev->RxRing.RecvPendingList)) {
-		element = etdev->RxRing.RecvPendingList.next;
-
-		rfd = (PMP_RFD) list_entry(element, MP_RFD, list_node);
-
-		list_move_tail(&rfd->list_node, &etdev->RxRing.RecvList);
-	}
 }
 
 /**
--- a/drivers/staging/et131x/et1310_rx.h
+++ b/drivers/staging/et131x/et1310_rx.h
@@ -319,7 +319,6 @@ typedef struct _rx_ring_t {
 
 	/* RECV */
 	struct list_head RecvList;
-	struct list_head RecvPendingList;
 	u32 nReadyRecv;
 
 	u32 NumRfd;
