From abogani@texware.it  Tue Apr 21 15:09:30 2009
From: Alessio Igor Bogani <abogani@texware.it>
Date: Tue, 24 Mar 2009 19:30:57 +0100
Subject: Staging: comedi: replace __FUNCTION__ usages
To: Greg Kroah-Hartman <gregkh@suse.de>
Cc: Alessio Igor Bogani <abogani@texware.it>
Message-ID: <1237919457-12941-1-git-send-email-abogani@texware.it>


__FUNCTION__ is gcc-specific, use __func__

Signed-off-by: Alessio Igor Bogani <abogani@texware.it>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/staging/comedi/drivers/ni_660x.c       |    6 +++---
 drivers/staging/comedi/drivers/ni_mio_common.c |   24 ++++++++++++------------
 drivers/staging/comedi/drivers/ni_pcimio.c     |   10 +++++-----
 drivers/staging/comedi/drivers/ni_stc.h        |   14 +++++++-------
 drivers/staging/comedi/drivers/ni_tio.c        |    2 +-
 5 files changed, 28 insertions(+), 28 deletions(-)

--- a/drivers/staging/comedi/drivers/ni_660x.c
+++ b/drivers/staging/comedi/drivers/ni_660x.c
@@ -696,7 +696,7 @@ static enum NI_660x_Register ni_gpct_to_
 		break;
 	default:
 		rt_printk("%s: unhandled register 0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -720,7 +720,7 @@ static inline void ni_660x_write_registe
 		break;
 	default:
 		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __FUNCTION__, reg);
+			__FILE__, __func__, reg);
 		BUG();
 		break;
 	}
@@ -742,7 +742,7 @@ static inline unsigned ni_660x_read_regi
 		break;
 	default:
 		rt_printk("%s: %s: bug! unhandled case (reg=0x%x) in switch.\n",
-			__FILE__, __FUNCTION__, reg);
+			__FILE__, __func__, reg);
 		BUG();
 		break;
 	}
--- a/drivers/staging/comedi/drivers/ni_mio_common.c
+++ b/drivers/staging/comedi/drivers/ni_mio_common.c
@@ -397,7 +397,7 @@ static inline void ni_set_bitfield(struc
 		break;
 	default:
 		rt_printk("Warning %s() called with invalid register\n",
-			__FUNCTION__);
+			__func__);
 		rt_printk("reg is %d\n", reg);
 		break;
 	}
@@ -2845,7 +2845,7 @@ static int ni_m_series_ao_config_chanlis
 			break;
 		default:
 			rt_printk("%s: bug! unhandled ao reference voltage\n",
-				__FUNCTION__);
+				__func__);
 			break;
 		}
 		switch (krange->max + krange->min) {
@@ -2857,7 +2857,7 @@ static int ni_m_series_ao_config_chanlis
 			break;
 		default:
 			rt_printk("%s: bug! unhandled ao offset voltage\n",
-				__FUNCTION__);
+				__func__);
 			break;
 		}
 		if (timed)
@@ -4104,7 +4104,7 @@ static unsigned ni_gpct_to_stc_register(
 		break;
 	default:
 		rt_printk("%s: unhandled register 0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -5229,7 +5229,7 @@ static unsigned ni_old_get_pfi_routing(s
 		return NI_PFI_OUTPUT_G_GATE0;
 		break;
 	default:
-		rt_printk("%s: bug, unhandled case in switch.\n", __FUNCTION__);
+		rt_printk("%s: bug, unhandled case in switch.\n", __func__);
 		break;
 	}
 	return 0;
@@ -5396,7 +5396,7 @@ static int ni_mseries_get_pll_parameters
 	}
 	if (best_period_picosec == 0) {
 		rt_printk("%s: bug, failed to find pll parameters\n",
-			__FUNCTION__);
+			__func__);
 		return -EIO;
 	}
 	*freq_divider = best_div;
@@ -5432,7 +5432,7 @@ static int ni_mseries_set_pll_master_clo
 	if (period_ns < min_period_ns || period_ns > max_period_ns) {
 		rt_printk
 			("%s: you must specify an input clock frequency between %i and %i nanosec "
-			"for the phased-lock loop.\n", __FUNCTION__,
+			"for the phased-lock loop.\n", __func__,
 			min_period_ns, max_period_ns);
 		return -EINVAL;
 	}
@@ -5506,7 +5506,7 @@ static int ni_mseries_set_pll_master_clo
 	if (i == timeout) {
 		rt_printk
 			("%s: timed out waiting for PLL to lock to reference clock source %i with period %i ns.\n",
-			__FUNCTION__, source, period_ns);
+			__func__, source, period_ns);
 		return -ETIMEDOUT;
 	}
 	return 3;
@@ -5543,7 +5543,7 @@ static int ni_set_master_clock(struct co
 				if (period_ns == 0) {
 					rt_printk
 						("%s: we don't handle an unspecified clock period correctly yet, returning error.\n",
-						__FUNCTION__);
+						__func__);
 					return -EINVAL;
 				} else {
 					devpriv->clock_ns = period_ns;
@@ -5566,7 +5566,7 @@ static int ni_valid_rtsi_output_source(s
 			else {
 				rt_printk
 					("%s: invalid source for channel=%i, channel %i is always the RTSI clock for pre-m-series boards.\n",
-					__FUNCTION__, chan,
+					__func__, chan,
 					old_RTSI_clock_channel);
 				return 0;
 			}
@@ -5629,7 +5629,7 @@ static unsigned ni_get_rtsi_routing(stru
 	} else {
 		if (chan == old_RTSI_clock_channel)
 			return NI_RTSI_OUTPUT_RTSI_OSC;
-		rt_printk("%s: bug! should never get here?\n", __FUNCTION__);
+		rt_printk("%s: bug! should never get here?\n", __func__);
 		return 0;
 	}
 }
@@ -5724,7 +5724,7 @@ static int cs5529_wait_for_idle(struct c
 	}
 /* printk("looped %i times waiting for idle\n", i); */
 	if (i == timeout) {
-		rt_printk("%s: %s: timeout\n", __FILE__, __FUNCTION__);
+		rt_printk("%s: %s: timeout\n", __FILE__, __func__);
 		return -ETIME;
 	}
 	return 0;
--- a/drivers/staging/comedi/drivers/ni_pcimio.c
+++ b/drivers/staging/comedi/drivers/ni_pcimio.c
@@ -1351,7 +1351,7 @@ static void m_series_stc_writew(struct c
 	case DIO_Control_Register:
 		rt_printk
 			("%s: FIXME: register 0x%x does not map cleanly on to m-series boards.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		return;
 		break;
 	case G_Autoincrement_Register(0):
@@ -1412,7 +1412,7 @@ static void m_series_stc_writew(struct c
 		   and M_Offset_SCXI_Serial_Data_Out (8 bit) */
 	default:
 		rt_printk("%s: bug! unhandled register=0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return;
 		break;
@@ -1447,7 +1447,7 @@ static uint16_t m_series_stc_readw(struc
 		break;
 	default:
 		rt_printk("%s: bug! unhandled register=0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return 0;
 		break;
@@ -1488,7 +1488,7 @@ static void m_series_stc_writel(struct c
 		break;
 	default:
 		rt_printk("%s: bug! unhandled register=0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return;
 		break;
@@ -1514,7 +1514,7 @@ static uint32_t m_series_stc_readl(struc
 		break;
 	default:
 		rt_printk("%s: bug! unhandled register=0x%x in switch.\n",
-			__FUNCTION__, reg);
+			__func__, reg);
 		BUG();
 		return 0;
 		break;
--- a/drivers/staging/comedi/drivers/ni_stc.h
+++ b/drivers/staging/comedi/drivers/ni_stc.h
@@ -339,7 +339,7 @@ static inline unsigned RTSI_Output_Bit(u
 		max_channel = 6;
 	}
 	if (channel > max_channel) {
-		rt_printk("%s: bug, invalid RTSI_channel=%i\n", __FUNCTION__,
+		rt_printk("%s: bug, invalid RTSI_channel=%i\n", __func__,
 			channel);
 		return 0;
 	}
@@ -1085,7 +1085,7 @@ static inline int M_Offset_Static_AI_Con
 		0x263,
 	};
 	if (((unsigned)i) >= sizeof(offset) / sizeof(offset[0])) {
-		rt_printk("%s: invalid channel=%i\n", __FUNCTION__, i);
+		rt_printk("%s: invalid channel=%i\n", __func__, i);
 		return offset[0];
 	}
 	return offset[i];
@@ -1099,7 +1099,7 @@ static inline int M_Offset_AO_Reference_
 		0x267
 	};
 	if (((unsigned)channel) >= sizeof(offset) / sizeof(offset[0])) {
-		rt_printk("%s: invalid channel=%i\n", __FUNCTION__, channel);
+		rt_printk("%s: invalid channel=%i\n", __func__, channel);
 		return offset[0];
 	}
 	return offset[channel];
@@ -1108,7 +1108,7 @@ static inline unsigned M_Offset_PFI_Outp
 {
 	if (n < 1 || n > NUM_PFI_OUTPUT_SELECT_REGS) {
 		rt_printk("%s: invalid pfi output select register=%i\n",
-			__FUNCTION__, n);
+			__func__, n);
 		return M_Offset_PFI_Output_Select_1;
 	}
 	return M_Offset_PFI_Output_Select_1 + (n - 1) * 2;
@@ -1162,7 +1162,7 @@ static inline unsigned MSeries_PLL_In_So
 	RTSI_channel)
 {
 	if (RTSI_channel > 7) {
-		rt_printk("%s: bug, invalid RTSI_channel=%i\n", __FUNCTION__,
+		rt_printk("%s: bug, invalid RTSI_channel=%i\n", __func__,
 			RTSI_channel);
 		return 0;
 	}
@@ -1183,7 +1183,7 @@ static inline unsigned MSeries_PLL_Divis
 {
 	static const unsigned max_divisor = 0x10;
 	if (divisor < 1 || divisor > max_divisor) {
-		rt_printk("%s: bug, invalid divisor=%i\n", __FUNCTION__,
+		rt_printk("%s: bug, invalid divisor=%i\n", __func__,
 			divisor);
 		return 0;
 	}
@@ -1193,7 +1193,7 @@ static inline unsigned MSeries_PLL_Multi
 {
 	static const unsigned max_multiplier = 0x100;
 	if (multiplier < 1 || multiplier > max_multiplier) {
-		rt_printk("%s: bug, invalid multiplier=%i\n", __FUNCTION__,
+		rt_printk("%s: bug, invalid multiplier=%i\n", __func__,
 			multiplier);
 		return 0;
 	}
--- a/drivers/staging/comedi/drivers/ni_tio.c
+++ b/drivers/staging/comedi/drivers/ni_tio.c
@@ -1273,7 +1273,7 @@ static int ni_tio_set_other_src(struct n
 		counter_dev->regs[abz_reg] &= ~mask;
 		counter_dev->regs[abz_reg] |= (source << shift) & mask;
 		write_register(counter, counter_dev->regs[abz_reg], abz_reg);
-/* rt_printk("%s %x %d %d\n", __FUNCTION__, counter_dev->regs[abz_reg], index, source); */
+/* rt_printk("%s %x %d %d\n", __func__, counter_dev->regs[abz_reg], index, source); */
 		return 0;
 	}
 	return -EINVAL;
