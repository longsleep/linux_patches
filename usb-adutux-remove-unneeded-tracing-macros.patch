From foo@baz Wed Jun 26 16:21:19 PDT 2013
Date: Wed, 26 Jun 2013 16:21:19 -0700
To: Greg KH <gregkh@linuxfoundation.org>
Cc: linux-usb@vger.kernel.org
From: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Subject: USB: adutux: remove unneeded tracing macros

Remove the unneeded tracing macros in this driver.  The kernel has a
built-in trace function that can be used if this is really still needed.

Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

---
 drivers/usb/misc/adutux.c |   41 +----------------------------------------
 1 file changed, 1 insertion(+), 40 deletions(-)

--- a/drivers/usb/misc/adutux.c
+++ b/drivers/usb/misc/adutux.c
@@ -147,11 +147,9 @@ static void adu_abort_transfers(struct a
 {
 	unsigned long flags;
 
-	dbg(2," %s : enter", __func__);
-
 	if (dev->udev == NULL) {
 		dbg(1," %s : udev is null", __func__);
-		goto exit;
+		return;
 	}
 
 	/* shutdown transfer */
@@ -170,15 +168,10 @@ static void adu_abort_transfers(struct a
 		usb_kill_urb(dev->interrupt_out_urb);
 	} else
 		spin_unlock_irqrestore(&dev->buflock, flags);
-
-exit:
-	dbg(2," %s : leave", __func__);
 }
 
 static void adu_delete(struct adu_device *dev)
 {
-	dbg(2, "%s enter", __func__);
-
 	/* free data structures */
 	usb_free_urb(dev->interrupt_in_urb);
 	usb_free_urb(dev->interrupt_out_urb);
@@ -187,8 +180,6 @@ static void adu_delete(struct adu_device
 	kfree(dev->interrupt_in_buffer);
 	kfree(dev->interrupt_out_buffer);
 	kfree(dev);
-
-	dbg(2, "%s : leave", __func__);
 }
 
 static void adu_interrupt_in_callback(struct urb *urb)
@@ -196,7 +187,6 @@ static void adu_interrupt_in_callback(st
 	struct adu_device *dev = urb->context;
 	int status = urb->status;
 
-	dbg(4," %s : enter, status %d", __func__, status);
 	adu_debug_data(5, __func__, urb->actual_length,
 		       urb->transfer_buffer);
 
@@ -234,7 +224,6 @@ exit:
 	wake_up_interruptible(&dev->read_wait);
 	adu_debug_data(5, __func__, urb->actual_length,
 		       urb->transfer_buffer);
-	dbg(4," %s : leave, status %d", __func__, status);
 }
 
 static void adu_interrupt_out_callback(struct urb *urb)
@@ -242,7 +231,6 @@ static void adu_interrupt_out_callback(s
 	struct adu_device *dev = urb->context;
 	int status = urb->status;
 
-	dbg(4," %s : enter, status %d", __func__, status);
 	adu_debug_data(5,__func__, urb->actual_length, urb->transfer_buffer);
 
 	if (status != 0) {
@@ -262,7 +250,6 @@ exit:
 
 	adu_debug_data(5, __func__, urb->actual_length,
 		       urb->transfer_buffer);
-	dbg(4," %s : leave, status %d", __func__, status);
 }
 
 static int adu_open(struct inode *inode, struct file *file)
@@ -272,8 +259,6 @@ static int adu_open(struct inode *inode,
 	int subminor;
 	int retval;
 
-	dbg(2,"%s : enter", __func__);
-
 	subminor = iminor(inode);
 
 	if ((retval = mutex_lock_interruptible(&adutux_mutex))) {
@@ -332,14 +317,11 @@ static int adu_open(struct inode *inode,
 exit_no_device:
 	mutex_unlock(&adutux_mutex);
 exit_no_lock:
-	dbg(2,"%s : leave, return value %d ", __func__, retval);
 	return retval;
 }
 
 static void adu_release_internal(struct adu_device *dev)
 {
-	dbg(2," %s : enter", __func__);
-
 	/* decrement our usage count for the device */
 	--dev->open_count;
 	dbg(2," %s : open count %d", __func__, dev->open_count);
@@ -347,8 +329,6 @@ static void adu_release_internal(struct
 		adu_abort_transfers(dev);
 		dev->open_count = 0;
 	}
-
-	dbg(2," %s : leave", __func__);
 }
 
 static int adu_release(struct inode *inode, struct file *file)
@@ -356,8 +336,6 @@ static int adu_release(struct inode *ino
 	struct adu_device *dev;
 	int retval = 0;
 
-	dbg(2," %s : enter", __func__);
-
 	if (file == NULL) {
  		dbg(1," %s : file is NULL", __func__);
 		retval = -ENODEV;
@@ -388,7 +366,6 @@ static int adu_release(struct inode *ino
 unlock:
 	mutex_unlock(&adutux_mutex);
 exit:
-	dbg(2," %s : leave, return value %d", __func__, retval);
 	return retval;
 }
 
@@ -405,11 +382,7 @@ static ssize_t adu_read(struct file *fil
 	unsigned long flags;
 	DECLARE_WAITQUEUE(wait, current);
 
-	dbg(2," %s : enter, count = %Zd, file=%p", __func__, count, file);
-
 	dev = file->private_data;
-	dbg(2," %s : dev=%p", __func__, dev);
-
 	if (mutex_lock_interruptible(&dev->mtx))
 		return -ERESTARTSYS;
 
@@ -551,7 +524,6 @@ exit:
 	/* unlock the device */
 	mutex_unlock(&dev->mtx);
 
-	dbg(2," %s : leave, return value %d", __func__, retval);
 	return retval;
 }
 
@@ -566,8 +538,6 @@ static ssize_t adu_write(struct file *fi
 	unsigned long flags;
 	int retval;
 
-	dbg(2," %s : enter, count = %Zd", __func__, count);
-
 	dev = file->private_data;
 
 	retval = mutex_lock_interruptible(&dev->mtx);
@@ -664,7 +634,6 @@ static ssize_t adu_write(struct file *fi
 exit:
 	mutex_unlock(&dev->mtx);
 exit_nolock:
-	dbg(2," %s : leave, return value %d", __func__, retval);
 	return retval;
 
 exit_onqueue:
@@ -710,8 +679,6 @@ static int adu_probe(struct usb_interfac
 	int out_end_size;
 	int i;
 
-	dbg(2," %s : enter", __func__);
-
 	if (udev == NULL) {
 		dev_err(&interface->dev, "udev is NULL.\n");
 		goto exit;
@@ -832,8 +799,6 @@ static int adu_probe(struct usb_interfac
 		 udev->descriptor.idProduct, dev->serial_number,
 		 (dev->minor - ADU_MINOR_BASE));
 exit:
-	dbg(2," %s : leave, return value %p (dev)", __func__, dev);
-
 	return retval;
 
 error:
@@ -851,8 +816,6 @@ static void adu_disconnect(struct usb_in
 	struct adu_device *dev;
 	int minor;
 
-	dbg(2," %s : enter", __func__);
-
 	dev = usb_get_intfdata(interface);
 
 	mutex_lock(&dev->mtx);	/* not interruptible */
@@ -873,8 +836,6 @@ static void adu_disconnect(struct usb_in
 
 	dev_info(&interface->dev, "ADU device adutux%d now disconnected\n",
 		 (minor - ADU_MINOR_BASE));
-
-	dbg(2," %s : leave", __func__);
 }
 
 /* usb specific object needed to register this driver with the usb subsystem */
