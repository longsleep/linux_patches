From sshtylyov@ru.mvista.com  Wed Feb  4 15:23:24 2009
From: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Date: Wed, 4 Feb 2009 23:37:44 +0300
Subject: USB: musb_host: fix data toggle saving with shared FIFO
To: felipe.balbi@nokia.com, gregkh@suse.de
Cc: linux-usb@vger.kernel.org, davinci-linux-open-source@linux.davincidsp.com, david-b@pacbell.net
Message-ID: <200902042337.44818.sshtylyov@ru.mvista.com>
Content-Disposition: inline


For some strange reason musb_giveback() decides that it's always IN transfer
in case the hardware endpoint has shared FIFO.  This causes musb_save_toggle()
to read the toggle state from the RXCSR register instead of TXCSR; it also may
cause unneeded reloading of the Rx endpoint registers.

Signed-off-by: Sergei Shtylyov <sshtylyov@ru.mvista.com>
Cc: Felipe Balbi <felipe.balbi@nokia.com>
Cc: David Brownell <dbrownell@users.sourceforge.net>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/musb/musb_host.c |    7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

--- a/drivers/usb/musb/musb_host.c
+++ b/drivers/usb/musb/musb_host.c
@@ -335,16 +335,11 @@ musb_save_toggle(struct musb_hw_ep *ep, 
 static struct musb_qh *
 musb_giveback(struct musb_qh *qh, struct urb *urb, int status)
 {
-	int			is_in;
 	struct musb_hw_ep	*ep = qh->hw_ep;
 	struct musb		*musb = ep->musb;
+	int			is_in = usb_pipein(urb->pipe);
 	int			ready = qh->is_ready;
 
-	if (ep->is_shared_fifo)
-		is_in = 1;
-	else
-		is_in = usb_pipein(urb->pipe);
-
 	/* save toggle eagerly, for paranoia */
 	switch (qh->type) {
 	case USB_ENDPOINT_XFER_BULK:
