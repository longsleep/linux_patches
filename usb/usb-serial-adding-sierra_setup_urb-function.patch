From epasheva@sierrawireless.com  Tue Jun  2 13:28:39 2009
From: Elina Pasheva <epasheva@sierrawireless.com>
Date: Mon, 1 Jun 2009 11:03:05 -0700
Subject: USB: serial: adding sierra_setup_urb() function
To: <gregkh@suse.de>
Cc: <epasheva@sierrawireless.com>, <rfiler@sierrawireless.com>
Message-ID: <1243879385.6383.8.camel@Linuxdev3>


From: Elina Pasheva <epasheva@sierrawireless.com>

- Added new function sierra_setup_urb() that contains the functionality
  to allocate an urb, fill bulk urb using the supplied memory allocation
  flag and release urb upon error. Added parameter so that the caller
  pass the memory allocation flag for flexibility.

Signed-off-by: Elina Pasheva <epasheva@sierrawireless.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/serial/sierra.c |   38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

--- a/drivers/usb/serial/sierra.c
+++ b/drivers/usb/serial/sierra.c
@@ -618,6 +618,44 @@ static int sierra_submit_rx_urbs(struct 
 		return err;
 }
 
+static struct urb *sierra_setup_urb(struct usb_serial *serial, int endpoint,
+					int dir, void *ctx, int len,
+					gfp_t mem_flags,
+					usb_complete_t callback)
+{
+	struct urb	*urb;
+	u8		*buf;
+
+	if (endpoint == -1)
+		return NULL;
+
+	urb = usb_alloc_urb(0, mem_flags);
+	if (urb == NULL) {
+		dev_dbg(&serial->dev->dev, "%s: alloc for endpoint %d failed\n",
+			__func__, endpoint);
+		return NULL;
+	}
+
+	buf = kmalloc(len, mem_flags);
+	if (buf) {
+		/* Fill URB using supplied data */
+		usb_fill_bulk_urb(urb, serial->dev,
+			usb_sndbulkpipe(serial->dev, endpoint) | dir,
+			buf, len, callback, ctx);
+
+		/* debug */
+		dev_dbg(&serial->dev->dev, "%s %c u : %p d:%p\n", __func__,
+				dir == USB_DIR_IN ? 'i' : 'o', urb, buf);
+	} else {
+		dev_dbg(&serial->dev->dev, "%s %c u:%p d:%p\n", __func__,
+				dir == USB_DIR_IN ? 'i' : 'o', urb, buf);
+
+		sierra_release_urb(urb);
+		urb = NULL;
+	}
+
+	return urb;
+}
 
 static int sierra_open(struct tty_struct *tty,
 			struct usb_serial_port *port, struct file *filp)
