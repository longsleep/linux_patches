From stern@rowland.harvard.edu  Thu Aug  2 14:25:10 2007
From: Alan Stern <stern@rowland.harvard.edu>
Date: Thu, 2 Aug 2007 15:04:52 -0400 (EDT)
Subject: [PATCH 1/3] USB: cleanup for previous patches
To: Greg KH <greg@kroah.com>
Message-ID: <Pine.LNX.4.44L0.0708021503310.2622-100000@iolanthe.rowland.org>


This patch (as951) cleans up a few loose ends from earlier patches.
Redundant checks for non-NULL urb->dev are removed, as are checks of
urb->dev->bus (which can never be NULL).  Conversely, a check for
non-NULL urb->ep is added to the unlink paths.

A homegrown round-down-to-power-of-2 loop is simplified by using the
ilog2 routine.  The comparison in usb_urb_dir_in() is made more
transparent.

Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/core/hcd.c |    5 -----
 drivers/usb/core/urb.c |   13 +++++++------
 include/linux/usb.h    |    2 +-
 3 files changed, 8 insertions(+), 12 deletions(-)

--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -1074,11 +1074,6 @@ int usb_hcd_unlink_urb (struct urb *urb,
 	struct list_head		*tmp;
 	int				retval;
 
-	if (!urb)
-		return -EINVAL;
-	if (!urb->dev || !urb->dev->bus)
-		return -ENODEV;
-
 	/*
 	 * we contend for urb->status with the hcd core,
 	 * which changes it while returning the urb.
--- a/drivers/usb/core/urb.c
+++ b/drivers/usb/core/urb.c
@@ -3,6 +3,7 @@
 #include <linux/bitops.h>
 #include <linux/slab.h>
 #include <linux/init.h>
+#include <linux/log2.h>
 #include <linux/usb.h>
 #include <linux/wait.h>
 #include "hcd.h"
@@ -441,10 +442,8 @@ int usb_submit_urb(struct urb *urb, gfp_
 		default:
 			return -EINVAL;
 		}
-		/* power of two? */
-		while (max > urb->interval)
-			max >>= 1;
-		urb->interval = max;
+		/* Round down to a power of 2, no more than max */
+		urb->interval = min(max, 1 << ilog2(urb->interval));
 	}
 
 	return usb_hcd_submit_urb(urb, mem_flags);
@@ -513,8 +512,10 @@ int usb_unlink_urb(struct urb *urb)
 {
 	if (!urb)
 		return -EINVAL;
-	if (!(urb->dev && urb->dev->bus))
+	if (!urb->dev)
 		return -ENODEV;
+	if (!urb->ep)
+		return -EIDRM;
 	return usb_hcd_unlink_urb(urb, -ECONNRESET);
 }
 
@@ -541,7 +542,7 @@ int usb_unlink_urb(struct urb *urb)
 void usb_kill_urb(struct urb *urb)
 {
 	might_sleep();
-	if (!(urb && urb->dev && urb->dev->bus))
+	if (!(urb && urb->dev && urb->ep))
 		return;
 	spin_lock_irq(&urb->lock);
 	++urb->reject;
--- a/include/linux/usb.h
+++ b/include/linux/usb.h
@@ -1395,7 +1395,7 @@ extern int usb_wait_anchor_empty_timeout
  */
 static inline int usb_urb_dir_in(struct urb *urb)
 {
-	return (urb->transfer_flags & URB_DIR_MASK) != URB_DIR_OUT;
+	return (urb->transfer_flags & URB_DIR_MASK) == URB_DIR_IN;
 }
 
 /**
