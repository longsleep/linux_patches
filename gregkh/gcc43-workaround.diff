From: Jeff Mahoney <jeffm@suse.com>
Subject: [PATCH] time: mark timespec_add_ns's u64 parameter as volatile to avoid gcc 4.3 optimization
Patch-mainline: No idea, Linus views this as a gcc bug.

 This patch avoids an optimization introduced in gcc 4.3 where it will
 take a loop of subtractions and turn them into a division. Since the
 kernel doesn't support long long division by adding a __udivdi3, we
 can't use this optimization.

 This should probably be ifdef'd to only apply on 32-bit architectures,
 since the problem doesn't exist on 64-bit arches.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 include/linux/time.h |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -168,8 +168,9 @@ extern struct timeval ns_to_timeval(cons
  * timespec_add_ns - Adds nanoseconds to a timespec
  * @a:		pointer to timespec to be incremented
  * @ns:		unsigned nanoseconds value to be added
+ * ns is volatile to avoid an optimization introduced with gcc 4.3
  */
-static inline void timespec_add_ns(struct timespec *a, u64 ns)
+static inline void timespec_add_ns(struct timespec *a, volatile u64 ns)
 {
 	ns += a->tv_nsec;
 	while(unlikely(ns >= NSEC_PER_SEC)) {
