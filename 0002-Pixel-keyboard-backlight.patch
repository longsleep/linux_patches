Index: ubuntu-saucy/drivers/platform/x86/chromeos_laptop.c
===================================================================
--- ubuntu-saucy.orig/drivers/platform/x86/chromeos_laptop.c	2013-10-12 21:18:55.256205786 +0200
+++ ubuntu-saucy/drivers/platform/x86/chromeos_laptop.c	2013-10-12 21:18:55.252205786 +0200
@@ -27,6 +27,7 @@
 #include <linux/input.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
+#include <linux/platform_device.h>
 
 #define ATMEL_TP_I2C_ADDR	0x4b
 #define ATMEL_TP_I2C_BL_ADDR	0x25
@@ -301,6 +302,20 @@
 	return 0;
 }
 
+static struct platform_device *kb_backlight_device;
+
+static int __init setup_keyboard_backlight(const struct dmi_system_id *id)
+{
+  	kb_backlight_device =
+    		platform_device_register_simple("chromeos-keyboard-leds",
+            	-1, NULL, 0);
+  	if (IS_ERR(kb_backlight_device)) {
+    		pr_warn("Error registering Chrome OS keyboard LEDs.\n");
+    		kb_backlight_device = NULL;
+  	}
+  	return 0;
+}
+
 static struct dmi_system_id __initdata chromeos_laptop_dmi_table[] = {
 	{
 		.ident = "Samsung Series 5 550 - Touchpad",
@@ -377,6 +392,14 @@
 		},
 		.callback = setup_tsl2563_als,
 	},
+  	{
+    		.ident = "Chromebook Pixel - Keyboard backlight",
+    		.matches = {
+      			DMI_MATCH(DMI_SYS_VENDOR, "GOOGLE"),
+      			DMI_MATCH(DMI_PRODUCT_NAME, "Link"),
+    		},
+    		.callback = setup_keyboard_backlight,
+  	},
 	{ }
 };
 MODULE_DEVICE_TABLE(dmi, chromeos_laptop_dmi_table);
@@ -398,6 +421,8 @@
 		i2c_unregister_device(tp);
 	if (ts)
 		i2c_unregister_device(ts);
+	if (kb_backlight_device)
+		platform_device_unregister(kb_backlight_device);
 }
 
 module_init(chromeos_laptop_init);
Index: ubuntu-saucy/drivers/video/backlight/Makefile
===================================================================
--- ubuntu-saucy.orig/drivers/video/backlight/Makefile	2013-10-12 21:18:55.256205786 +0200
+++ ubuntu-saucy/drivers/video/backlight/Makefile	2013-10-12 21:18:55.252205786 +0200
@@ -50,3 +50,4 @@
 obj-$(CONFIG_BACKLIGHT_TOSA)		+= tosa_bl.o
 obj-$(CONFIG_BACKLIGHT_TPS65217)	+= tps65217_bl.o
 obj-$(CONFIG_BACKLIGHT_WM831X)		+= wm831x_bl.o
+obj-$(CONFIG_BACKLIGHT_CHROMEOS_KEYBOARD) += chromeos_keyboard_bl.o
Index: ubuntu-saucy/drivers/leds/leds-chromeos-keyboard.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ ubuntu-saucy/drivers/leds/leds-chromeos-keyboard.c	2013-10-12 21:18:55.252205786 +0200
@@ -0,0 +1,120 @@
+/*
+ *  leds-chromeos-keyboard.c - Keyboard backlight LED driver for Chrome OS.
+ *
+ *  Copyright (C) 2012 Google, Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <linux/acpi.h>
+#include <linux/leds.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+
+/* Keyboard LED ACPI Device must be defined in firmware */
+#define ACPI_KEYBOARD_BACKLIGHT_DEVICE	"\\_SB.KBLT"
+#define ACPI_KEYBOARD_BACKLIGHT_READ	ACPI_KEYBOARD_BACKLIGHT_DEVICE ".KBQC"
+#define ACPI_KEYBOARD_BACKLIGHT_WRITE	ACPI_KEYBOARD_BACKLIGHT_DEVICE ".KBCM"
+
+#define ACPI_KEYBOARD_BACKLIGHT_MAX		100
+
+static void keyboard_led_set_brightness(struct led_classdev *cdev,
+	enum led_brightness brightness)
+{
+	union acpi_object param;
+	struct acpi_object_list input;
+	acpi_status status;
+
+	if (!(cdev->flags & LED_SUSPENDED))
+		cdev->brightness = brightness;
+
+	param.type = ACPI_TYPE_INTEGER;
+	param.integer.value = brightness;
+	input.count = 1;
+	input.pointer = &param;
+
+	status = acpi_evaluate_object(NULL, ACPI_KEYBOARD_BACKLIGHT_WRITE,
+					  &input, NULL);
+	if (ACPI_FAILURE(status))
+		dev_err(cdev->dev, "Error setting keyboard LED value");
+}
+
+static int keyboard_led_probe(struct platform_device *pdev)
+{
+	struct led_classdev *cdev;
+	acpi_handle handle;
+	acpi_status status;
+	int ret;
+
+	/* Look for the keyboard LED ACPI Device */
+	status = acpi_get_handle(ACPI_ROOT_OBJECT,
+				 ACPI_KEYBOARD_BACKLIGHT_DEVICE,
+				 &handle);
+	if (ACPI_FAILURE(status)) {
+		dev_err(&pdev->dev, "Unable fo find ACPI device %s\n",
+			ACPI_KEYBOARD_BACKLIGHT_DEVICE);
+		return -ENODEV;
+	}
+
+	cdev = kzalloc(sizeof(struct led_classdev), GFP_KERNEL);
+	if (!cdev)
+		return -ENOMEM;
+	cdev->name = "chromeos::kbd_backlight";
+	cdev->brightness_set = keyboard_led_set_brightness;
+	cdev->max_brightness = ACPI_KEYBOARD_BACKLIGHT_MAX;
+	cdev->brightness = cdev->max_brightness;
+	cdev->flags |= LED_CORE_SUSPENDRESUME;
+
+	ret = led_classdev_register(&pdev->dev, cdev);
+	if (ret)
+		goto err;
+
+	platform_set_drvdata(pdev, cdev);
+	return 0;
+err:
+	kfree(cdev);
+	return ret;
+}
+
+static int keyboard_led_remove(struct platform_device *pdev)
+{
+	struct led_classdev *cdev = platform_get_drvdata(pdev);
+
+	platform_set_drvdata(pdev, NULL);
+	kfree(cdev);
+	return 0;
+}
+
+static struct platform_driver keyboard_led_driver = {
+	.driver		= {
+		.name	= "chromeos-keyboard-leds",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= keyboard_led_probe,
+	.remove		= keyboard_led_remove,
+};
+
+module_platform_driver(keyboard_led_driver);
+
+MODULE_AUTHOR("Simon Que <sque@chromium.org>");
+MODULE_DESCRIPTION("ChromeOS Keyboard LED Driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:chromeos-keyboard-leds");
Index: ubuntu-saucy/drivers/video/backlight/chromeos_keyboard_bl.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ ubuntu-saucy/drivers/video/backlight/chromeos_keyboard_bl.c	2013-10-12 21:18:55.252205786 +0200
@@ -0,0 +1,155 @@
+/*
+ *  chromeos_keyboard_bl.c - Keyboard backlight driver for Chrome OS.
+ *
+ *  Copyright (C) 2012 The Chromium OS Authors
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <linux/acpi.h>
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+
+/* Keyboard Backlight ACPI Device must be defined in firmware */
+#define ACPI_KEYBOARD_BACKLIGHT_DEVICE	"\\_SB.KBLT"
+#define ACPI_KEYBOARD_BACKLIGHT_READ	ACPI_KEYBOARD_BACKLIGHT_DEVICE ".KBQC"
+#define ACPI_KEYBOARD_BACKLIGHT_WRITE	ACPI_KEYBOARD_BACKLIGHT_DEVICE ".KBCM"
+
+static int keyboard_backlight_update_status(struct backlight_device *device)
+{
+	union acpi_object param;
+	struct acpi_object_list input;
+	acpi_status status;
+
+	param.type = ACPI_TYPE_INTEGER;
+	param.integer.value = (u8)device->props.brightness;
+	input.count = 1;
+	input.pointer = &param;
+
+	status = acpi_evaluate_object(NULL, ACPI_KEYBOARD_BACKLIGHT_WRITE,
+				      &input, NULL);
+	if (ACPI_FAILURE(status)) {
+		dev_err(&device->dev, "Error setting keyboard backlight value");
+		return -1;
+	}
+	return 0;
+}
+
+static int keyboard_backlight_get_brightness(struct backlight_device *device)
+{
+	unsigned long long brightness;
+	acpi_status status;
+
+	status = acpi_evaluate_integer(NULL, ACPI_KEYBOARD_BACKLIGHT_READ,
+				       NULL, &brightness);
+
+	if (ACPI_FAILURE(status)) {
+		dev_err(&device->dev, "Error reading keyboard backlight value");
+		return -1;
+	}
+	return (int)brightness;
+}
+
+static const struct backlight_ops keyboard_backlight_ops = {
+	.update_status	= keyboard_backlight_update_status,
+	.get_brightness	= keyboard_backlight_get_brightness,
+};
+
+static int keyboard_backlight_probe(struct platform_device *pdev)
+{
+	struct backlight_device *bl;
+	struct backlight_properties props = {
+		.type = BACKLIGHT_FIRMWARE, .max_brightness = 100
+	};
+	acpi_handle handle;
+	acpi_status status;
+
+	/* Look for the keyboard backlight ACPI Device */
+	status = acpi_get_handle(ACPI_ROOT_OBJECT,
+				 ACPI_KEYBOARD_BACKLIGHT_DEVICE,
+				 &handle);
+	if (ACPI_FAILURE(status)) {
+		dev_err(&pdev->dev, "Unable fo find ACPI device %s\n",
+			ACPI_KEYBOARD_BACKLIGHT_DEVICE);
+		return -ENODEV;
+	}
+
+	bl = backlight_device_register("keyboard_backlight", &pdev->dev, NULL,
+				       &keyboard_backlight_ops, &props);
+	if (IS_ERR(bl)) {
+		dev_err(&pdev->dev, "failed to register backlight\n");
+		return PTR_ERR(bl);
+	}
+
+	bl->props.brightness = bl->props.max_brightness;
+	backlight_update_status(bl);
+
+	platform_set_drvdata(pdev, bl);
+	return 0;
+}
+
+static int keyboard_backlight_remove(struct platform_device *pdev)
+{
+	backlight_device_unregister(platform_get_drvdata(pdev));
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int keyboard_backlight_suspend(struct device *pdev)
+{
+	struct backlight_device *bl = dev_get_drvdata(pdev);
+	int saved_brightness = bl->props.brightness;
+
+	bl->props.brightness = 0;
+	backlight_update_status(bl);
+	bl->props.brightness = saved_brightness;
+	return 0;
+}
+
+static int keyboard_backlight_resume(struct device *pdev)
+{
+	struct backlight_device *bl = dev_get_drvdata(pdev);
+
+	backlight_update_status(bl);
+	return 0;
+}
+#endif  /* CONFIG_PM_SLEEP */
+
+static SIMPLE_DEV_PM_OPS(keyboard_backlight_pm, keyboard_backlight_suspend,
+			 keyboard_backlight_resume);
+
+static struct platform_driver keyboard_backlight_driver = {
+	.driver		= {
+		.name	= "chromeos-keyboard-backlight",
+		.owner	= THIS_MODULE,
+		.pm	= &keyboard_backlight_pm,
+	},
+	.probe		= keyboard_backlight_probe,
+	.remove		= keyboard_backlight_remove,
+};
+
+module_platform_driver(keyboard_backlight_driver);
+
+MODULE_AUTHOR("Simon Que <sque@chromium.org>");
+MODULE_DESCRIPTION("ChromeOS Keyboard Backlight Driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:chromeos-keyboard-backlight");
Index: ubuntu-saucy/drivers/leds/Kconfig
===================================================================
--- ubuntu-saucy.orig/drivers/leds/Kconfig	2013-10-12 21:18:55.256205786 +0200
+++ ubuntu-saucy/drivers/leds/Kconfig	2013-10-12 21:18:55.252205786 +0200
@@ -5,6 +5,13 @@
 	  As this function is used by arch code it must not be compiled as a
 	  module.
 
+config LEDS_CHROMEOS_KEYBOARD
+  tristate "LED support for Chrome OS keyboards"
+  depends on LEDS_CLASS && ACPI
+  help
+    This option enables support for the LEDs on Chrome OS keyboards.
+    Say Y to enable keyboard LEDs on Chrome OS systems.
+
 menuconfig NEW_LEDS
 	bool "LED Support"
 	help
Index: ubuntu-saucy/drivers/leds/Makefile
===================================================================
--- ubuntu-saucy.orig/drivers/leds/Makefile	2013-10-12 21:18:55.256205786 +0200
+++ ubuntu-saucy/drivers/leds/Makefile	2013-10-12 21:18:55.252205786 +0200
@@ -53,6 +53,7 @@
 obj-$(CONFIG_LEDS_MAX8997)		+= leds-max8997.o
 obj-$(CONFIG_LEDS_LM355x)		+= leds-lm355x.o
 obj-$(CONFIG_LEDS_BLINKM)		+= leds-blinkm.o
+obj-$(CONFIG_LEDS_CHROMEOS_KEYBOARD)    += leds-chromeos-keyboard.o
 
 # LED SPI Drivers
 obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
