From foo@baz Tue Apr  9 12:12:43 2002
Date: Tue, 06 Nov 2007 10:36:58 -0800
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: kobject: convert kernel_kset to be a kobject

kernel_kset does not need to be a kset, but a much simpler kobject now
that we have kobj_attributes.

We also rename kernel_kset to kernel_kobj to catch all users of this
symbol with a build error instead of an easy-to-ignore build warning.

Cc: Kay Sievers <kay.sievers@vrfy.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 fs/configfs/mount.c         |    2 +-
 fs/debugfs/inode.c          |    2 +-
 fs/dlm/lockspace.c          |    2 +-
 fs/gfs2/locking/dlm/sysfs.c |    2 +-
 include/linux/kobject.h     |    4 ++--
 kernel/ksysfs.c             |   18 +++++++++---------
 kernel/user.c               |    2 +-
 mm/slub.c                   |    2 +-
 security/inode.c            |    3 +--
 9 files changed, 18 insertions(+), 19 deletions(-)

--- a/fs/configfs/mount.c
+++ b/fs/configfs/mount.c
@@ -140,7 +140,7 @@ static int __init configfs_init(void)
 	if (!configfs_dir_cachep)
 		goto out;
 
-	config_kobj = kobject_create_and_register("config", &kernel_kset->kobj);
+	config_kobj = kobject_create_and_register("config", kernel_kobj);
 	if (!config_kobj) {
 		kmem_cache_destroy(configfs_dir_cachep);
 		configfs_dir_cachep = NULL;
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@ -432,7 +432,7 @@ static int __init debugfs_init(void)
 {
 	int retval;
 
-	debug_kobj = kobject_create_and_register("debug", &kernel_kset->kobj);
+	debug_kobj = kobject_create_and_register("debug", kernel_kobj);
 	if (!debug_kobj)
 		return -EINVAL;
 
--- a/fs/dlm/lockspace.c
+++ b/fs/dlm/lockspace.c
@@ -223,7 +223,7 @@ int dlm_lockspace_init(void)
 	INIT_LIST_HEAD(&lslist);
 	spin_lock_init(&lslist_lock);
 
-	dlm_kset = kset_create_and_register("dlm", NULL, NULL, kernel_kset);
+	dlm_kset = kset_create_and_register("dlm", NULL, kernel_kobj, NULL);
 	if (!dlm_kset) {
 		printk(KERN_WARNING "%s: can not create kset\n", __FUNCTION__);
 		return -ENOMEM;
--- a/fs/gfs2/locking/dlm/sysfs.c
+++ b/fs/gfs2/locking/dlm/sysfs.c
@@ -220,7 +220,7 @@ void gdlm_kobject_release(struct gdlm_ls
 int gdlm_sysfs_init(void)
 {
 	gdlm_kset = kset_create_and_register("lock_dlm", NULL,
-					     NULL, kernel_kset);
+					     kernel_kobj, NULL);
 	if (!gdlm_kset) {
 		printk(KERN_WARNING "%s: can not create kset\n", __FUNCTION__);
 		return -ENOMEM;
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -193,8 +193,8 @@ extern struct kobject * kset_find_obj(st
 #define set_kset_name(str)	.kset = { .kobj = { .k_name = str } }
 
 
-/* The global /sys/kernel/ kset for people to chain off of */
-extern struct kset *kernel_kset;
+/* The global /sys/kernel/ kobject for people to chain off of */
+extern struct kobject *kernel_kobj;
 /* The global /sys/hypervisor/ kobject for people to chain off of */
 extern struct kobject *hypervisor_kobj;
 /* The global /sys/power/ kset for people to chain off of */
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -101,8 +101,8 @@ static struct bin_attribute notes_attr =
 	.read = &notes_read,
 };
 
-struct kset *kernel_kset;
-EXPORT_SYMBOL_GPL(kernel_kset);
+struct kobject *kernel_kobj;
+EXPORT_SYMBOL_GPL(kernel_kobj);
 
 static struct attribute * kernel_attrs[] = {
 #if defined(CONFIG_HOTPLUG) && defined(CONFIG_NET)
@@ -125,18 +125,18 @@ static int __init ksysfs_init(void)
 {
 	int error;
 
-	kernel_kset = kset_create_and_register("kernel", NULL, NULL, NULL);
-	if (!kernel_kset) {
+	kernel_kobj = kobject_create_and_register("kernel", NULL);
+	if (!kernel_kobj) {
 		error = -ENOMEM;
 		goto exit;
 	}
-	error = sysfs_create_group(&kernel_kset->kobj, &kernel_attr_group);
+	error = sysfs_create_group(kernel_kobj, &kernel_attr_group);
 	if (error)
 		goto kset_exit;
 
 	if (notes_size > 0) {
 		notes_attr.size = notes_size;
-		error = sysfs_create_bin_file(&kernel_kset->kobj, &notes_attr);
+		error = sysfs_create_bin_file(kernel_kobj, &notes_attr);
 		if (error)
 			goto group_exit;
 	}
@@ -150,11 +150,11 @@ static int __init ksysfs_init(void)
 
 notes_exit:
 	if (notes_size > 0)
-		sysfs_remove_bin_file(&kernel_kset->kobj, &notes_attr);
+		sysfs_remove_bin_file(kernel_kobj, &notes_attr);
 group_exit:
-	sysfs_remove_group(&kernel_kset->kobj, &kernel_attr_group);
+	sysfs_remove_group(kernel_kobj, &kernel_attr_group);
 kset_exit:
-	kset_unregister(kernel_kset);
+	kobject_unregister(kernel_kobj);
 exit:
 	return error;
 }
--- a/kernel/user.c
+++ b/kernel/user.c
@@ -201,7 +201,7 @@ done:
  */
 int __init uids_sysfs_init(void)
 {
-	uids_kset = kset_create_and_register("uids", NULL, NULL, kernel_kset);
+	uids_kset = kset_create_and_register("uids", NULL, kernel_kobj, NULL);
 	if (!uids_kset)
 		return -ENOMEM;
 
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -4090,7 +4090,7 @@ static int __init slab_sysfs_init(void)
 	int err;
 
 	slab_kset = kset_create_and_register("slab", &slab_uevent_ops,
-					     NULL, kernel_kset);
+					     kernel_kobj, NULL);
 	if (!slab_kset) {
 		printk(KERN_ERR "Cannot register slab subsystem.\n");
 		return -ENOSYS;
--- a/security/inode.c
+++ b/security/inode.c
@@ -321,8 +321,7 @@ static int __init securityfs_init(void)
 {
 	int retval;
 
-	security_kobj = kobject_create_and_register("security",
-						    &kernel_kset->kobj);
+	security_kobj = kobject_create_and_register("security", kernel_kobj);
 	if (!security_kobj)
 		return -EINVAL;
 
