#From foo@baz Tue Apr  9 12:12:43 2002
#Date: Thu, 27 Sep 2007 14:48:53 -0700
#To: Greg KH <greg@kroah.com>
#From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: kset: add kset_create and kset_destory

THIS DOES NOT WORK YET!!!  DO NOT SEND TO LINUS!!!


---
 include/linux/kobject.h |    6 +++++-
 lib/kobject.c           |   46 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 51 insertions(+), 1 deletion(-)

--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -78,6 +78,7 @@ static inline const char * kobject_name(
 	return kobj->k_name;
 }
 
+
 extern void kobject_init(struct kobject *);
 extern void kobject_cleanup(struct kobject *);
 
@@ -143,11 +144,14 @@ struct kset {
 	struct kset_uevent_ops	*uevent_ops;
 };
 
-
 extern void kset_init(struct kset * k);
 extern int __must_check kset_add(struct kset * k);
 extern int __must_check kset_register(struct kset * k);
 extern void kset_unregister(struct kset * k);
+extern struct kset * __must_check kset_create(const char *name,
+					      struct kset_uevent_ops *u,
+					      struct kset *parent);
+extern void kset_destroy(struct kset *kset);
 
 static inline struct kset * to_kset(struct kobject * kobj)
 {
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -13,6 +13,7 @@
  */
 
 #include <linux/kobject.h>
+#include <linux/err.h>
 #include <linux/string.h>
 #include <linux/module.h>
 #include <linux/stat.h>
@@ -662,6 +663,51 @@ int subsys_create_file(struct kset *s, s
 	return error;
 }
 
+static void kset_release(struct kobject *kobj)
+{
+	struct kset *kset = container_of(kobj, struct kset, kobj);
+	pr_debug("freeing kset %s\n", kobject_name(kobj));
+	kfree(kset);
+}
+
+static struct kobj_type kset_type = {
+	.release = kset_release,
+};
+
+/**
+ * kset_create - create a struct kset dynamically
+ *
+ * This function creates a kset structure
+ *
+ * @name: the name for the kset
+ * @uevent_ops: a struct kset_uevent_ops for the kset
+ * @parent: the parent kset of this parent, if any.
+ */
+struct kset *kset_create(const char *name,
+			 struct kset_uevent_ops *uevent_ops,
+			 struct kset *parent)
+{
+	struct kset *kset;
+
+	kset = kzalloc(sizeof(*kset), GFP_KERNEL);
+	if (!kset)
+		return ERR_PTR(-ENOMEM);
+	kobject_set_name(&kset->kobj, name);
+	kset->uevent_ops = uevent_ops;
+	kset->kobj.kset = parent;
+	kset->kobj.ktype = &kset_type;
+
+	return kset;
+}
+EXPORT_SYMBOL_GPL(kset_create);
+
+void kset_destroy(struct kset *kset)
+{
+	pr_debug("kset_destroy %s\n",kobject_name(&kset->kobj));
+	kset_unregister(kset);
+}
+EXPORT_SYMBOL_GPL(kset_destroy);
+
 EXPORT_SYMBOL(kobject_init);
 EXPORT_SYMBOL(kobject_register);
 EXPORT_SYMBOL(kobject_unregister);
