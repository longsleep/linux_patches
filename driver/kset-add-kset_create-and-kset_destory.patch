#From foo@baz Tue Apr  9 12:12:43 2002
#Date: Thu, 27 Sep 2007 14:48:53 -0700
#To: Greg KH <greg@kroah.com>
#From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: kset: add kset_create and kset_destory

THIS DOES NOT WORK YET!!!  DO NOT SEND TO LINUS!!!


---
 include/linux/kobject.h |    3 +++
 lib/kobject.c           |   22 ++++++++++++++++++++++
 2 files changed, 25 insertions(+)

--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -148,6 +148,9 @@ extern void kset_init(struct kset * k);
 extern int __must_check kset_add(struct kset * k);
 extern int __must_check kset_register(struct kset * k);
 extern void kset_unregister(struct kset * k);
+extern struct kset * __must_check kset_create(const char *name,
+					      struct kset_uevent_ops *uevent_ops);
+extern void kset_destroy(struct kset *kset);
 
 static inline struct kset * to_kset(struct kobject * kobj)
 {
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -13,6 +13,7 @@
  */
 
 #include <linux/kobject.h>
+#include <linux/err.h>
 #include <linux/string.h>
 #include <linux/module.h>
 #include <linux/stat.h>
@@ -649,6 +650,27 @@ int subsys_create_file(struct kset *s, s
 	return error;
 }
 
+struct kset *kset_create(const char *name,
+			 struct kset_uevent_ops *uevent_ops)
+{
+	struct kset *kset;
+
+	kset = kzalloc(sizeof(*kset), GFP_KERNEL);
+	if (!kset)
+		return ERR_PTR(-ENOMEM);
+	kobject_set_name(&kset->kobj, name);
+	kset->uevent_ops = uevent_ops;
+
+	return kset;
+}
+EXPORT_SYMBOL_GPL(kset_create);
+
+void kset_destroy(struct kset *kset)
+{
+	pr_debug("kset %s: cleaning up\n",kobject_name(&kset->kobj));
+}
+EXPORT_SYMBOL_GPL(kset_destroy);
+
 EXPORT_SYMBOL(kobject_init);
 EXPORT_SYMBOL(kobject_register);
 EXPORT_SYMBOL(kobject_unregister);
