From foo@baz Tue Apr  9 12:12:43 2002
Date: Mon, 05 Nov 2007 22:24:43 -0800
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: kobject: get rid of kobject_add_dir

kobject_create_and_register is the same as kobject_add_dir, so drop
kobject_add_dir.


Cc: Kay Sievers <kay.sievers@vrfy.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/base/core.c     |    3 ++-
 fs/partitions/check.c   |    6 +++---
 include/linux/kobject.h |    1 -
 kernel/module.c         |    8 +++++---
 lib/kobject.c           |   12 ------------
 5 files changed, 10 insertions(+), 20 deletions(-)

--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -562,7 +562,8 @@ static struct kobject *virtual_device_pa
 	static struct kobject *virtual_dir = NULL;
 
 	if (!virtual_dir)
-		virtual_dir = kobject_add_dir(&devices_subsys.kobj, "virtual");
+		virtual_dir = kobject_create_and_register("virtual",
+							  &devices_subsys.kobj);
 
 	return virtual_dir;
 }
--- a/fs/partitions/check.c
+++ b/fs/partitions/check.c
@@ -335,7 +335,7 @@ static inline void partition_sysfs_add_s
 	struct kobject *k;
 
 	k = kobject_get(&p->kobj);
-	p->holder_dir = kobject_add_dir(k, "holders");
+	p->holder_dir = kobject_create_and_register("holders", k);
 	kobject_put(k);
 }
 
@@ -344,8 +344,8 @@ static inline void disk_sysfs_add_subdir
 	struct kobject *k;
 
 	k = kobject_get(&disk->kobj);
-	disk->holder_dir = kobject_add_dir(k, "holders");
-	disk->slave_dir = kobject_add_dir(k, "slaves");
+	disk->holder_dir = kobject_create_and_register("holders", k);
+	disk->slave_dir = kobject_create_and_register("slaves", k);
 	kobject_put(k);
 }
 
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -98,7 +98,6 @@ extern void kobject_put(struct kobject *
 
 extern struct kobject *kobject_kset_add_dir(struct kset *kset,
 					    struct kobject *, const char *);
-extern struct kobject *kobject_add_dir(struct kobject *, const char *);
 
 extern char * kobject_get_path(struct kobject *, gfp_t);
 
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -1120,7 +1120,8 @@ static void add_notes_attrs(struct modul
 		++loaded;
 	}
 
-	notes_attrs->dir = kobject_add_dir(&mod->mkobj.kobj, "notes");
+	notes_attrs->dir = kobject_create_and_register("notes",
+						       &mod->mkobj.kobj);
 	if (!notes_attrs->dir)
 		goto out;
 
@@ -1241,7 +1242,8 @@ int mod_sysfs_setup(struct module *mod,
 	if (err)
 		goto out;
 
-	mod->holders_dir = kobject_add_dir(&mod->mkobj.kobj, "holders");
+	mod->holders_dir = kobject_create_and_register("holders",
+						       &mod->mkobj.kobj);
 	if (!mod->holders_dir) {
 		err = -ENOMEM;
 		goto out_unreg;
@@ -2512,7 +2514,7 @@ static void module_create_drivers_dir(st
 	if (!mk || mk->drivers_dir)
 		return;
 
-	mk->drivers_dir = kobject_add_dir(&mk->kobj, "drivers");
+	mk->drivers_dir = kobject_create_and_register("drivers", &mk->kobj);
 }
 
 void module_add_driver(struct module *mod, struct device_driver *drv)
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -593,18 +593,6 @@ struct kobject *kobject_kset_add_dir(str
 }
 
 /**
- *	kobject_add_dir - add sub directory of object.
- *	@parent:	object in which a directory is created.
- *	@name:	directory name.
- *
- *	Add a plain directory object as child of given object.
- */
-struct kobject *kobject_add_dir(struct kobject *parent, const char *name)
-{
-	return kobject_create_and_register(name, parent);
-}
-
-/**
  *	kset_init - initialize a kset for use
  *	@k:	kset 
  */
