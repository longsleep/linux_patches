From foo@baz Tue Apr  9 12:12:43 2002
Date: Mon, 5 Nov 2007 13:16:15 -0800
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: kobject: add kobject_create_and_register function

This lets users create dynamic kobjects much easier.

Cc: Kay Sievers <kay.sievers@vrfy.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 include/linux/kobject.h |    3 ++
 lib/kobject.c           |   62 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+)

--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -84,6 +84,9 @@ extern void kobject_cleanup(struct kobje
 extern int __must_check kobject_add(struct kobject *);
 extern void kobject_del(struct kobject *);
 
+extern struct kobject * __must_check kobject_create_and_register
+				(const char *name, struct kobject *parent);
+
 extern int __must_check kobject_rename(struct kobject *, const char *new_name);
 extern int __must_check kobject_move(struct kobject *, struct kobject *);
 
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -553,6 +553,68 @@ struct kobject *kobject_add_dir(struct k
 	return kobject_kset_add_dir(NULL, parent, name);
 }
 
+static void dynamic_kobj_release(struct kobject *kobj)
+{
+	pr_debug("freeing %s\n", kobject_name(kobj));
+	kfree(kobj);
+}
+
+static struct kobj_type dynamic_kobj_ktype = {
+	.release = dynamic_kobj_release,
+};
+
+/**
+ * kobject_create - create a struct kobject dynamically
+ *
+ * @name: the name for the kset
+ * @parent: the parent kobject of this kobject, if any.
+ *
+ * This function creates a kobject structure dynamically and sets it up
+ * to be a "dynamic" kobject with a default release function set up.
+ */
+static struct kobject *kobject_create(const char *name, struct kobject *parent)
+{
+	struct kobject *kobj;
+
+	kobj = kzalloc(sizeof(*kobj), GFP_KERNEL);
+	if (!kobj)
+		return ERR_PTR(-ENOMEM);
+
+	kobject_set_name(kobj, name);
+	kobj->ktype = &dynamic_kobj_ktype;
+	return kobj;
+}
+
+/**
+ * kobject_create_and_register - create a struct kobject dynamically and register it with sysfs
+ *
+ * @name: the name for the kset
+ * @parent: the parent kobject of this kobject, if any.
+ *
+ * This function creates a kset structure dynamically and registers it
+ * with sysfs.  When you are finished with this structure, call
+ * kobject_unregister() and the structure will be dynamically freed when
+ * it is no longer being used.
+ */
+struct kobject *kobject_create_and_register(const char *name,
+					    struct kobject *parent)
+{
+	struct kobject *kobj;
+	int retval;
+
+	kobj = kobject_create(name, parent);
+	if (IS_ERR(kobj))
+		return kobj;
+
+	retval = kobject_register(kobj);
+	if (retval) {
+		kfree(kobj);
+		return ERR_PTR(retval);
+	}
+	return kobj;
+}
+EXPORT_SYMBOL_GPL(kobject_create_and_register);
+
 /**
  *	kset_init - initialize a kset for use
  *	@k:	kset 
