---
 lib/kobject.c        |   16 +++++++++-------
 lib/kobject_uevent.c |   16 ++++++++++------
 2 files changed, 19 insertions(+), 13 deletions(-)

--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -97,7 +97,8 @@ static void fill_kobj_path(struct kobjec
 		*(path + --length) = '/';
 	}
 
-	pr_debug("%s: path = '%s'\n",__FUNCTION__,path);
+	pr_debug("kobject: '%s': %s: path = '%s'\n", kobject_name(kobj),
+		 __FUNCTION__,path);
 }
 
 /**
@@ -235,8 +236,9 @@ int kobject_add(struct kobject * kobj)
 	}
 	parent = kobject_get(kobj->parent);
 
-	pr_debug("kobject %s: registering. parent: %s, set: %s\n",
-		 kobject_name(kobj), parent ? kobject_name(parent) : "<NULL>", 
+	pr_debug("kobject: '%s': %s: parent: '%s', set: '%s'\n",
+		 kobject_name(kobj), __FUNCTION__,
+		 parent ? kobject_name(parent) : "<NULL>",
 		 kobj->kset ? kobject_name(&kobj->kset->kobj) : "<NULL>" );
 
 	if (kobj->kset) {
@@ -489,7 +491,7 @@ void kobject_unregister(struct kobject *
 {
 	if (!kobj)
 		return;
-	pr_debug("kobject %s: unregistering\n",kobject_name(kobj));
+	pr_debug("kobject: '%s': %s\n", kobject_name(kobj), __FUNCTION__);
 	kobject_uevent(kobj, KOBJ_REMOVE);
 	kobject_del(kobj);
 	kobject_put(kobj);
@@ -519,7 +521,7 @@ void kobject_cleanup(struct kobject * ko
 	struct kobject * parent = kobj->parent;
 	const char *name = kobj->k_name;
 
-	pr_debug("kobject %s: cleaning up\n",kobject_name(kobj));
+	pr_debug("kobject: '%s': %s\n", kobject_name(kobj), __FUNCTION__);
 	if (t && t->release) {
 		t->release(kobj);
 		/* If we have a release function, we can guess that this was
@@ -555,7 +557,7 @@ void kobject_put(struct kobject * kobj)
 
 static void dynamic_kobj_release(struct kobject *kobj)
 {
-	pr_debug("%s: freeing %s\n", __FUNCTION__, kobject_name(kobj));
+	pr_debug("kobject: '%s': %s\n", kobject_name(kobj), __FUNCTION__);
 	kfree(kobj);
 }
 
@@ -740,7 +742,7 @@ struct kobject * kset_find_obj(struct ks
 static void kset_release(struct kobject *kobj)
 {
 	struct kset *kset = container_of(kobj, struct kset, kobj);
-	pr_debug("kset %s: now freed\n", kobject_name(kobj));
+	pr_debug("kobject: '%s': %s\n", kobject_name(kobj), __FUNCTION__);
 	kfree(kset);
 }
 
--- a/lib/kobject_uevent.c
+++ b/lib/kobject_uevent.c
@@ -98,7 +98,7 @@ int kobject_uevent_env(struct kobject *k
 	int i = 0;
 	int retval = 0;
 
-	pr_debug("%s\n", __FUNCTION__);
+	pr_debug("kobject: '%s': %s\n", kobject_name(kobj), __FUNCTION__);
 
 	/* search the kset we belong to */
 	top_kobj = kobj;
@@ -106,7 +106,8 @@ int kobject_uevent_env(struct kobject *k
 		top_kobj = top_kobj->parent;
 
 	if (!top_kobj->kset) {
-		pr_debug("kobject attempted to send uevent without kset!\n");
+		pr_debug("kobject: '%s': %s: attempted to send uevent "
+			 "without kset!\n", kobject_name(kobj), __FUNCTION__);
 		return -EINVAL;
 	}
 
@@ -116,7 +117,9 @@ int kobject_uevent_env(struct kobject *k
 	/* skip the event, if the filter returns zero. */
 	if (uevent_ops && uevent_ops->filter)
 		if (!uevent_ops->filter(kset, kobj)) {
-			pr_debug("kobject filter function caused the event to drop!\n");
+			pr_debug("kobject: '%s': %s: filter function caused "
+				 "the event to drop!\n", kobject_name(kobj),
+				 __FUNCTION__);
 			return 0;
 		}
 
@@ -126,7 +129,8 @@ int kobject_uevent_env(struct kobject *k
 	else
 		subsystem = kobject_name(&kset->kobj);
 	if (!subsystem) {
-		pr_debug("unset subsystem caused the event to drop!\n");
+		pr_debug("kobject: '%s': %s: unset subsystem caused the event "
+			 "to drop!\n", kobject_name(kobj), __FUNCTION__);
 		return 0;
 	}
 
@@ -166,8 +170,8 @@ int kobject_uevent_env(struct kobject *k
 	if (uevent_ops && uevent_ops->uevent) {
 		retval = uevent_ops->uevent(kset, kobj, env);
 		if (retval) {
-			pr_debug ("%s - uevent() returned %d\n",
-				  __FUNCTION__, retval);
+			pr_debug("kobject: '%s': %s: uevent() returned %d\n",
+				 kobject_name(kobj), __FUNCTION__, retval);
 			goto exit;
 		}
 	}
