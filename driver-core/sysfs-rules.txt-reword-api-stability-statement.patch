From akpm@linux-foundation.org  Thu Jul  3 15:34:32 2008
From: Nathan Lynch <ntl@pobox.com>
Date: Wed, 02 Jul 2008 10:21:30 -0700
Subject: sysfs-rules.txt: reword API stability statement
To: mm-commits@vger.kernel.org
Cc: ntl@pobox.com, greg@kroah.com, sfr@canb.auug.org.au
Message-ID: <200807021721.m62HLU8F027407@imap1.linux-foundation.org>

From: Nathan Lynch <ntl@pobox.com>

The first paragraph of this document implies that user space developers
shouldn't use sysfs at all, but then it goes on to describe rules that
developers should follow when accessing sysfs.  Not only is this somewhat
self-contradictory, it has been shown to discourage developers from using
established sysfs interfaces.

A note of caution is more appropriate than a blanket "sysfs will never
be stable" assertion.

Signed-off-by: Nathan Lynch <ntl@pobox.com>
Cc: Stephen Rothwell <sfr@canb.auug.org.au>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 Documentation/sysfs-rules.txt |    5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

--- a/Documentation/sysfs-rules.txt
+++ b/Documentation/sysfs-rules.txt
@@ -3,9 +3,8 @@ Rules on how to access information in th
 The kernel-exported sysfs exports internal kernel implementation details
 and depends on internal kernel structures and layout. It is agreed upon
 by the kernel developers that the Linux kernel does not provide a stable
-internal API. As sysfs is a direct export of kernel internal
-structures, the sysfs interface cannot provide a stable interface either;
-it may always change along with internal kernel changes.
+internal API. Therefore, there are aspects of the sysfs interface that
+may not be stable across kernel releases.
 
 To minimize the risk of breaking users of sysfs, which are in most cases
 low-level userspace applications, with a new kernel release, the users
