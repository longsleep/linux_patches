From htejun@gmail.com Tue Apr 22 02:58:55 2008
From: Tejun Heo <htejun@gmail.com>
Date: Tue, 22 Apr 2008 18:58:46 +0900
Subject: klist: implement klist_add_{after|before}()
To: James Bottomley <James.Bottomley@HansenPartnership.com>,  Alan Stern <stern@rowland.harvard.edu>, Andrew Morton <akpm@linux-foundation.org>, Greg KH <greg@kroah.com>,  oliver@neukum.org, Alan Cox <alan@lxorguk.ukuu.org.uk>,  zaitcev@redhat.com,  Linux Kernel Mailing List <linux-kernel@vger.kernel.org>, linux-usb@vger.kernel.org
Message-ID: <480DB6D6.5040808@gmail.com>


Add klist_add_after() and klist_add_before() which puts a new node
after and before an existing node, respectively.  This is useful for
callers which need to keep klist ordered.  Note that synchronizing
between simultaneous additions for ordering is the caller's
responsibility.

Signed-off-by: Tejun Heo <htejun@gmail.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 include/linux/klist.h |    2 ++
 lib/klist.c           |   38 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 40 insertions(+)

--- a/include/linux/klist.h
+++ b/include/linux/klist.h
@@ -46,6 +46,8 @@ struct klist_node {
 
 extern void klist_add_tail(struct klist_node * n, struct klist * k);
 extern void klist_add_head(struct klist_node * n, struct klist * k);
+extern void klist_add_after(struct klist_node * n, struct klist_node * pos);
+extern void klist_add_before(struct klist_node * n, struct klist_node * pos);
 
 extern void klist_del(struct klist_node * n);
 extern void klist_remove(struct klist_node * n);
--- a/lib/klist.c
+++ b/lib/klist.c
@@ -120,6 +120,44 @@ void klist_add_tail(struct klist_node * 
 EXPORT_SYMBOL_GPL(klist_add_tail);
 
 
+/**
+ *	klist_add_after - Init a klist_node and add it after an existing node
+ *	@n:	node we're adding.
+ *	@pos:	node to put @n after
+ */
+
+void klist_add_after(struct klist_node * n, struct klist_node * pos)
+{
+	struct klist *k = pos->n_klist;
+
+	klist_node_init(k, n);
+	spin_lock(&k->k_lock);
+	list_add(&n->n_node, &pos->n_node);
+	spin_unlock(&k->k_lock);
+}
+
+EXPORT_SYMBOL_GPL(klist_add_after);
+
+
+/**
+ *	klist_add_before - Init a klist_node and add it before an existing node
+ *	@n:	node we're adding.
+ *	@pos:	node to put @n after
+ */
+
+void klist_add_before(struct klist_node * n, struct klist_node * pos)
+{
+	struct klist *k = pos->n_klist;
+
+	klist_node_init(k, n);
+	spin_lock(&k->k_lock);
+	list_add_tail(&n->n_node, &pos->n_node);
+	spin_unlock(&k->k_lock);
+}
+
+EXPORT_SYMBOL_GPL(klist_add_before);
+
+
 static void klist_release(struct kref * kref)
 {
 	struct klist_node * n = container_of(kref, struct klist_node, n_ref);
