From foo@baz Tue Apr  9 12:12:43 2002
Date: Mon, 18 Aug 2008 16:17:23 -0700
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: USB: gadget: move library files into g_ether.ko

This resolves the issues of trying to build a library file with the
current Kbuild infrastructure.

Cc: David Brownell <david-b@pacbell.net>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/gadget/Makefile   |    2 +-
 drivers/usb/gadget/ether.c    |   20 +++++++++++++++++++-
 drivers/usb/gadget/f_subset.c |    8 ++++++++
 drivers/usb/gadget/u_ether.c  |    2 --
 4 files changed, 28 insertions(+), 4 deletions(-)

--- a/drivers/usb/gadget/ether.c
+++ b/drivers/usb/gadget/ether.c
@@ -73,6 +73,23 @@
 #endif
 
 /*
+ * Kbuild is not very cooperative with respect to linking separately
+ * compiled library objects into one module.  So for now we won't use
+ * separate compilation ... ensuring init/exit sections work to shrink
+ * the runtime footprint, and giving us at least some parts of what
+ * a "gcc --combine ... part1.c part2.c part3.c ... " build would.
+ */
+#include "composite.c"
+#include "usbstring.c"
+#include "config.c"
+#include "epautoconf.c"
+
+#include "f_ecm.c"
+#include "f_subset.c"
+#include "u_ether.c"
+
+/*-------------------------------------------------------------------------*/
+/*
  * This driver aims for interoperability by using CDC ECM unless
  *
  *		can_support_ecm()
@@ -332,7 +349,8 @@ static int __init eth_bind(struct usb_co
 	if (status < 0)
 		goto fail;
 
-	INFO(cdev, "%s, version: " DRIVER_VERSION "\n", DRIVER_DESC);
+	dev_info(&cdev->gadget->dev, "%s, version: " DRIVER_VERSION "\n",
+		 DRIVER_DESC);
 
 	return 0;
 
--- a/drivers/usb/gadget/f_subset.c
+++ b/drivers/usb/gadget/f_subset.c
@@ -103,6 +103,7 @@ static struct usb_interface_descriptor s
 	/* .iInterface = DYNAMIC */
 };
 
+#if 0
 static struct usb_cdc_header_desc header_desc __initdata = {
 	.bLength =		sizeof header_desc,
 	.bDescriptorType =	USB_DT_CS_INTERFACE,
@@ -110,6 +111,7 @@ static struct usb_cdc_header_desc header
 
 	.bcdCDC =		__constant_cpu_to_le16(0x0110),
 };
+#endif
 
 static struct usb_cdc_mdlm_desc mdlm_desc __initdata = {
 	.bLength =		sizeof mdlm_desc,
@@ -137,6 +139,7 @@ static u8 mdlm_detail_desc[] __initdata 
 	0,	/* network data capabilities ("raw" encapsulation) */
 };
 
+#if 0
 static struct usb_cdc_ether_desc ether_desc __initdata = {
 	.bLength =		sizeof ether_desc,
 	.bDescriptorType =	USB_DT_CS_INTERFACE,
@@ -149,9 +152,11 @@ static struct usb_cdc_ether_desc ether_d
 	.wNumberMCFilters =	__constant_cpu_to_le16(0),
 	.bNumberPowerFilters =	0,
 };
+#endif
 
 /* full speed support: */
 
+#if 0
 static struct usb_endpoint_descriptor fs_in_desc __initdata = {
 	.bLength =		USB_DT_ENDPOINT_SIZE,
 	.bDescriptorType =	USB_DT_ENDPOINT,
@@ -167,6 +172,7 @@ static struct usb_endpoint_descriptor fs
 	.bEndpointAddress =	USB_DIR_OUT,
 	.bmAttributes =		USB_ENDPOINT_XFER_BULK,
 };
+#endif
 
 static struct usb_descriptor_header *fs_eth_function[] __initdata = {
 	(struct usb_descriptor_header *) &subset_data_intf,
@@ -181,6 +187,7 @@ static struct usb_descriptor_header *fs_
 
 /* high speed support: */
 
+#if 0
 static struct usb_endpoint_descriptor hs_in_desc __initdata = {
 	.bLength =		USB_DT_ENDPOINT_SIZE,
 	.bDescriptorType =	USB_DT_ENDPOINT,
@@ -196,6 +203,7 @@ static struct usb_endpoint_descriptor hs
 	.bmAttributes =		USB_ENDPOINT_XFER_BULK,
 	.wMaxPacketSize =	__constant_cpu_to_le16(512),
 };
+#endif
 
 static struct usb_descriptor_header *hs_eth_function[] __initdata = {
 	(struct usb_descriptor_header *) &subset_data_intf,
--- a/drivers/usb/gadget/Makefile
+++ b/drivers/usb/gadget/Makefile
@@ -25,7 +25,7 @@ obj-$(CONFIG_USB_M66592)	+= m66592-udc.o
 C_UTILS =	composite.o usbstring.o config.o epautoconf.o
 
 g_zero-objs			:= zero.o f_sourcesink.o f_loopback.o $(C_UTILS)
-g_ether-objs			:= ether.o u_ether.o f_subset.o f_ecm.o $(C_UTILS)
+g_ether-objs			:= ether.o
 g_serial-objs			:= serial.o
 g_midi-objs			:= gmidi.o usbstring.o config.o epautoconf.o
 gadgetfs-objs			:= inode.o
--- a/drivers/usb/gadget/u_ether.c
+++ b/drivers/usb/gadget/u_ether.c
@@ -52,8 +52,6 @@
  * this single "physical" link to be used by multiple virtual links.)
  */
 
-#define DRIVER_VERSION	"29-May-2008"
-
 struct eth_dev {
 	/* lock is held while accessing port_usb
 	 * or updating its backlink port_usb->ioport
